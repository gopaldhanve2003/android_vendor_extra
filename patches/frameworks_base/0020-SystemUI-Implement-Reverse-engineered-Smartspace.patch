From 53961ef9ec70d14e31b5c147cbf0bfb786bc14a2 Mon Sep 17 00:00:00 2001
From: Daniel Jacob Chittoor <djchittoor47@gmail.com>
Date: Thu, 21 Jul 2022 01:37:15 +0530
Subject: [PATCH 20/25] SystemUI: Implement Reverse-engineered Smartspace

From SQ3A.220605.009.A1

[ghostrider-reborn]
- Adapt to aosp, fix crash on click, misc cleanup

This squashes the following commits:
Author: Jake Weinstein <jake@aospa.co>
Date:   Sat Jun 17 05:29:07 2023 +0900

    SystemUI: Apply "Remove smartspace flag" to KeyguardSmartspaceController

    Change-Id: I7bbd0767d69d54854db691f6c90188a33373f529

Author: Adithya R <gh0strider.2k18.reborn@gmail.com>
Date:   Thu May 18 10:40:11 2023 +0530

    fixup! SystemUI: Open google weather on tapping smartspace

    Add null check for smartspaceTarget before hijacking the intent.

    Fixes AOSPA/Tracker#5

    Change-Id: I1cf9057589f88ba1571a5068fb639cbe011f7a67

Author: Adithya R <gh0strider.2k18.reborn@gmail.com>
Date:   Thu Jan 26 12:32:39 2023 +0530

    SystemUI: Open google weather on tapping smartspace

    Since smartspace weather activity won't open due to
    caller package (Launcher3) not being google signed,
    hijack the intent to open the google app's exported
    weather activity, which behaves in the same fashion.

    Change-Id: Ic01ede73ab6253bcb301ac794985c3720c5beda3

Author: Ido Ben-Hur <idoybh2@gmail.com>
Date:   Wed Mar 15 11:21:00 2023 +0200

    SystemUI: smartspace: Adapt to 13-QPR2

    Change-Id: I142ee24fb02d2234fc1aec50b8d7ff03eba3d5cf
    Signed-off-by: aswin7469 <aswinas@pixysos.com>

Author: Adithya R <gh0strider.2k18.reborn@gmail.com>
Date:   Wed Jan 25 18:24:21 2023 +0530

    [WIP] SystemUI: Update smartspace to 13-QPR1

    Credits to https://github.com/BenzoRom/frameworks_packages_SystemUIGoogle (Jason Edson <jaysonedson@gmail.com>) for SystemUIGoogle jar and resources.

    Change-Id: I82c310ca72a5b4ae33b414fda223d127abd0d8d2

Author: Adithya R <gh0strider.2k18.reborn@gmail.com>
Date:   Sat Oct 15 15:04:25 2022 +0000

    SystemUI: BcSmartspaceView: Allow setting current page

    Required by launcher smartspace.

    Change-Id: I51d7728b6b2d3d7dfb06e39d1c9363f89795b54f

Author: jhenrique09 <jhsv09@gmail.com>
Date:   Wed Oct 5 12:26:30 2022 +0900

    SystemUI: Smartspace: Fix music indication on doze/aod

    Change-Id: If375051a6bf44c67344ad05a4366b6cc663f15d9
    Signed-off-by: Omkar Chandorkar <gotenksIN@aospa.co>

Author: Adithya R <gh0strider.2k18.reborn@gmail.com>
Date:   Thu Aug 18 19:11:14 2022 +0530

    SystemUI: Forward-port smartspace to Android 13

    Change-Id: Iddf5c22562b1858e3159fd939c54890e23b29063

Author: SahilSonar <sss.sonar2003@gmail.com>
Date:   Mon Oct 16 16:01:54 2023 +0200

    SystemUI: Forward-port smartspace to Android 14

    Change-Id: Ie408c347613af96cf271735071c93e374ae9e06e

SystemUI: Remove top padding from smartspace date card

Matches other cards and prevents the content from being too close to
the page indicator.

Change-Id: I092055e36883095118ef281232fa3721b7c54aa7

SystemUI: Add missing permission for Smartspace.

11-19 10:05:22.800  3994  3994 W BcSmartspaceView: Unable to register Doze Always on content observer.
11-19 10:05:22.800  3994  3994 W BcSmartspaceView: java.lang.SecurityException: No access to content://settings/secure/doze_always_on: Neither user 10209 nor current process has android.permission.INTERACT_ACROSS_USERS_FULL.

Change-Id: I39444dd95621ccfbe1dfd737e357145014e440d0
Co-Authored-By: Anay Wadhera <awadhera@berkeley.edu>
Co-Authored-By: Adithya R <gh0strider.2k18.reborn@gmail.com>
---
 packages/SystemUI/Android.bp                  |   2 +
 packages/SystemUI/AndroidManifest.xml         |  13 +-
 packages/SystemUI/bcsmartspace/Android.bp     |  36 +
 .../SystemUI/bcsmartspace/AndroidManifest.xml |   5 +
 .../res/drawable/bg_flight_qr_code.xml        |  21 +
 .../res/drawable/bg_image_generic.xml         |  21 +
 .../drawable/bg_rounded_secondary_card.xml    |  21 +
 .../bg_smartspace_combination_sub_card.xml    |  22 +
 .../res/drawable/bg_smartspace_media_item.xml |  21 +
 .../outline_rounded_secondary_card.xml        |  23 +
 .../res/drawable/page_indicator_dot.xml       |  22 +
 .../bcsmartspace/res/drawable/videocam.xml    |  26 +
 .../res/drawable/videocam_off.xml             |  26 +
 .../smartspace_base_card_package_delivery.xml |  42 +
 .../layout/smartspace_base_template_card.xml  |  42 +
 ...martspace_base_template_card_with_date.xml |  62 ++
 .../res/layout/smartspace_card.xml            |  42 +
 .../layout/smartspace_card_combination.xml    |  44 +
 .../smartspace_card_combination_at_store.xml  |  44 +
 .../res/layout/smartspace_card_date.xml       |  64 ++
 .../res/layout/smartspace_card_doorbell.xml   |  58 ++
 .../res/layout/smartspace_card_flight.xml     |  35 +
 .../smartspace_card_generic_image_with_bg.xml |  35 +
 ...martspace_card_generic_landscape_image.xml |  42 +
 ...smartspace_card_generic_portrait_image.xml |  41 +
 .../res/layout/smartspace_card_loyalty.xml    |  76 ++
 .../layout/smartspace_card_shopping_list.xml  | 110 +++
 .../res/layout/smartspace_card_sports.xml     |  81 ++
 .../smartspace_card_weather_forecast.xml      |  20 +
 ...martspace_card_weather_forecast_column.xml |  62 ++
 ...artspace_carousel_column_template_card.xml |  65 ++
 .../smartspace_carousel_template_card.xml     |  20 +
 .../smartspace_combination_sub_card.xml       |  52 ++
 ...martspace_combined_cards_template_card.xml |  47 +
 .../res/layout/smartspace_enhanced.xml        |  37 +
 .../res/layout/smartspace_extras.xml          |  53 ++
 .../smartspace_head_to_head_template_card.xml |  86 ++
 .../smartspace_sub_card_template_card.xml     |  53 ++
 .../smartspace_sub_image_template_card.xml    |  35 +
 .../smartspace_sub_list_template_card.xml     |  76 ++
 .../res/layout/smartspace_subtitle_pane.xml   |  47 +
 .../layout/smartspace_title_subtitle_pane.xml |  71 ++
 .../bcsmartspace/res/values/colors.xml        |   7 +
 .../bcsmartspace/res/values/dimens.xml        |  30 +
 .../bcsmartspace/res/values/plurals.xml       |  10 +
 .../bcsmartspace/res/values/strings.xml       |  14 +
 .../bcsmartspace/res/values/styles.xml        |  21 +
 .../systemui/smartspace/BcNextAlarmData.java  |  63 ++
 .../systemui/smartspace/BcSmartSpaceUtil.java | 204 +++++
 .../systemui/smartspace/BcSmartspaceCard.java | 337 ++++++++
 .../BcSmartspaceCardCombination.java          | 118 +++
 .../BcSmartspaceCardCombinationAtStore.java   |  38 +
 .../smartspace/BcSmartspaceCardDoorbell.java  | 308 +++++++
 .../smartspace/BcSmartspaceCardFlight.java    |  61 ++
 .../BcSmartspaceCardGenericImage.java         |  79 ++
 .../smartspace/BcSmartspaceCardLoyalty.java   | 107 +++
 .../smartspace/BcSmartspaceCardSecondary.java |  29 +
 .../BcSmartspaceCardShoppingList.java         | 141 +++
 .../smartspace/BcSmartspaceCardSports.java    | 123 +++
 .../BcSmartspaceCardWeatherForecast.java      | 172 ++++
 .../smartspace/BcSmartspaceDataProvider.java  |  91 ++
 .../smartspace/BcSmartspaceEvent.java         |  22 +
 .../BcSmartspaceTemplateDataUtils.java        |  91 ++
 .../systemui/smartspace/BcSmartspaceView.java | 485 +++++++++++
 .../systemui/smartspace/CardPagerAdapter.java | 812 ++++++++++++++++++
 .../smartspace/DoubleShadowIconDrawable.java  | 108 +++
 .../smartspace/DoubleShadowTextView.java      |  63 ++
 .../systemui/smartspace/EventEnum.java        |   5 +
 .../systemui/smartspace/IcuDateTextView.java  |  93 ++
 .../systemui/smartspace/InstanceId.java       |  24 +
 .../smartspace/InterceptingViewPager.java     |  86 ++
 .../smartspace/LazyServerFlagLoader.java      |  26 +
 .../systemui/smartspace/NewCardInfo.java      | 104 +++
 .../systemui/smartspace/PageIndicator.java    | 147 ++++
 .../systemui/smartspace/ProtoStore.java       |  56 ++
 .../systemui/smartspace/SmallHash.java        |  13 +
 .../logging/BcSmartspaceCardLogger.java       |  44 +
 .../logging/BcSmartspaceCardLoggerUtil.java   | 125 +++
 .../logging/BcSmartspaceCardLoggingInfo.java  |  75 ++
 .../BcSmartspaceCardMetadataLoggingInfo.java  |  44 +
 .../BcSmartspaceSubcardLoggingInfo.java       |  51 ++
 .../smartspace/logging/LogBuilder.java        |  96 +++
 .../uitemplate/BaseTemplateCard.java          | 325 +++++++
 .../uitemplate/CarouselTemplateCard.java      | 158 ++++
 .../uitemplate/CombinedCardsTemplateCard.java | 102 +++
 .../uitemplate/HeadToHeadTemplateCard.java    | 164 ++++
 .../uitemplate/SubCardTemplateCard.java       |  72 ++
 .../uitemplate/SubImageTemplateCard.java      | 283 ++++++
 .../uitemplate/SubListTemplateCard.java       | 107 +++
 packages/SystemUI/proto/Android.bp            |  10 +
 packages/SystemUI/proto/smartspace.proto      | 104 +++
 packages/SystemUI/res/values/flags.xml        |   2 +
 .../android/systemui/SystemUIInitializer.java |   4 +
 .../systemui/dagger/SysUIComponent.java       |   8 +
 .../systemui/dagger/SystemUIModule.java       |  35 +
 .../KeyguardMediaViewController.java          | 180 ++++
 .../KeyguardSmartspaceController.kt           |  22 +
 .../KeyguardZenAlarmViewController.kt         | 142 +++
 98 files changed, 8041 insertions(+), 1 deletion(-)
 create mode 100644 packages/SystemUI/bcsmartspace/Android.bp
 create mode 100644 packages/SystemUI/bcsmartspace/AndroidManifest.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/bg_flight_qr_code.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/bg_image_generic.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/bg_rounded_secondary_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_combination_sub_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_media_item.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/outline_rounded_secondary_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/page_indicator_dot.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/videocam.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/drawable/videocam_off.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_base_card_package_delivery.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card_with_date.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination_at_store.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_date.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_doorbell.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_flight.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_image_with_bg.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_landscape_image.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_portrait_image.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_loyalty.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_shopping_list.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_sports.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast_column.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_column_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_combination_sub_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_combined_cards_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_enhanced.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_extras.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_head_to_head_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_card_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_image_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_list_template_card.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_subtitle_pane.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/layout/smartspace_title_subtitle_pane.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/values/colors.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/values/dimens.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/values/plurals.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/values/strings.xml
 create mode 100644 packages/SystemUI/bcsmartspace/res/values/styles.xml
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcNextAlarmData.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartSpaceUtil.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCard.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombination.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombinationAtStore.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardDoorbell.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardFlight.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardGenericImage.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardLoyalty.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSecondary.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardShoppingList.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSports.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardWeatherForecast.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceDataProvider.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceEvent.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceTemplateDataUtils.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceView.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/CardPagerAdapter.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowIconDrawable.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowTextView.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/EventEnum.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/IcuDateTextView.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InstanceId.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InterceptingViewPager.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/LazyServerFlagLoader.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/NewCardInfo.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/PageIndicator.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/ProtoStore.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/SmallHash.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLogger.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggerUtil.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggingInfo.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardMetadataLoggingInfo.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceSubcardLoggingInfo.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/LogBuilder.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/BaseTemplateCard.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CarouselTemplateCard.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CombinedCardsTemplateCard.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/HeadToHeadTemplateCard.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubCardTemplateCard.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubImageTemplateCard.java
 create mode 100644 packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubListTemplateCard.java
 create mode 100644 packages/SystemUI/proto/Android.bp
 create mode 100644 packages/SystemUI/proto/smartspace.proto
 create mode 100644 packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardMediaViewController.java
 create mode 100644 packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardSmartspaceController.kt
 create mode 100644 packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardZenAlarmViewController.kt

diff --git a/packages/SystemUI/Android.bp b/packages/SystemUI/Android.bp
index bb9f690a6b21..904678091d78 100644
--- a/packages/SystemUI/Android.bp
+++ b/packages/SystemUI/Android.bp
@@ -577,6 +577,8 @@ android_library {
         "Traceur-res",
         "//frameworks/libs/systemui:motion_tool_lib",
         "//frameworks/libs/systemui:contextualeducationlib",
+        "motion_tool_lib",
+        "bcsmartspace-google",
         "notification_flags_lib",
         "PlatformComposeCore",
         "PlatformComposeSceneTransitionLayout",
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index f0fbf682aa20..750b57938e3b 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -390,6 +390,16 @@
     <protected-broadcast android:name="com.android.systemui.action.ACTION_LAUNCH_MEDIA_OUTPUT_BROADCAST_DIALOG" />
     <protected-broadcast android:name="com.android.systemui.STARTED" />
 
+    <!-- Smartspace -->
+    <uses-permission android:name="android.permission.ACCESS_NOTIFICATION_POLICY"/>
+    <uses-permission android:name="android.permission.INTERACT_ACROSS_USERS_FULL"/>
+    <permission android:name="com.android.systemui.permission.SEND_ALERT_BROADCASTS" android:protectionLevel="preinstalled|signature"/>
+    <uses-permission android:name="com.google.android.deskclock.permission.RECEIVE_ALERT_BROADCASTS"/>
+    <uses-permission android:name="com.google.android.apps.nexuslauncher.permission.QSB"/>
+    <protected-broadcast android:name="com.google.android.systemui.smartspace.CLICK_EVENT"/>
+    <protected-broadcast android:name="com.google.android.systemui.smartspace.ENABLE_UPDATE"/>
+    <protected-broadcast android:name="com.google.android.systemui.smartspace.EXPIRE_EVENT"/>
+
     <application
         android:name=".SystemUIApplication"
         android:persistent="true"
@@ -1047,7 +1057,8 @@
         <provider android:name=".keyguard.KeyguardSliceProvider"
                   android:authorities="com.android.systemui.keyguard"
                   android:grantUriPermissions="true"
-                  android:exported="true">
+                  android:exported="true"
+                  android:enabled="false">
         </provider>
 
         <receiver
diff --git a/packages/SystemUI/bcsmartspace/Android.bp b/packages/SystemUI/bcsmartspace/Android.bp
new file mode 100644
index 000000000000..727bc083f1fc
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/Android.bp
@@ -0,0 +1,36 @@
+android_library {
+    name: "bcsmartspace-res",
+
+    static_libs: [
+        "androidx.cardview_cardview",
+        "androidx-constraintlayout_constraintlayout",
+    ],
+
+    optimize: {
+        enabled: false,
+    },
+
+    resource_dirs: ["res"],
+}
+
+android_library {
+    name: "bcsmartspace-google",
+    srcs: [
+        "src/**/*.kt",
+        "src/**/*.java",
+        "src/**/I*.aidl",
+    ],
+    static_libs: [
+        "bcsmartspace-res",
+        "smartspace-proto-java",
+        "SystemUIPluginLib",
+        "SystemUISharedLib",
+        "SystemUI-statsd",
+        "iconloader_base",
+    ],
+    manifest: "AndroidManifest.xml",
+
+    kotlincflags: ["-Xjvm-default=enable"],
+
+    plugins: ["dagger2-compiler"],
+}
diff --git a/packages/SystemUI/bcsmartspace/AndroidManifest.xml b/packages/SystemUI/bcsmartspace/AndroidManifest.xml
new file mode 100644
index 000000000000..b6d117af09fd
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/AndroidManifest.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.android.systemui.bcsmartspace">
+
+</manifest>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/bg_flight_qr_code.xml b/packages/SystemUI/bcsmartspace/res/drawable/bg_flight_qr_code.xml
new file mode 100644
index 000000000000..898fd1d52c93
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/bg_flight_qr_code.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <solid android:color="#ffffff"/>
+    <corners android:radius="20dp"/>
+</shape>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/bg_image_generic.xml b/packages/SystemUI/bcsmartspace/res/drawable/bg_image_generic.xml
new file mode 100644
index 000000000000..fced0b5d45f2
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/bg_image_generic.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <solid android:color="@android:color/white"/>
+    <corners android:radius="4dp"/>
+</shape>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/bg_rounded_secondary_card.xml b/packages/SystemUI/bcsmartspace/res/drawable/bg_rounded_secondary_card.xml
new file mode 100644
index 000000000000..8aad169c2da5
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/bg_rounded_secondary_card.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <solid android:color="#ffffffff"/>
+    <corners android:radius="@dimen/enhanced_smartspace_secondary_card_corner_radius"/>
+</shape>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_combination_sub_card.xml b/packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_combination_sub_card.xml
new file mode 100644
index 000000000000..ac57986f284a
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_combination_sub_card.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+       android:shape="rectangle">
+    <solid android:color="?androidprv:attr/colorAccentPrimary"/>
+    <corners android:radius="@dimen/enhanced_smartspace_combination_sub_card_corner_radius"/>
+</shape>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_media_item.xml b/packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_media_item.xml
new file mode 100644
index 000000000000..79691feacfd3
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/bg_smartspace_media_item.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <solid android:color="@android:color/white"/>
+    <corners android:radius="20dp"/>
+</shape>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/outline_rounded_secondary_card.xml b/packages/SystemUI/bcsmartspace/res/drawable/outline_rounded_secondary_card.xml
new file mode 100644
index 000000000000..f19ad91ac733
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/outline_rounded_secondary_card.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <solid
+        android:color="@android:color/transparent"/>
+    <corners
+        android:radius="@dimen/enhanced_smartspace_secondary_card_corner_radius"/>
+</shape>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/page_indicator_dot.xml b/packages/SystemUI/bcsmartspace/res/drawable/page_indicator_dot.xml
new file mode 100644
index 000000000000..2c39011994dd
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/page_indicator_dot.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="oval">
+    <size
+        android:height="@dimen/page_indicator_dot_size"
+        android:width="@dimen/page_indicator_dot_size"/>
+</shape>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/videocam.xml b/packages/SystemUI/bcsmartspace/res/drawable/videocam.xml
new file mode 100644
index 000000000000..c7f5f52f6410
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/videocam.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:tint="?android:attr/textColorSecondary"
+        android:height="24dp"
+        android:width="24dp"
+        android:viewportWidth="24"
+        android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M4,20Q3.175,20 2.588,19.413Q2,18.825 2,18V6Q2,5.175 2.588,4.588Q3.175,4 4,4H16Q16.825,4 17.413,4.588Q18,5.175 18,6V10.5L22,6.5V17.5L18,13.5V18Q18,18.825 17.413,19.413Q16.825,20 16,20ZM4,18H16Q16,18 16,18Q16,18 16,18V6Q16,6 16,6Q16,6 16,6H4Q4,6 4,6Q4,6 4,6V18Q4,18 4,18Q4,18 4,18ZM4,18Q4,18 4,18Q4,18 4,18V6Q4,6 4,6Q4,6 4,6Q4,6 4,6Q4,6 4,6V18Q4,18 4,18Q4,18 4,18Z"/>
+</vector>
diff --git a/packages/SystemUI/bcsmartspace/res/drawable/videocam_off.xml b/packages/SystemUI/bcsmartspace/res/drawable/videocam_off.xml
new file mode 100644
index 000000000000..5248f456052f
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/drawable/videocam_off.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:height="24dp"
+        android:width="24dp"
+        android:viewportWidth="24"
+        android:viewportHeight="24"
+        android:tint="?android:attr/textColorSecondary">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M22,17.5 L18,13.5V15.175L16,13.175V6Q16,6 16,6Q16,6 16,6H8.825L6.825,4H16Q16.825,4 17.413,4.588Q18,5.175 18,6V10.5L22,6.5ZM20.55,23.35 L16.95,19.75Q16.725,19.875 16.5,19.938Q16.275,20 16,20H4Q3.175,20 2.588,19.413Q2,18.825 2,18V6Q2,5.725 2.062,5.5Q2.125,5.275 2.25,5.05L0.65,3.45L2.05,2.05L21.95,21.95ZM4,18H15.15Q15.15,18 15.15,18Q15.15,18 15.15,18L4,6.85Q4,6.85 4,6.85Q4,6.85 4,6.85V18Q4,18 4,18Q4,18 4,18ZM12.45,9.625Q12.45,9.625 12.45,9.625Q12.45,9.625 12.45,9.625ZM9.55,12.4Q9.55,12.4 9.55,12.4Q9.55,12.4 9.55,12.4Q9.55,12.4 9.55,12.4Q9.55,12.4 9.55,12.4Q9.55,12.4 9.55,12.4Q9.55,12.4 9.55,12.4Z"/>
+</vector>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_card_package_delivery.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_card_package_delivery.xml
new file mode 100644
index 000000000000..94511365f27f
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_card_package_delivery.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:baselineAligned="false">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:id="@+id/secondary_card_group"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:paddingEnd="@dimen/enhanced_smartspace_secondary_card_padding_end"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+
+    <include
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toEndOf="@+id/secondary_card_group"
+        app:layout_constraintTop_toTopOf="parent"
+        layout="@layout/smartspace_title_subtitle_pane"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card.xml
new file mode 100644
index 000000000000..fd157b1afafc
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.BaseTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/enhanced_smartspace_card_height"
+    android:baselineAligned="false">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:id="@+id/secondary_card_group"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:paddingEnd="@dimen/enhanced_smartspace_secondary_card_padding_end"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+
+    <include
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toEndOf="@+id/secondary_card_group"
+        app:layout_constraintTop_toTopOf="parent"
+        layout="@layout/smartspace_title_subtitle_pane"/>
+</com.google.android.systemui.smartspace.uitemplate.BaseTemplateCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card_with_date.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card_with_date.xml
new file mode 100644
index 000000000000..4626630ce00d
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_base_template_card_with_date.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.BaseTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/enhanced_smartspace_card_height"
+    android:baselineAligned="false">
+
+    <RelativeLayout
+        android:id="@+id/text_group"
+        android:clipChildren="false"
+        android:clipToPadding="false"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <com.google.android.systemui.smartspace.IcuDateTextView
+            android:id="@+id/date"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentStart="true"
+            style="@style/EnhancedSmartspaceTextTitle"/>
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/smartspace_subtitle_group"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/enhanced_smartspace_subtitle_margin_top"
+            android:layout_below="@+id/date">
+            <include layout="@layout/smartspace_subtitle_pane"/>
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <LinearLayout
+            android:id="@+id/smartspace_extras_group"
+            android:orientation="horizontal"
+            android:visibility="invisible"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="8dp"
+            android:layout_below="@+id/smartspace_subtitle_group">
+            <include layout="@layout/smartspace_extras"/>
+        </LinearLayout>
+    </RelativeLayout>
+</com.google.android.systemui.smartspace.uitemplate.BaseTemplateCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card.xml
new file mode 100644
index 000000000000..afac1b1b4510
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/enhanced_smartspace_card_height"
+    android:baselineAligned="false">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:id="@+id/secondary_card_group"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:paddingEnd="@dimen/enhanced_smartspace_secondary_card_padding_end"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+
+    <include
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toEndOf="@+id/secondary_card_group"
+        app:layout_constraintTop_toTopOf="parent"
+        layout="@layout/smartspace_title_subtitle_pane"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination.xml
new file mode 100644
index 000000000000..8feff1f5f9bc
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardCombination
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <include
+        android:id="@+id/first_sub_card"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        layout="@layout/smartspace_combination_sub_card"/>
+
+    <include
+        android:id="@+id/second_sub_card"
+        android:visibility="gone"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_marginStart="8dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintStart_toEndOf="@+id/first_sub_card"
+        app:layout_constraintTop_toTopOf="parent"
+        layout="@layout/smartspace_combination_sub_card"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardCombination>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination_at_store.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination_at_store.xml
new file mode 100644
index 000000000000..f855bdea440d
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_combination_at_store.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardCombinationAtStore
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <include
+        android:id="@+id/first_sub_card"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_marginEnd="8dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/second_sub_card"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        layout="@layout/smartspace_card_shopping_list"/>
+
+    <include
+        android:id="@+id/second_sub_card"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_marginStart="8dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        layout="@layout/smartspace_combination_sub_card"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardCombinationAtStore>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_date.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_date.xml
new file mode 100644
index 000000000000..4944eed9ebef
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_date.xml
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/enhanced_smartspace_card_height"
+    android:baselineAligned="false">
+
+    <RelativeLayout
+        android:id="@+id/text_group"
+        android:clipChildren="false"
+        android:clipToPadding="false"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <com.google.android.systemui.smartspace.IcuDateTextView
+            android:id="@+id/date"
+            android:focusable="true"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_alignParentStart="true"
+            android:layout_alignParentEnd="true"
+            style="@style/EnhancedSmartspaceTextTitle"/>
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/smartspace_subtitle_group"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/enhanced_smartspace_subtitle_margin_top"
+            android:layout_below="@+id/date">
+            <include layout="@layout/smartspace_subtitle_pane"/>
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <LinearLayout
+            android:id="@+id/smartspace_extras_group"
+            android:orientation="horizontal"
+            android:visibility="invisible"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="8dp"
+            android:layout_below="@+id/smartspace_subtitle_group">
+            <include layout="@layout/smartspace_extras"/>
+        </LinearLayout>
+    </RelativeLayout>
+</com.google.android.systemui.smartspace.BcSmartspaceCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_doorbell.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_doorbell.xml
new file mode 100644
index 000000000000..26502cba45ad
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_doorbell.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardDoorbell
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipToPadding="false"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <FrameLayout
+        android:id="@+id/loading_screen"
+        android:background="@drawable/bg_rounded_secondary_card"
+        android:visibility="gone"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:clipToOutline="true"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <ProgressBar
+            android:id="@+id/indeterminateBar"
+            android:layout_gravity="center"
+            android:layout_width="40dp"
+            android:layout_height="40dp"/>
+
+        <ImageView
+            android:id="@+id/loading_screen_icon"
+            android:layout_gravity="center"
+            android:layout_width="20dp"
+            android:layout_height="20dp"
+            android:src="@drawable/videocam"/>
+    </FrameLayout>
+
+    <ImageView
+        android:id="@+id/image_view"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:scaleType="centerInside"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardDoorbell>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_flight.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_flight.xml
new file mode 100644
index 000000000000..fe2d554f5c09
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_flight.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardFlight
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/flight_qr_code"
+        android:background="@drawable/bg_flight_qr_code"
+        android:padding="10dp"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:contentDescription="@string/smartspace_flight_qr_code"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardFlight>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_image_with_bg.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_image_with_bg.xml
new file mode 100644
index 000000000000..3ec886f39efc
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_image_with_bg.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:padding="16dp"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/image_view"
+        android:background="@drawable/bg_image_generic"
+        android:padding="4dp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:scaleType="centerInside"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_landscape_image.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_landscape_image.xml
new file mode 100644
index 000000000000..89deb72aa9f9
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_landscape_image.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <FrameLayout
+        android:background="@drawable/outline_rounded_secondary_card"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:clipToOutline="true"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="7:4"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <ImageView
+            android:id="@+id/image_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="centerCrop"/>
+    </FrameLayout>
+</com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_portrait_image.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_portrait_image.xml
new file mode 100644
index 000000000000..09bdc15c87a9
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_generic_portrait_image.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <FrameLayout
+        android:background="@drawable/outline_rounded_secondary_card"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:clipToOutline="true"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="4:7"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <ImageView
+            android:id="@+id/image_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="centerCrop"/>
+    </FrameLayout>
+</com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_loyalty.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_loyalty.xml
new file mode 100644
index 000000000000..8d7b7bf3138a
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_loyalty.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardLoyalty
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/image_view"
+        android:layout_width="32dp"
+        android:layout_height="32dp"
+        android:layout_margin="4dp"
+        app:layout_constraintBottom_toTopOf="@+id/card_prompt"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="packed"/>
+
+    <TextView
+        android:id="@+id/card_prompt"
+        android:textSize="12sp"
+        android:gravity="center_horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="4dp"
+        android:maxLines="2"
+        android:lineHeight="20dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/image_view"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <ImageView
+        android:id="@+id/loyalty_program_logo"
+        android:layout_width="32dp"
+        android:layout_height="32dp"
+        android:layout_margin="4dp"
+        app:layout_constraintBottom_toTopOf="@+id/loyalty_program_name"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="packed"/>
+
+    <TextView
+        android:id="@+id/loyalty_program_name"
+        android:textSize="12sp"
+        android:gravity="center_horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="4dp"
+        android:maxLines="1"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/loyalty_program_logo"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardLoyalty>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_shopping_list.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_shopping_list.xml
new file mode 100644
index 000000000000..a768d2167303
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_shopping_list.xml
@@ -0,0 +1,110 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardShoppingList
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/card_prompt_icon"
+        android:layout_width="32dp"
+        android:layout_height="32dp"
+        android:layout_margin="3dp"
+        app:layout_constraintBottom_toTopOf="@+id/card_prompt"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="packed"/>
+
+    <TextView
+        android:id="@+id/card_prompt"
+        android:textSize="12sp"
+        android:gravity="center_horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="3dp"
+        android:maxLines="2"
+        android:lineHeight="20dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/card_prompt_icon"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <ImageView
+        android:id="@+id/list_icon"
+        android:layout_width="20dp"
+        android:layout_height="20dp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+
+    <TextView
+        android:id="@+id/empty_list_message"
+        android:textSize="14sp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxLines="4"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/list_icon"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <TextView
+        android:id="@+id/list_item_1"
+        android:textSize="14sp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxLines="1"
+        app:layout_constraintBottom_toTopOf="@+id/list_item_2"
+        app:layout_constraintEnd_toStartOf="@+id/list_icon"
+        app:layout_constraintHorizontal_bias="0"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="packed"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <TextView
+        android:id="@+id/list_item_2"
+        android:textSize="14sp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxLines="1"
+        app:layout_constraintBottom_toTopOf="@+id/list_item_3"
+        app:layout_constraintEnd_toStartOf="@+id/list_icon"
+        app:layout_constraintHorizontal_bias="0"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/list_item_1"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <TextView
+        android:id="@+id/list_item_3"
+        android:textSize="14sp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxLines="1"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/list_icon"
+        app:layout_constraintHorizontal_bias="0"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/list_item_2"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardShoppingList>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_sports.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_sports.xml
new file mode 100644
index 000000000000..9d8115de9516
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_sports.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardSports
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:paddingTop="12dp"
+    android:paddingBottom="20dp"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:id="@+id/match_time_summary"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <ImageView
+        android:id="@+id/first_competitor_logo"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toStartOf="@+id/first_competitor_score"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/match_time_summary"
+        app:tint="?android:attr/textColorPrimary"/>
+
+    <ImageView
+        android:id="@+id/second_competitor_logo"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toBottomOf="@+id/first_competitor_logo"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toEndOf="@+id/second_competitor_score"
+        app:layout_constraintTop_toTopOf="@+id/first_competitor_logo"
+        app:tint="?android:attr/textColorPrimary"/>
+
+    <TextView
+        android:id="@+id/first_competitor_score"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="4dp"
+        app:layout_constraintBottom_toBottomOf="@+id/first_competitor_logo"
+        app:layout_constraintEnd_toStartOf="@+id/second_competitor_score"
+        app:layout_constraintStart_toEndOf="@+id/first_competitor_logo"
+        app:layout_constraintTop_toTopOf="@+id/first_competitor_logo"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <TextView
+        android:id="@+id/second_competitor_score"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="12dp"
+        android:layout_marginEnd="4dp"
+        app:layout_constraintBottom_toBottomOf="@+id/second_competitor_logo"
+        app:layout_constraintEnd_toStartOf="@+id/second_competitor_logo"
+        app:layout_constraintStart_toEndOf="@+id/first_competitor_score"
+        app:layout_constraintTop_toTopOf="@+id/second_competitor_logo"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</com.google.android.systemui.smartspace.BcSmartspaceCardSports>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast.xml
new file mode 100644
index 000000000000..2a474d9063a6
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceCardWeatherForecast
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent"/>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast_column.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast_column.xml
new file mode 100644
index 000000000000..293f8801eeb7
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_card_weather_forecast_column.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="0dp"
+    app:layout_constraintBottom_toBottomOf="parent"
+    app:layout_constraintHorizontal_chainStyle="spread_inside"
+    app:layout_constraintTop_toTopOf="parent">
+
+    <TextView
+        android:id="@+id/temperature_value"
+        android:textSize="14sp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="16dp"
+        app:layout_constraintBottom_toTopOf="@+id/weather_icon"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="spread_inside"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <ImageView
+        android:id="@+id/weather_icon"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:scaleType="centerInside"
+        app:layout_constraintBottom_toTopOf="@+id/timestamp"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/temperature_value"/>
+
+    <TextView
+        android:id="@+id/timestamp"
+        android:textSize="12sp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="16dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/weather_icon"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_column_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_column_template_card.xml
new file mode 100644
index 000000000000..0dd2cba08d08
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_column_template_card.xml
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="0dp"
+    app:layout_constraintBottom_toBottomOf="parent"
+    app:layout_constraintHorizontal_chainStyle="spread_inside"
+    app:layout_constraintTop_toTopOf="parent">
+
+    <TextView
+        android:id="@+id/upper_text"
+        android:textSize="14sp"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="16dp"
+        app:layout_constraintBottom_toTopOf="@+id/icon"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="spread_inside"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <ImageView
+        android:id="@+id/icon"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:scaleType="centerInside"
+        app:layout_constraintBottom_toTopOf="@+id/lower_text"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/upper_text"/>
+
+    <TextView
+        android:id="@+id/lower_text"
+        android:textSize="12sp"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="16dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/icon"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_template_card.xml
new file mode 100644
index 000000000000..bbc2bd92c88a
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_carousel_template_card.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.CarouselTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent"/>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_combination_sub_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_combination_sub_card.xml
new file mode 100644
index 000000000000..bb916f0194a3
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_combination_sub_card.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/first_sub_card"
+    android:background="@drawable/bg_smartspace_combination_sub_card"
+    android:padding="8dp"
+    android:layout_width="0dp"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/sub_card_icon"
+        android:layout_width="22dp"
+        android:layout_height="22dp"
+        android:layout_margin="2dp"
+        app:layout_constraintBottom_toTopOf="@+id/sub_card_text"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+
+    <TextView
+        android:id="@+id/sub_card_text"
+        android:textSize="14sp"
+        android:textColor="?androidprv:attr/textColorOnAccent"
+        android:ellipsize="end"
+        android:gravity="center_horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="2dp"
+        android:maxLines="2"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/sub_card_icon"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_combined_cards_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_combined_cards_template_card.xml
new file mode 100644
index 000000000000..499abdad839f
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_combined_cards_template_card.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.CombinedCardsTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="0dp"
+    android:layout_height="match_parent">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:id="@+id/first_sub_card_container"
+        android:background="@drawable/bg_smartspace_combination_sub_card"
+        android:visibility="gone"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toStartOf="@+id/second_sub_card_container"
+        app:layout_constraintStart_toStartOf="parent"/>
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:id="@+id/second_sub_card_container"
+        android:background="@drawable/bg_smartspace_combination_sub_card"
+        android:visibility="gone"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_marginStart="8dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintStart_toEndOf="@+id/first_sub_card_container"
+        app:layout_constraintTop_toTopOf="parent"/>
+</com.google.android.systemui.smartspace.uitemplate.CombinedCardsTemplateCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_enhanced.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_enhanced.xml
new file mode 100644
index 000000000000..2f92364522d0
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_enhanced.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.BcSmartspaceView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/bc_smartspace_view"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+
+    <com.google.android.systemui.smartspace.InterceptingViewPager
+        android:id="@+id/smartspace_card_pager"
+        android:layout_gravity="center"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/enhanced_smartspace_height"/>
+
+    <com.google.android.systemui.smartspace.PageIndicator
+        android:id="@+id/smartspace_page_indicator"
+        android:layout_gravity="start|bottom"
+        android:paddingTop="@dimen/page_indicator_padding_top"
+        android:visibility="visible"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:importantForAccessibility="no"/>
+</com.google.android.systemui.smartspace.BcSmartspaceView>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_extras.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_extras.xml
new file mode 100644
index 000000000000..e83a6b394ef5
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_extras.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <ImageView
+        android:id="@+id/alarm_icon"
+        android:layout_gravity="center_vertical"
+        android:visibility="gone"
+        android:layout_width="@dimen/enhanced_smartspace_icon_size"
+        android:layout_height="@dimen/enhanced_smartspace_icon_size"
+        android:scaleType="centerInside"
+        android:layout_marginEnd="4dp"/>
+
+    <com.google.android.systemui.smartspace.DoubleShadowTextView
+        android:id="@+id/alarm_text"
+        android:layout_gravity="center_vertical"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginEnd="4dp"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <com.google.android.systemui.smartspace.DoubleShadowTextView
+        android:id="@+id/supplemental_line_text"
+        android:layout_gravity="center_vertical"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginEnd="4dp"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <ImageView
+        android:id="@+id/dnd_icon"
+        android:layout_gravity="center_vertical"
+        android:visibility="gone"
+        android:layout_width="@dimen/enhanced_smartspace_icon_size"
+        android:layout_height="@dimen/enhanced_smartspace_icon_size"
+        android:scaleType="centerInside"/>
+</merge>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_head_to_head_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_head_to_head_template_card.xml
new file mode 100644
index 000000000000..7ca812569c38
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_head_to_head_template_card.xml
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.HeadToHeadTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:paddingTop="12dp"
+    android:paddingBottom="20dp"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:id="@+id/head_to_head_title"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <ImageView
+        android:id="@+id/first_competitor_icon"
+        android:visibility="gone"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toStartOf="@+id/first_competitor_text"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/head_to_head_title"
+        app:tint="?android:attr/textColorPrimary"/>
+
+    <ImageView
+        android:id="@+id/second_competitor_icon"
+        android:visibility="gone"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toBottomOf="@+id/first_competitor_icon"
+        app:layout_constraintDimensionRatio="1:1"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toEndOf="@+id/second_competitor_text"
+        app:layout_constraintTop_toTopOf="@+id/first_competitor_icon"
+        app:tint="?android:attr/textColorPrimary"/>
+
+    <TextView
+        android:id="@+id/first_competitor_text"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="4dp"
+        app:layout_constraintBottom_toBottomOf="@+id/first_competitor_icon"
+        app:layout_constraintEnd_toStartOf="@+id/second_competitor_text"
+        app:layout_constraintStart_toEndOf="@+id/first_competitor_icon"
+        app:layout_constraintTop_toTopOf="@+id/first_competitor_icon"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <TextView
+        android:id="@+id/second_competitor_text"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="12dp"
+        android:layout_marginEnd="4dp"
+        app:layout_constraintBottom_toBottomOf="@+id/second_competitor_icon"
+        app:layout_constraintEnd_toStartOf="@+id/second_competitor_icon"
+        app:layout_constraintStart_toEndOf="@+id/first_competitor_text"
+        app:layout_constraintTop_toTopOf="@+id/second_competitor_icon"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</com.google.android.systemui.smartspace.uitemplate.HeadToHeadTemplateCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_card_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_card_template_card.xml
new file mode 100644
index 000000000000..f6b93f2cef1b
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_card_template_card.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.SubCardTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/image_view"
+        android:visibility="gone"
+        android:layout_width="32dp"
+        android:layout_height="32dp"
+        android:layout_margin="4dp"
+        app:layout_constraintBottom_toTopOf="@+id/card_prompt"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="packed"/>
+
+    <TextView
+        android:id="@+id/card_prompt"
+        android:textSize="12sp"
+        android:gravity="center_horizontal"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="4dp"
+        android:maxLines="2"
+        android:lineHeight="20dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/image_view"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</com.google.android.systemui.smartspace.uitemplate.SubCardTemplateCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_image_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_image_template_card.xml
new file mode 100644
index 000000000000..8e885dbaf6c9
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_image_template_card.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.SubImageTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/image_view"
+        android:background="@drawable/outline_rounded_secondary_card"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:scaleType="centerInside"
+        android:clipToOutline="true"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+</com.google.android.systemui.smartspace.uitemplate.SubImageTemplateCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_list_template_card.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_list_template_card.xml
new file mode 100644
index 000000000000..e7dc1a1318b5
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_sub_list_template_card.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.google.android.systemui.smartspace.uitemplate.SubListTemplateCard
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="wrap_content"
+    android:layout_height="match_parent">
+
+    <ImageView
+        android:id="@+id/list_icon"
+        android:visibility="gone"
+        android:layout_width="20dp"
+        android:layout_height="20dp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"/>
+
+    <TextView
+        android:id="@+id/list_item_1"
+        android:textSize="14sp"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxLines="1"
+        app:layout_constraintBottom_toTopOf="@+id/list_item_2"
+        app:layout_constraintEnd_toStartOf="@+id/list_icon"
+        app:layout_constraintHorizontal_bias="0"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_chainStyle="packed"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <TextView
+        android:id="@+id/list_item_2"
+        android:textSize="14sp"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxLines="1"
+        app:layout_constraintBottom_toTopOf="@+id/list_item_3"
+        app:layout_constraintEnd_toStartOf="@+id/list_icon"
+        app:layout_constraintHorizontal_bias="0"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/list_item_1"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <TextView
+        android:id="@+id/list_item_3"
+        android:textSize="14sp"
+        android:visibility="gone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxLines="1"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/list_icon"
+        app:layout_constraintHorizontal_bias="0"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/list_item_2"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</com.google.android.systemui.smartspace.uitemplate.SubListTemplateCard>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_subtitle_pane.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_subtitle_pane.xml
new file mode 100644
index 000000000000..d4d0eb67bd1f
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_subtitle_pane.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+       xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <com.google.android.systemui.smartspace.DoubleShadowTextView
+        android:id="@+id/subtitle_text"
+        android:textColor="?android:attr/textColorPrimary"
+        android:focusable="true"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constrainedWidth="true"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/base_action_icon_subtitle"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+
+    <com.google.android.systemui.smartspace.DoubleShadowTextView
+        android:id="@+id/base_action_icon_subtitle"
+        android:textColor="?android:attr/textColorPrimary"
+        android:ellipsize="none"
+        android:focusable="true"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="@dimen/enhanced_smartspace_base_action_icon_margin"
+        app:layout_constraintBaseline_toBaselineOf="@+id/subtitle_text"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toEndOf="@+id/subtitle_text"
+        app:layout_constraintWidth_max="280dp"
+        app:layout_constraintWidth_min="wrap"
+        style="@style/EnhancedSmartspaceTextSubtitle"/>
+</merge>
diff --git a/packages/SystemUI/bcsmartspace/res/layout/smartspace_title_subtitle_pane.xml b/packages/SystemUI/bcsmartspace/res/layout/smartspace_title_subtitle_pane.xml
new file mode 100644
index 000000000000..b5d36daf56fe
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/layout/smartspace_title_subtitle_pane.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2022 Benzo Rom
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/text_group"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <Space
+        android:id="@+id/top_padding"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constrainedHeight="true"
+        app:layout_constraintBottom_toTopOf="@+id/title_text"
+        app:layout_constraintHeight_max="@dimen/enhanced_smartspace_padding_top"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_weight="1"/>
+
+    <com.google.android.systemui.smartspace.DoubleShadowTextView
+        android:id="@+id/title_text"
+        android:focusable="true"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constraintBottom_toTopOf="@+id/smartspace_subtitle_group"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/top_padding"
+        style="@style/EnhancedSmartspaceTextTitle"/>
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:id="@+id/smartspace_subtitle_group"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="@dimen/enhanced_smartspace_subtitle_margin_top"
+        app:layout_constraintBottom_toTopOf="@+id/smartspace_extras_group"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/title_text">
+        <include layout="@layout/smartspace_subtitle_pane"/>
+    </androidx.constraintlayout.widget.ConstraintLayout>
+
+    <LinearLayout
+        android:id="@+id/smartspace_extras_group"
+        android:gravity="top"
+        android:orientation="horizontal"
+        android:visibility="invisible"
+        android:layout_width="wrap_content"
+        android:layout_height="0dp"
+        android:layout_marginTop="8dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintHeight_min="wrap"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/smartspace_subtitle_group">
+        <include layout="@layout/smartspace_extras"/>
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/packages/SystemUI/bcsmartspace/res/values/colors.xml b/packages/SystemUI/bcsmartspace/res/values/colors.xml
new file mode 100644
index 000000000000..49cb2676ca08
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/values/colors.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="ambient_text_shadow_color">#40000000</color>
+    <color name="key_text_shadow_color">#89000000</color>
+    <color name="smartspace_button_background">@android:color/system_accent2_200</color>
+    <color name="smartspace_button_text">@android:color/system_accent2_700</color>
+</resources>
diff --git a/packages/SystemUI/bcsmartspace/res/values/dimens.xml b/packages/SystemUI/bcsmartspace/res/values/dimens.xml
new file mode 100644
index 000000000000..53869530af1a
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/values/dimens.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:androidprv="http://schemas.android.com/apk/prv/res/android">
+    <dimen name="ambient_text_shadow_radius">1.5dip</dimen>
+    <dimen name="enhanced_smartspace_base_action_icon_margin">8dp</dimen>
+    <dimen name="enhanced_smartspace_card_height">76dp</dimen>
+    <dimen name="enhanced_smartspace_combination_card_padding">8dp</dimen>
+    <dimen name="enhanced_smartspace_combination_sub_card_corner_radius">20dp</dimen>
+    <dimen name="enhanced_smartspace_dismiss_margin">16dp</dimen>
+    <dimen name="enhanced_smartspace_height">104dp</dimen>
+    <dimen name="enhanced_smartspace_icon_inset">2dp</dimen>
+    <dimen name="enhanced_smartspace_icon_margin">4dp</dimen>
+    <dimen name="enhanced_smartspace_icon_size">20dp</dimen>
+    <dimen name="enhanced_smartspace_margin_start_launcher">16dp</dimen>
+    <dimen name="enhanced_smartspace_padding_top">22dp</dimen>
+    <dimen name="enhanced_smartspace_secondary_card_corner_radius">20dp</dimen>
+    <dimen name="enhanced_smartspace_secondary_card_end_margin">1dp</dimen>
+    <dimen name="enhanced_smartspace_secondary_card_padding_end">12dp</dimen>
+    <dimen name="enhanced_smartspace_secondary_card_start_margin">1dp</dimen>
+    <dimen name="enhanced_smartspace_subtitle_margin_top">9dp</dimen>
+    <dimen name="enhanced_smartspace_subtitle_size">16sp</dimen>
+    <dimen name="enhanced_smartspace_title_size">20sp</dimen>
+    <dimen name="key_text_shadow_dx">0.5dip</dimen>
+    <dimen name="key_text_shadow_dy">0.5dip</dimen>
+    <dimen name="key_text_shadow_radius">0.5dip</dimen>
+    <dimen name="page_indicator_dot_margin">3dp</dimen>
+    <dimen name="page_indicator_dot_size">6dp</dimen>
+    <dimen name="page_indicator_padding_top">10dp</dimen>
+    <dimen name="page_indicator_width">16dp</dimen>
+    <dimen name="smartspaceLetterSpacing">0.02</dimen>
+</resources>
diff --git a/packages/SystemUI/bcsmartspace/res/values/plurals.xml b/packages/SystemUI/bcsmartspace/res/values/plurals.xml
new file mode 100644
index 000000000000..5a4ffc0e04a9
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/values/plurals.xml
@@ -0,0 +1,10 @@
+<resources>
+    <plurals name="smartspace_hours">
+        <item quantity="other">%d hr</item>
+        <item quantity="one">%d hr</item>
+    </plurals>
+    <plurals name="smartspace_minutes">
+        <item quantity="other">%d min</item>
+        <item quantity="one">%d min</item>
+    </plurals>
+</resources>
diff --git a/packages/SystemUI/bcsmartspace/res/values/strings.xml b/packages/SystemUI/bcsmartspace/res/values/strings.xml
new file mode 100644
index 000000000000..35b87834aaa9
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/values/strings.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:androidprv="http://schemas.android.com/apk/prv/res/android">
+    <string name="accessibility_next_alarm">Next alarm at %s</string>
+    <string name="accessibility_smartspace_page">Page %1$d of %2$d</string>
+    <string name="generic_smartspace_concatenated_desc">%1$s, %2$s</string>
+    <string name="smartspace_flight_card_gate_header">Gate</string>
+    <string name="smartspace_flight_card_seat_header">Seat</string>
+    <string name="smartspace_flight_qr_code">QR code</string>
+    <string name="smartspace_hours_mins">%1$s %2$s</string>
+    <string name="smartspace_icu_date_pattern">EEEMMMd</string>
+    <string name="smartspace_now">Now</string>
+    <string name="smartspace_pill_text_format">%1$s: %2$s</string>
+    <string name="smartspace_shopping_list_overflow">+ %1$d more</string>
+</resources>
diff --git a/packages/SystemUI/bcsmartspace/res/values/styles.xml b/packages/SystemUI/bcsmartspace/res/values/styles.xml
new file mode 100644
index 000000000000..8632242210a9
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/res/values/styles.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:androidprv="http://schemas.android.com/apk/prv/res/android">
+    <style name="EnhancedSmartspaceTextSubtitle" parent="@style/EnhancedSmartspaceTextTitle">
+        <item name="android:textSize">@dimen/enhanced_smartspace_subtitle_size</item>
+        <item name="android:textColor">?android:textColorSecondary</item>
+        <item name="android:fontFamily">@*android:string/config_bodyFontFamily</item>
+        <item name="android:letterSpacing">@dimen/smartspaceLetterSpacing</item>
+        <item name="android:lineHeight">20.0sp</item>
+    </style>
+    <style name="EnhancedSmartspaceTextTitle" parent="@android:style/Theme.DeviceDefault.DayNight">
+        <item name="android:textSize">@dimen/enhanced_smartspace_title_size</item>
+        <item name="android:textColor">?android:textColorPrimary</item>
+        <item name="android:ellipsize">end</item>
+        <item name="android:gravity">center_vertical</item>
+        <item name="android:maxLines">1</item>
+        <item name="android:includeFontPadding">false</item>
+        <item name="android:drawablePadding">@dimen/enhanced_smartspace_icon_margin</item>
+        <item name="android:fontFamily">@*android:string/config_headlineFontFamily</item>
+        <item name="android:lineHeight">24.0sp</item>
+    </style>
+</resources>
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcNextAlarmData.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcNextAlarmData.java
new file mode 100644
index 000000000000..c6e39915fd5e
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcNextAlarmData.java
@@ -0,0 +1,63 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.SmartspaceUtils;
+import android.app.smartspace.uitemplatedata.BaseTemplateData;
+import android.app.smartspace.uitemplatedata.TapAction;
+import android.content.Intent;
+import android.graphics.drawable.Drawable;
+import android.text.TextUtils;
+import android.view.View;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public final class BcNextAlarmData {
+    public static final SmartspaceAction SHOW_ALARMS_ACTION = new SmartspaceAction.Builder("nextAlarmId", "Next alarm").setIntent(new Intent("android.intent.action.SHOW_ALARMS")).build();
+    public String mDescription;
+    public SmartspaceTarget mHolidayAlarmsTarget;
+    public Drawable mImage;
+
+    public CharSequence getHolidayAlarmText(BaseTemplateData.SubItemInfo subItemInfo) {
+        SmartspaceAction headerAction;
+        if (subItemInfo != null && !SmartspaceUtils.isEmpty(subItemInfo.getText())) {
+            return subItemInfo.getText().getText();
+        }
+        SmartspaceTarget smartspaceTarget = this.mHolidayAlarmsTarget;
+        if (smartspaceTarget != null && (headerAction = smartspaceTarget.getHeaderAction()) != null) {
+            return headerAction.getTitle();
+        }
+        return null;
+    }
+
+    public void setOnClickListener(View view, TapAction tapAction, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, int i) {
+        BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo;
+        SmartspaceTarget smartspaceTarget = this.mHolidayAlarmsTarget;
+        if (smartspaceTarget == null) {
+            BcSmartspaceCardLoggingInfo.Builder builder = new BcSmartspaceCardLoggingInfo.Builder();
+            builder.mInstanceId = InstanceId.create("upcoming_alarm_card_94510_12684");
+            builder.mFeatureType = 23;
+            builder.mDisplaySurface = i;
+            bcSmartspaceCardLoggingInfo = new BcSmartspaceCardLoggingInfo(builder);
+        } else {
+            BcSmartspaceCardLoggingInfo.Builder builder2 = new BcSmartspaceCardLoggingInfo.Builder();
+            builder2.mInstanceId = InstanceId.create(smartspaceTarget);
+            builder2.mFeatureType = this.mHolidayAlarmsTarget.getFeatureType();
+            builder2.mDisplaySurface = i;
+            bcSmartspaceCardLoggingInfo = new BcSmartspaceCardLoggingInfo(builder2);
+        }
+        if (tapAction == null || (tapAction.getIntent() == null && tapAction.getPendingIntent() == null)) {
+            BcSmartSpaceUtil.setOnClickListener(view, this.mHolidayAlarmsTarget, SHOW_ALARMS_ACTION, smartspaceEventNotifier, "BcNextAlarmData", bcSmartspaceCardLoggingInfo, 0);
+        } else {
+            BcSmartSpaceUtil.setOnClickListener(view, this.mHolidayAlarmsTarget, tapAction, smartspaceEventNotifier, "BcNextAlarmData", bcSmartspaceCardLoggingInfo, 0);
+        }
+    }
+
+    public String getDescription(BaseTemplateData.SubItemInfo subItemInfo) {
+        CharSequence holidayAlarmText = getHolidayAlarmText(subItemInfo);
+        if (!TextUtils.isEmpty(holidayAlarmText)) {
+            return this.mDescription + " · " + ((Object) holidayAlarmText);
+        }
+        return this.mDescription;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartSpaceUtil.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartSpaceUtil.java
new file mode 100644
index 000000000000..76ea722d724e
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartSpaceUtil.java
@@ -0,0 +1,204 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.PendingIntent;
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.SmartspaceTargetEvent;
+import android.app.smartspace.uitemplatedata.TapAction;
+import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
+import android.content.ContentUris;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.Icon;
+import android.os.Bundle;
+import android.provider.CalendarContract;
+import android.util.Log;
+import android.view.View;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.android.systemui.plugins.FalsingManager;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLogger;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public final class BcSmartSpaceUtil {
+    private static final String GSA_PACKAGE = "com.google.android.googlequicksearchbox";
+    private static final String GSA_WEATHER_ACTIVITY = "com.google.android.apps.search.weather.WeatherExportedActivity";
+
+    public static FalsingManager sFalsingManager;
+    public static BcSmartspaceDataPlugin.IntentStarter sIntentStarter;
+
+    public static void setOnClickListener(View view, final SmartspaceTarget smartspaceTarget, final SmartspaceAction smartspaceAction, final BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, final String str, final BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo, final int i) {
+        if (view != null && smartspaceAction != null) {
+            final boolean z = smartspaceAction.getExtras() != null && smartspaceAction.getExtras().getBoolean("show_on_lockscreen");
+            final boolean z2 = smartspaceAction.getIntent() == null && smartspaceAction.getPendingIntent() == null;
+            BcSmartspaceDataPlugin.IntentStarter intentStarter = sIntentStarter;
+            if (intentStarter == null) {
+                intentStarter = new SmartspaceIntentStarter(str);
+            }
+            final BcSmartspaceDataPlugin.IntentStarter intentStarter2 = intentStarter;
+            view.setOnClickListener(new View.OnClickListener() { // from class: com.google.android.systemui.smartspace.BcSmartSpaceUtil.1
+                @Override // android.view.View.OnClickListener
+                public void onClick(View v) {
+                    FalsingManager falsingManager = BcSmartSpaceUtil.sFalsingManager;
+                    if (falsingManager == null || !falsingManager.isFalseTap(1)) {
+                        if (bcSmartspaceCardLoggingInfo != null) {
+                            if (bcSmartspaceCardLoggingInfo.mSubcardInfo != null) {
+                                bcSmartspaceCardLoggingInfo.mSubcardInfo.mClickedSubcardIndex = i;
+                            }
+                            BcSmartspaceCardLogger.log(BcSmartspaceEvent.SMARTSPACE_CARD_CLICK, bcSmartspaceCardLoggingInfo);
+                        }
+                        if (!z2 && !hijackIntent(smartspaceTarget, intentStarter2, v)) {
+                            intentStarter2.startFromAction(smartspaceAction, v, z);
+                        }
+                        if (smartspaceEventNotifier == null) {
+                            Log.w(str, "Cannot notify target interaction smartspace event: event notifier null.");
+                        } else {
+                            smartspaceEventNotifier.notifySmartspaceEvent(new SmartspaceTargetEvent.Builder(1).setSmartspaceTarget(smartspaceTarget).setSmartspaceActionId(smartspaceAction.getId()).build());
+                        }
+                    }
+                }
+            });
+            return;
+        }
+        Log.e(str, "No tap action can be set up");
+    }
+
+    public static void setOnClickListener(View view, final SmartspaceTarget smartspaceTarget, final TapAction tapAction, final BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, final String str, final BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo, final int i) {
+        if (view != null && tapAction != null) {
+            final boolean shouldShowOnLockscreen = tapAction.shouldShowOnLockscreen();
+            view.setOnClickListener(new View.OnClickListener() { // from class: com.google.android.systemui.smartspace.BcSmartSpaceUtil.2
+                @Override // android.view.View.OnClickListener
+                public void onClick(View view2) {
+                    FalsingManager falsingManager = BcSmartSpaceUtil.sFalsingManager;
+                    if (falsingManager == null || !falsingManager.isFalseTap(1)) {
+                        if (bcSmartspaceCardLoggingInfo != null) {
+                            if (bcSmartspaceCardLoggingInfo.mSubcardInfo != null) {
+                                bcSmartspaceCardLoggingInfo.mSubcardInfo.mClickedSubcardIndex = i;
+                            }
+                            BcSmartspaceCardLogger.log(BcSmartspaceEvent.SMARTSPACE_CARD_CLICK, bcSmartspaceCardLoggingInfo);
+                        }
+                        BcSmartspaceDataPlugin.IntentStarter intentStarter = BcSmartSpaceUtil.sIntentStarter;
+                        if (intentStarter == null) {
+                            intentStarter = new SmartspaceIntentStarter(str);
+                        }
+                        boolean z = tapAction == null || (tapAction.getIntent() == null && tapAction.getPendingIntent() == null);
+                        if (!z && !hijackIntent(smartspaceTarget, intentStarter, view2)) {
+                            intentStarter.startFromAction(tapAction, view2, shouldShowOnLockscreen);
+                        }
+                        if (smartspaceEventNotifier == null) {
+                            Log.w(str, "Cannot notify target interaction smartspace event: event notifier null.");
+                        } else {
+                            smartspaceEventNotifier.notifySmartspaceEvent(new SmartspaceTargetEvent.Builder(1).setSmartspaceTarget(smartspaceTarget).setSmartspaceActionId(tapAction.getId().toString()).build());
+                        }
+                    }
+                }
+            });
+            return;
+        }
+        Log.e(str, "No tap action can be set up");
+    }
+
+    public static void setOnClickListener(BcSmartspaceCardSecondary bcSmartspaceCardSecondary, SmartspaceTarget smartspaceTarget, TapAction tapAction, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, String str, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        setOnClickListener(bcSmartspaceCardSecondary, smartspaceTarget, tapAction, smartspaceEventNotifier, str, bcSmartspaceCardLoggingInfo, 0);
+    }
+
+    public static Drawable getIconDrawable(Context context, Icon icon) {
+        Drawable bitmapDrawable;
+        if (icon == null) {
+            return null;
+        }
+        if (icon.getType() == 1 || icon.getType() == 5) {
+            bitmapDrawable = new BitmapDrawable(context.getResources(), icon.getBitmap());
+        } else {
+            bitmapDrawable = icon.loadDrawable(context);
+        }
+        if (bitmapDrawable != null) {
+            int dimensionPixelSize = context.getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_icon_size);
+            bitmapDrawable.setBounds(0, 0, dimensionPixelSize, dimensionPixelSize);
+        }
+        return bitmapDrawable;
+    }
+
+    public static void setFalsingManager(FalsingManager falsingManager) {
+        sFalsingManager = falsingManager;
+    }
+
+    public static void setIntentStarter(BcSmartspaceDataPlugin.IntentStarter intentStarter) {
+        sIntentStarter = intentStarter;
+    }
+
+    public static Intent getOpenCalendarIntent() {
+        return new Intent("android.intent.action.VIEW").setData(ContentUris.appendId(CalendarContract.CONTENT_URI.buildUpon().appendPath("time"), System.currentTimeMillis()).build()).addFlags(270532608);
+    }
+
+    // Workaround for Google weather
+    private static boolean hijackIntent(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.IntentStarter intentStarter, View v) {
+        if (v instanceof IcuDateTextView) {
+            // Ensure we don't change date view
+            return false;
+        }
+        if (smartspaceTarget != null && smartspaceTarget.getFeatureType() == SmartspaceTarget.FEATURE_WEATHER) {
+            Intent intent = new Intent().setComponent(new ComponentName(GSA_PACKAGE, GSA_WEATHER_ACTIVITY))
+                    .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intentStarter.startIntent(v, intent, true);
+            return true;
+        }
+        return false;
+    }
+
+    /* renamed from: com.google.android.systemui.smartspace.BcSmartSpaceUtil$AnonymousClass1  reason: case insensitive filesystem */
+    public static class SmartspaceIntentStarter implements BcSmartspaceDataPlugin.IntentStarter {
+        public final String tag;
+
+        public SmartspaceIntentStarter(String str) {
+            this.tag = str;
+        }
+
+        public void startIntent(View view, Intent intent, boolean z) {
+            try {
+                view.getContext().startActivity(intent);
+            } catch (ActivityNotFoundException | NullPointerException | SecurityException e) {
+                Log.e(this.tag, "Cannot invoke smartspace intent", e);
+            }
+        }
+
+        public void startPendingIntent(View view, PendingIntent pendingIntent, boolean z) {
+            try {
+                pendingIntent.send();
+            } catch (PendingIntent.CanceledException e) {
+                Log.e(this.tag, "Cannot invoke canceled smartspace intent", e);
+            }
+        }
+    }
+
+    public static String getDimensionRatio(Bundle bundle) {
+        if (bundle.containsKey("imageRatioWidth") && bundle.containsKey("imageRatioHeight")) {
+            int i = bundle.getInt("imageRatioWidth");
+            int i2 = bundle.getInt("imageRatioHeight");
+            if (i > 0 && i2 > 0) {
+                return i + ":" + i2;
+            }
+            return null;
+        }
+        return null;
+    }
+
+    public static int getLoggingDisplaySurface(String str, boolean z, float f) {
+        if (str.equals("com.google.android.apps.nexuslauncher")) {
+            return 1;
+        }
+        if (str.equals("com.android.systemui")) {
+            if (f == 1.0f) {
+                return 3;
+            }
+            return f == 0.0f ? 2 : -1;
+        } else if (z) {
+            return 5;
+        } else {
+            return 0;
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCard.java
new file mode 100644
index 000000000000..86331524bea4
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCard.java
@@ -0,0 +1,337 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.ViewGroup;
+import android.view.accessibility.AccessibilityNodeInfo;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.app.animation.Interpolators;
+import com.android.launcher3.icons.GraphicsUtils;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardMetadataLoggingInfo;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceSubcardLoggingInfo;
+import java.util.List;
+import java.util.Locale;
+
+public class BcSmartspaceCard extends ConstraintLayout {
+    public DoubleShadowTextView mBaseActionIconSubtitleView;
+    public IcuDateTextView mDateView;
+    public final DoubleShadowIconDrawable mDndIconDrawable;
+    public ImageView mDndImageView;
+    public float mDozeAmount;
+    public BcSmartspaceDataPlugin.SmartspaceEventNotifier mEventNotifier;
+    public ViewGroup mExtrasGroup;
+    public final DoubleShadowIconDrawable mIconDrawable;
+    public int mIconTintColor;
+    public boolean mIsDreaming;
+    public final DoubleShadowIconDrawable mNextAlarmIconDrawable;
+    public ImageView mNextAlarmImageView;
+    public TextView mNextAlarmTextView;
+    public String mPrevSmartspaceTargetId;
+    public BcSmartspaceCardSecondary mSecondaryCard;
+    public ViewGroup mSecondaryCardGroup;
+    public TextView mSubtitleTextView;
+    public SmartspaceTarget mTarget;
+    public ViewGroup mTextGroup;
+    public TextView mTitleTextView;
+    public int mTopPadding;
+    public boolean mUsePageIndicatorUi;
+    public boolean mValidSecondaryCard;
+
+    public BcSmartspaceCard(Context context) {
+        this(context, null);
+    }
+
+    public BcSmartspaceCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mSecondaryCard = null;
+        this.mPrevSmartspaceTargetId = "";
+        this.mIconTintColor = GraphicsUtils.getAttrColor(getContext(), 16842806);
+        this.mTextGroup = null;
+        this.mSecondaryCardGroup = null;
+        this.mDateView = null;
+        this.mTitleTextView = null;
+        this.mSubtitleTextView = null;
+        this.mBaseActionIconSubtitleView = null;
+        this.mExtrasGroup = null;
+        this.mDndImageView = null;
+        this.mNextAlarmImageView = null;
+        this.mNextAlarmTextView = null;
+        this.mIsDreaming = false;
+        this.mIconDrawable = new DoubleShadowIconDrawable(context);
+        this.mNextAlarmIconDrawable = new DoubleShadowIconDrawable(context);
+        this.mDndIconDrawable = new DoubleShadowIconDrawable(context);
+    }
+
+    public static int getClickedIndex(BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo, int i) {
+        List<BcSmartspaceCardMetadataLoggingInfo> list;
+        BcSmartspaceSubcardLoggingInfo bcSmartspaceSubcardLoggingInfo = bcSmartspaceCardLoggingInfo.mSubcardInfo;
+        if (bcSmartspaceSubcardLoggingInfo == null || (list = bcSmartspaceSubcardLoggingInfo.mSubcards) == null) {
+            return 0;
+        }
+        for (int i2 = 0; i2 < list.size(); i2++) {
+            BcSmartspaceCardMetadataLoggingInfo bcSmartspaceCardMetadataLoggingInfo = list.get(i2);
+            if (bcSmartspaceCardMetadataLoggingInfo != null && bcSmartspaceCardMetadataLoggingInfo.mCardTypeId == i) {
+                return i2 + 1;
+            }
+        }
+        return 0;
+    }
+
+    public final void setDozeAmount(float f) {
+        this.mDozeAmount = f;
+        if (this.mTarget != null && this.mTarget.getBaseAction() != null && this.mTarget.getBaseAction().getExtras() != null) {
+            Bundle extras = this.mTarget.getBaseAction().getExtras();
+            if (this.mTitleTextView != null && extras.getBoolean("hide_title_on_aod")) {
+                this.mTitleTextView.setAlpha(1.0f - f);
+            }
+            if (this.mSubtitleTextView != null && extras.getBoolean("hide_subtitle_on_aod")) {
+                this.mSubtitleTextView.setAlpha(1.0f - f);
+            }
+        }
+        if (this.mDndImageView != null) {
+            this.mDndImageView.setAlpha(this.mDozeAmount);
+        }
+        if (this.mTextGroup != null) {
+            ViewGroup viewGroup = this.mSecondaryCardGroup;
+            int i = 0;
+            int i2 = 1;
+            boolean z = this.mDozeAmount == 1.0f || !this.mValidSecondaryCard;
+            if (z) {
+                i = 8;
+            }
+            BcSmartspaceTemplateDataUtils.updateVisibility(viewGroup, i);
+            ViewGroup viewGroup2 = this.mSecondaryCardGroup;
+            if (viewGroup2 != null && viewGroup2.getVisibility() != 8) {
+                ViewGroup viewGroup3 = this.mTextGroup;
+                if (!isRtl()) {
+                    i2 = -1;
+                }
+                viewGroup3.setTranslationX(Interpolators.EMPHASIZED.getInterpolation(this.mDozeAmount) * this.mSecondaryCardGroup.getWidth() * i2);
+                this.mSecondaryCardGroup.setAlpha(Math.max(0.0f, Math.min(1.0f, ((1.0f - this.mDozeAmount) * 9.0f) - 6.0f)));
+                return;
+            }
+            this.mTextGroup.setTranslationX(0.0f);
+        }
+    }
+
+    public final void setPrimaryTextColor(int i) {
+        if (this.mTitleTextView != null) {
+            this.mTitleTextView.setTextColor(i);
+        }
+        if (this.mDateView != null) {
+            this.mDateView.setTextColor(i);
+        }
+        if (this.mSubtitleTextView != null) {
+            this.mSubtitleTextView.setTextColor(i);
+        }
+        if (this.mBaseActionIconSubtitleView != null) {
+            this.mBaseActionIconSubtitleView.setTextColor(i);
+        }
+        if (this.mSecondaryCard != null) {
+            this.mSecondaryCard.setTextColor(i);
+        }
+        this.mIconTintColor = i;
+        if (this.mNextAlarmTextView != null) {
+            this.mNextAlarmTextView.setTextColor(i);
+        }
+        if (this.mNextAlarmImageView != null && this.mNextAlarmImageView.getDrawable() != null) {
+            this.mNextAlarmImageView.getDrawable().setTint(this.mIconTintColor);
+        }
+        if (this.mDndImageView != null && this.mDndImageView.getDrawable() != null) {
+            this.mDndImageView.getDrawable().setTint(this.mIconTintColor);
+        }
+        updateIconTint();
+    }
+
+    public final void setSubtitle(CharSequence charSequence, CharSequence charSequence2, boolean z) {
+        DoubleShadowIconDrawable doubleShadowIconDrawable;
+        int i;
+        if (this.mSubtitleTextView == null) {
+            Log.w("BcSmartspaceCard", "No subtitle view to update");
+            return;
+        }
+        this.mSubtitleTextView.setText(charSequence);
+        DoubleShadowIconDrawable doubleShadowIconDrawable2 = null;
+        if (!TextUtils.isEmpty(charSequence) && z) {
+            doubleShadowIconDrawable = this.mIconDrawable;
+        } else {
+            doubleShadowIconDrawable = null;
+        }
+        this.mSubtitleTextView.setCompoundDrawablesRelative(doubleShadowIconDrawable, null, null, null);
+        SmartspaceTarget smartspaceTarget = this.mTarget;
+        if (smartspaceTarget != null && smartspaceTarget.getFeatureType() == 5 && !this.mUsePageIndicatorUi) {
+            i = 2;
+        } else {
+            i = 1;
+        }
+        this.mSubtitleTextView.setMaxLines(i);
+        setFormattedContentDescription(this.mSubtitleTextView, charSequence, charSequence2);
+        if (z) {
+            doubleShadowIconDrawable2 = this.mIconDrawable;
+        }
+        BcSmartspaceTemplateDataUtils.offsetTextViewForIcon(this.mSubtitleTextView, doubleShadowIconDrawable2, isRtl());
+    }
+
+    public final void setTitle(CharSequence charSequence, CharSequence charSequence2, boolean z) {
+        SmartspaceAction headerAction;
+        Bundle extras;
+        boolean z2;
+        DoubleShadowIconDrawable doubleShadowIconDrawable;
+        if (this.mTitleTextView == null) {
+            Log.w("BcSmartspaceCard", "No title view to update");
+            return;
+        }
+        this.mTitleTextView.setText(charSequence);
+        DoubleShadowIconDrawable doubleShadowIconDrawable2 = null;
+        if (this.mTarget == null) {
+            headerAction = null;
+        } else {
+            headerAction = this.mTarget.getHeaderAction();
+        }
+        if (headerAction == null) {
+            extras = null;
+        } else {
+            extras = headerAction.getExtras();
+        }
+        if (extras != null && extras.containsKey("titleEllipsize")) {
+            String string = extras.getString("titleEllipsize");
+            try {
+                this.mTitleTextView.setEllipsize(TextUtils.TruncateAt.valueOf(string));
+            } catch (IllegalArgumentException e) {
+                Log.e("BcSmartspaceCard", "Invalid TruncateAt value: " + string);
+            }
+        } else if (this.mTarget != null && this.mTarget.getFeatureType() == 2 && Locale.ENGLISH.getLanguage().equals(getContext().getResources().getConfiguration().locale.getLanguage())) {
+            this.mTitleTextView.setEllipsize(TextUtils.TruncateAt.MIDDLE);
+        } else {
+            this.mTitleTextView.setEllipsize(TextUtils.TruncateAt.END);
+        }
+        boolean z3 = false;
+        if (extras != null) {
+            int i = extras.getInt("titleMaxLines");
+            if (i != 0) {
+                this.mTitleTextView.setMaxLines(i);
+            }
+            z2 = extras.getBoolean("disableTitleIcon");
+        } else {
+            z2 = false;
+        }
+        if (z && !z2) {
+            z3 = true;
+        }
+        if (z3) {
+            setFormattedContentDescription(this.mTitleTextView, charSequence, charSequence2);
+        }
+        if (z3) {
+            doubleShadowIconDrawable = this.mIconDrawable;
+        } else {
+            doubleShadowIconDrawable = null;
+        }
+        this.mTitleTextView.setCompoundDrawablesRelative(doubleShadowIconDrawable, null, null, null);
+        if (z3) {
+            doubleShadowIconDrawable2 = this.mIconDrawable;
+        }
+        BcSmartspaceTemplateDataUtils.offsetTextViewForIcon(this.mTitleTextView, doubleShadowIconDrawable2, isRtl());
+    }
+
+    public final void updateIconTint() {
+        if (this.mTarget != null && this.mIconDrawable != null) {
+            boolean z = this.mTarget.getFeatureType() != 1;
+            if (z) {
+                this.mIconDrawable.setTint(this.mIconTintColor);
+            } else {
+                this.mIconDrawable.setTintList(null);
+            }
+        }
+    }
+
+    public final void updateZenVisibility() {
+        if (this.mExtrasGroup == null) {
+            return;
+        }
+        ImageView imageView = this.mDndImageView;
+        boolean z3 = true;
+        int i = 0;
+        boolean z = imageView != null && imageView.getVisibility() == 0;
+        ImageView imageView2 = this.mNextAlarmImageView;
+        boolean z2 = imageView2 != null && imageView2.getVisibility() == 0;
+        if ((!z && !z2) || (this.mUsePageIndicatorUi && (this.mTarget == null || this.mTarget.getFeatureType() != 1))) {
+            z3 = false;
+        }
+        int i2 = this.mTopPadding;
+        if (!z3) {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mExtrasGroup, 4);
+            i = i2;
+        } else {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mExtrasGroup, 0);
+            if (this.mNextAlarmTextView != null) {
+                this.mNextAlarmTextView.setTextColor(this.mIconTintColor);
+            }
+            if (this.mNextAlarmImageView != null && this.mNextAlarmImageView.getDrawable() != null) {
+                this.mNextAlarmImageView.getDrawable().setTint(this.mIconTintColor);
+            }
+            if (this.mDndImageView != null && this.mDndImageView.getDrawable() != null) {
+                this.mDndImageView.getDrawable().setTint(this.mIconTintColor);
+            }
+        }
+        setPadding(getPaddingLeft(), i, getPaddingRight(), getPaddingBottom());
+    }
+
+    public final AccessibilityNodeInfo createAccessibilityNodeInfo() {
+        AccessibilityNodeInfo createAccessibilityNodeInfo = super.createAccessibilityNodeInfo();
+        createAccessibilityNodeInfo.getExtras().putCharSequence("AccessibilityNodeInfo.roleDescription", " ");
+        return createAccessibilityNodeInfo;
+    }
+
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mTextGroup = (ViewGroup) findViewById(R.id.text_group);
+        this.mSecondaryCardGroup = (ViewGroup) findViewById(R.id.secondary_card_group);
+        this.mDateView = (IcuDateTextView) findViewById(R.id.date);
+        this.mTitleTextView = (TextView) findViewById(R.id.title_text);
+        this.mSubtitleTextView = (TextView) findViewById(R.id.subtitle_text);
+        this.mBaseActionIconSubtitleView = (DoubleShadowTextView) findViewById(R.id.base_action_icon_subtitle);
+        this.mExtrasGroup = (ViewGroup) findViewById(R.id.smartspace_extras_group);
+        this.mTopPadding = getPaddingTop();
+        if (this.mExtrasGroup != null) {
+            this.mDndImageView = (ImageView) this.mExtrasGroup.findViewById(R.id.dnd_icon);
+            this.mNextAlarmImageView = (ImageView) this.mExtrasGroup.findViewById(R.id.alarm_icon);
+            this.mNextAlarmTextView = (TextView) this.mExtrasGroup.findViewById(R.id.alarm_text);
+        }
+    }
+
+    public final void setFormattedContentDescription(TextView textView, CharSequence charSequence, CharSequence charSequence2) {
+        String string;
+        String str;
+        if (TextUtils.isEmpty(charSequence)) {
+            string = String.valueOf(charSequence2);
+        } else if (TextUtils.isEmpty(charSequence2)) {
+            string = String.valueOf(charSequence);
+        } else {
+            string = getContext().getString(R.string.generic_smartspace_concatenated_desc, charSequence2, charSequence);
+        }
+        Object[] objArr = new Object[4];
+        if (textView == this.mTitleTextView) {
+            str = "TITLE";
+        } else if (textView == this.mSubtitleTextView) {
+            str = "SUBTITLE";
+        } else {
+            str = "SUPPLEMENTAL";
+        }
+        objArr[0] = str;
+        objArr[1] = charSequence;
+        objArr[2] = charSequence2;
+        objArr[3] = string;
+        Log.i("BcSmartspaceCard", String.format("setFormattedContentDescription: textView=%s, text=%s, iconDescription=%s, contentDescription=%s", objArr));
+        textView.setContentDescription(string);
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombination.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombination.java
new file mode 100644
index 000000000000..044efddb36f4
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombination.java
@@ -0,0 +1,118 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import java.util.List;
+
+public class BcSmartspaceCardCombination extends BcSmartspaceCardSecondary {
+    public ConstraintLayout mFirstSubCard;
+    public ConstraintLayout mSecondSubCard;
+
+    public BcSmartspaceCardCombination(Context context) {
+        super(context);
+    }
+
+    public final boolean fillSubCard(ConstraintLayout constraintLayout, SmartspaceTarget smartspaceTarget, SmartspaceAction smartspaceAction, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        boolean z;
+        CharSequence charSequence;
+        TextView textView = (TextView) constraintLayout.findViewById(R.id.sub_card_text);
+        ImageView imageView = (ImageView) constraintLayout.findViewById(R.id.sub_card_icon);
+        if (textView == null) {
+            Log.w("BcSmartspaceCardCombination", "No sub-card text field to update");
+            return false;
+        } else if (imageView == null) {
+            Log.w("BcSmartspaceCardCombination", "No sub-card image field to update");
+            return false;
+        } else {
+            BcSmartSpaceUtil.setOnClickListener(constraintLayout, smartspaceTarget, smartspaceAction, smartspaceEventNotifier, "BcSmartspaceCardCombination", bcSmartspaceCardLoggingInfo, 0);
+            Drawable iconDrawable = BcSmartSpaceUtil.getIconDrawable(getContext(), smartspaceAction.getIcon());
+            boolean z2 = true;
+            if (iconDrawable == null) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(imageView, 8);
+                z = false;
+            } else {
+                imageView.setImageDrawable(iconDrawable);
+                BcSmartspaceTemplateDataUtils.updateVisibility(imageView, 0);
+                z = true;
+            }
+            CharSequence title = smartspaceAction.getTitle();
+            if (TextUtils.isEmpty(title)) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(textView, 8);
+                z2 = z;
+            } else {
+                textView.setText(title);
+                BcSmartspaceTemplateDataUtils.updateVisibility(textView, 0);
+            }
+            if (z2) {
+                charSequence = smartspaceAction.getContentDescription();
+            } else {
+                charSequence = null;
+            }
+            constraintLayout.setContentDescription(charSequence);
+            if (z2) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(constraintLayout, 0);
+            } else {
+                BcSmartspaceTemplateDataUtils.updateVisibility(constraintLayout, 8);
+            }
+            return z2;
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+    }
+
+    public BcSmartspaceCardCombination(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstSubCard, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondSubCard, 8);
+    }
+
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mFirstSubCard = findViewById(R.id.first_sub_card);
+        this.mSecondSubCard = findViewById(R.id.second_sub_card);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        SmartspaceAction smartspaceAction;
+        boolean z3;
+        List<SmartspaceAction> actionChips = smartspaceTarget.getActionChips();
+        if (actionChips == null || actionChips.size() < 1 || (smartspaceAction = actionChips.get(0)) == null) {
+            return false;
+        }
+        boolean z = this.mFirstSubCard != null && fillSubCard(this.mFirstSubCard, smartspaceTarget, smartspaceAction, smartspaceEventNotifier, bcSmartspaceCardLoggingInfo);
+        if (actionChips.size() > 1 && actionChips.get(1) != null) {
+            z3 = fillSubCard(this.mSecondSubCard, smartspaceTarget, actionChips.get(1), smartspaceEventNotifier, bcSmartspaceCardLoggingInfo);
+        } else {
+            z3 = true;
+        }
+        if (getLayoutParams() instanceof LinearLayout.LayoutParams) {
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) getLayoutParams();
+            if (actionChips.size() > 1 && actionChips.get(1) != null && z3) {
+                layoutParams.weight = 3.0f;
+            } else {
+                layoutParams.weight = 1.0f;
+            }
+            setLayoutParams(layoutParams);
+        }
+        return z && z3;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombinationAtStore.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombinationAtStore.java
new file mode 100644
index 000000000000..3e2f0fd2a045
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardCombinationAtStore.java
@@ -0,0 +1,38 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.util.AttributeSet;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import java.util.List;
+
+public class BcSmartspaceCardCombinationAtStore extends BcSmartspaceCardCombination {
+    public BcSmartspaceCardCombinationAtStore(Context context) {
+        super(context);
+    }
+
+    public BcSmartspaceCardCombinationAtStore(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardCombination, com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        SmartspaceAction smartspaceAction;
+        List<SmartspaceAction> actionChips = smartspaceTarget.getActionChips();
+        if (actionChips == null || actionChips.isEmpty() || (smartspaceAction = actionChips.get(0)) == null) {
+            return false;
+        }
+        ConstraintLayout constraintLayout = this.mFirstSubCard;
+        boolean z = (constraintLayout instanceof BcSmartspaceCardShoppingList) && ((BcSmartspaceCardShoppingList) constraintLayout).setSmartspaceActions(smartspaceTarget, smartspaceEventNotifier, bcSmartspaceCardLoggingInfo);
+        ConstraintLayout constraintLayout2 = this.mSecondSubCard;
+        boolean z2 = constraintLayout2 != null && fillSubCard(constraintLayout2, smartspaceTarget, smartspaceAction, smartspaceEventNotifier, bcSmartspaceCardLoggingInfo);
+        if (z) {
+            this.mFirstSubCard.setBackgroundResource(R.drawable.bg_smartspace_combination_sub_card);
+        }
+        return z && z2;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardDoorbell.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardDoorbell.java
new file mode 100644
index 000000000000..91a911682ec9
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardDoorbell.java
@@ -0,0 +1,308 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.res.AssetManager;
+import android.content.res.ColorStateList;
+import android.graphics.Bitmap;
+import android.graphics.ImageDecoder;
+import android.graphics.drawable.AnimationDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.util.Size;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.core.graphics.drawable.RoundedBitmapDrawable;
+import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory;
+import com.android.launcher3.icons.RoundDrawableWrapper;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+public class BcSmartspaceCardDoorbell extends BcSmartspaceCardGenericImage {
+    public int mGifFrameDurationInMs;
+    public ImageView mLoadingIcon;
+    public ViewGroup mLoadingScreenView;
+    public String mPreviousTargetId;
+    public ProgressBar mProgressBar;
+    public final HashMap mUriToDrawable;
+
+    public BcSmartspaceCardDoorbell(Context context) {
+        super(context);
+        this.mUriToDrawable = new HashMap();
+        this.mGifFrameDurationInMs = 200;
+    }
+
+    public BcSmartspaceCardDoorbell(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mUriToDrawable = new HashMap();
+        this.mGifFrameDurationInMs = 200;
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage, com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        if (!isSysUiContext()) {
+            return false;
+        }
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        Bundle extras = baseAction != null ? baseAction.getExtras() : null;
+        List<Uri> imageUris = getImageUris(smartspaceTarget);
+        if (!imageUris.isEmpty()) {
+            if (extras != null && extras.containsKey("frameDurationMs")) {
+                this.mGifFrameDurationInMs = extras.getInt("frameDurationMs");
+            }
+            maybeResetImageView(smartspaceTarget);
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 0);
+            loadImageUris(imageUris);
+            Log.d("BcSmartspaceCardBell", "imageUri is set");
+            return true;
+        } else if (extras != null && extras.containsKey("imageBitmap")) {
+            Bitmap bitmap = (Bitmap) extras.get("imageBitmap");
+            maybeResetImageView(smartspaceTarget);
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 0);
+            if (bitmap != null) {
+                setRoundedBitmapDrawable(bitmap);
+                Log.d("BcSmartspaceCardBell", "imageBitmap is set");
+                return true;
+            }
+            return true;
+        } else if (extras == null || !extras.containsKey("loadingScreenState")) {
+            return false;
+        } else {
+            int i3 = extras.getInt("loadingScreenState");
+            String dimensionRatio = BcSmartSpaceUtil.getDimensionRatio(extras);
+            if (dimensionRatio == null) {
+                return false;
+            }
+            maybeResetImageView(smartspaceTarget);
+            showLoadingScreen(dimensionRatio, extras, i3);
+            return true;
+        }
+    }
+
+    private boolean isSysUiContext() {
+        return getContext().getPackageName().equals("com.android.systemui");
+    }
+
+    private List<Uri> getImageUris(SmartspaceTarget smartspaceTarget) {
+        return (List) smartspaceTarget.getIconGrid().stream().filter(action -> {
+            return action.getExtras().containsKey("imageUri");
+        }).map(action2 -> {
+            return action2.getExtras().getString("imageUri");
+        }).map(obj -> {
+            return Uri.parse(obj);
+        }).collect(Collectors.toList());
+    }
+
+    private void loadImageUris(List<Uri> list) {
+        addFramesToAnimatedDrawable((List) list.stream().map(uri -> {
+            return computeImageUri(getContext().getApplicationContext().getContentResolver(), getResources().getDimensionPixelOffset(R.dimen.enhanced_smartspace_height), getResources().getDimension(R.dimen.enhanced_smartspace_secondary_card_corner_radius), new WeakReference(this.mImageView), new WeakReference(this.mLoadingScreenView), uri);
+        }).filter(d -> {
+            return Objects.nonNull(d);
+        }).collect(Collectors.toList()));
+    }
+
+    private void addFramesToAnimatedDrawable(List<Drawable> list) {
+        AnimationDrawable animationDrawable = new AnimationDrawable();
+        for (Drawable drawable : list) {
+            animationDrawable.addFrame(drawable, this.mGifFrameDurationInMs);
+        }
+        this.mImageView.setImageDrawable(animationDrawable);
+        animationDrawable.start();
+    }
+
+    private DrawableWithUri computeImageUri(ContentResolver contentResolver, int i, float f, WeakReference weakReference, WeakReference weakReference2, Uri uri) {
+        return (DrawableWithUri) this.mUriToDrawable.computeIfAbsent(uri, newUri -> {
+            return drawImageUri(contentResolver, i, f, weakReference, weakReference2, (Uri) newUri);
+        });
+    }
+
+    public static DrawableWithUri drawImageUri(ContentResolver contentResolver, int i, float f, WeakReference weakReference, WeakReference weakReference2, Uri uri) {
+        DrawableWithUri drawableWithUri = new DrawableWithUri(f, i, contentResolver, uri, weakReference, weakReference2);
+        new LoadUriTask().execute(drawableWithUri);
+        return drawableWithUri;
+    }
+
+    private void setRoundedBitmapDrawable(Bitmap bm) {
+        if (bm.getHeight() != 0) {
+            int dimension = (int) getResources().getDimension(R.dimen.enhanced_smartspace_height);
+            bm = Bitmap.createScaledBitmap(bm, dimension * (bm.getWidth() / bm.getHeight()), dimension, true);
+        }
+        RoundedBitmapDrawable create = RoundedBitmapDrawableFactory.create(getResources(), bm);
+        create.setCornerRadius(getResources().getDimension(R.dimen.enhanced_smartspace_secondary_card_corner_radius));
+        this.mImageView.setImageDrawable(create);
+    }
+
+    public final void maybeResetImageView(SmartspaceTarget smartspaceTarget) {
+        this.mPreviousTargetId = smartspaceTarget.getSmartspaceTargetId();
+        if (!smartspaceTarget.getSmartspaceTargetId().equals(this.mPreviousTargetId)) {
+            this.mImageView.getLayoutParams().width = -2;
+            this.mImageView.setImageDrawable(null);
+            this.mUriToDrawable.clear();
+        }
+    }
+
+    private void showLoadingScreen(String str, Bundle extras, int i) {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 8);
+        ((ConstraintLayout.LayoutParams) this.mLoadingScreenView.getLayoutParams()).dimensionRatio = str;
+        this.mLoadingScreenView.setBackgroundTintList(ColorStateList.valueOf(getContext().getColor(R.color.smartspace_button_background)));
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoadingScreenView, 0);
+        toggleProgressBarAndLoadingIcon(extras, i);
+    }
+
+    private void toggleProgressBarAndLoadingIcon(Bundle extras, int i) {
+        boolean showProgress;
+        int vis;
+        if (extras.containsKey("progressBarWidth")) {
+            this.mProgressBar.getLayoutParams().width = (int) (getContext().getResources().getDisplayMetrics().density * extras.getInt("progressBarWidth"));
+        }
+        if (extras.containsKey("progressBarHeight")) {
+            this.mProgressBar.getLayoutParams().height = (int) (getContext().getResources().getDisplayMetrics().density * extras.getInt("progressBarHeight"));
+        }
+        this.mProgressBar.setIndeterminateTintList(ColorStateList.valueOf(getContext().getColor(R.color.smartspace_button_text)));
+        if (i == 1) {
+            showProgress = true;
+        } else if (i == 4) {
+            showProgress = extras.getBoolean("progressBarVisible", true);
+        } else {
+            showProgress = false;
+        }
+        if (showProgress) {
+            vis = 0;
+        } else {
+            vis = 8;
+        }
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mProgressBar, showProgress ? 0 : 8);
+        if (extras.containsKey("loadingIconWidth")) {
+            this.mLoadingIcon.getLayoutParams().width = (int) (getContext().getResources().getDisplayMetrics().density * extras.getInt("loadingIconWidth"));
+        }
+        if (extras.containsKey("loadingIconHeight")) {
+            this.mLoadingIcon.getLayoutParams().height = (int) (getContext().getResources().getDisplayMetrics().density * extras.getInt("loadingIconHeight"));
+        }
+        if (i == 2) {
+            this.mLoadingIcon.setImageDrawable(getContext().getDrawable(R.drawable.videocam));
+        } else if (i == 3) {
+            this.mLoadingIcon.setImageDrawable(getContext().getDrawable(R.drawable.videocam_off));
+        } else if (i == 4 || extras.containsKey("loadingScreenIcon")) {
+            this.mLoadingIcon.setImageBitmap((Bitmap) extras.get("loadingScreenIcon"));
+            if (extras.getBoolean("tintLoadingIcon", false)) {
+                this.mLoadingIcon.setColorFilter(getContext().getColor(R.color.smartspace_button_text));
+            }
+        }
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoadingIcon, vis);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mLoadingScreenView = (ViewGroup) findViewById(R.id.loading_screen);
+        this.mProgressBar = (ProgressBar) findViewById(R.id.indeterminateBar);
+        this.mLoadingIcon = (ImageView) findViewById(R.id.loading_screen_icon);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage, com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        super.resetUi();
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoadingScreenView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mProgressBar, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoadingIcon, 8);
+    }
+
+    public static Drawable getSampleBitmapDrawable(InputStream inputStream, final int i) {
+        try {
+            return ImageDecoder.decodeDrawable(
+                    ImageDecoder.createSource(null, inputStream),
+                    new ImageDecoder.OnHeaderDecodedListener() {
+                        @Override
+                        public final void onHeaderDecoded(
+                                ImageDecoder imageDecoder,
+                                ImageDecoder.ImageInfo imageInfo,
+                                ImageDecoder.Source source) {
+                            float f;
+                            imageDecoder.setAllocator(3);
+                            Size size = imageInfo.getSize();
+                            if (size.getHeight() != 0) {
+                                f = size.getWidth() / size.getHeight();
+                            } else {
+                                f = 0.0f;
+                            }
+                            imageDecoder.setTargetSize((int) (i * f), i);
+                        }
+                    });
+        } catch (IOException e) {
+            Log.e("BcSmartspaceCardBell", "Unable to decode stream: " + e);
+            return null;
+        }
+    }
+
+    public static class DrawableWithUri extends RoundDrawableWrapper {
+        public ContentResolver mContentResolver;
+        public Drawable mDrawable;
+        public int mHeightInPx;
+        public WeakReference<ImageView> mImageViewWeakReference;
+        public WeakReference<View> mLoadingScreenWeakReference;
+        public Uri mUri;
+
+        public DrawableWithUri(float f, int height, ContentResolver contentResolver, Uri uri, WeakReference imageViewWeakReference, WeakReference loadingScreenWeakReference) {
+            super(new ColorDrawable(0), f);
+            this.mUri = uri;
+            this.mHeightInPx = height;
+            this.mContentResolver = contentResolver;
+            this.mImageViewWeakReference = imageViewWeakReference;
+            this.mLoadingScreenWeakReference = loadingScreenWeakReference;
+        }
+    }
+
+    public static class LoadUriTask extends AsyncTask<DrawableWithUri, Void, DrawableWithUri> {
+        @Override // android.os.AsyncTask
+        public final DrawableWithUri doInBackground(DrawableWithUri[] drawableWithUriArr) {
+            if (drawableWithUriArr.length > 0) {
+                DrawableWithUri drawableWithUri = drawableWithUriArr[0];
+                try {
+                    drawableWithUri.mDrawable = BcSmartspaceCardDoorbell.getSampleBitmapDrawable(drawableWithUri.mContentResolver.openInputStream(drawableWithUri.mUri), drawableWithUri.mHeightInPx);
+                } catch (Exception e) {
+                    Log.w("BcSmartspaceCardBell", "open uri:" + drawableWithUri.mUri + " got exception:" + e);
+                }
+                return drawableWithUri;
+            }
+            return null;
+        }
+
+        @Override // android.os.AsyncTask
+        public final void onPostExecute(DrawableWithUri drawableWithUri) {
+            if (drawableWithUri != null) {
+                if (drawableWithUri.mDrawable != null) {
+                    drawableWithUri.setDrawable(drawableWithUri.mDrawable);
+                    ImageView imageView = drawableWithUri.mImageViewWeakReference.get();
+                    int intrinsicWidth = drawableWithUri.mDrawable.getIntrinsicWidth();
+                    if (imageView.getLayoutParams().width != intrinsicWidth) {
+                        Log.d("BcSmartspaceCardBell", "imageView requestLayout " + drawableWithUri.mUri);
+                        imageView.getLayoutParams().width = intrinsicWidth;
+                        imageView.requestLayout();
+                    }
+                } else {
+                    BcSmartspaceTemplateDataUtils.updateVisibility(drawableWithUri.mImageViewWeakReference.get(), 8);
+                }
+                BcSmartspaceTemplateDataUtils.updateVisibility(drawableWithUri.mLoadingScreenWeakReference.get(), 8);
+            }
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardFlight.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardFlight.java
new file mode 100644
index 000000000000..cded2154018a
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardFlight.java
@@ -0,0 +1,61 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public class BcSmartspaceCardFlight extends BcSmartspaceCardSecondary {
+    public ImageView mQrCodeView;
+
+    public BcSmartspaceCardFlight(Context context) {
+        super(context);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+    }
+
+    public BcSmartspaceCardFlight(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mQrCodeView, 8);
+    }
+
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mQrCodeView = (ImageView) findViewById(R.id.flight_qr_code);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        Bundle extras;
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        if (baseAction == null) {
+            extras = null;
+        } else {
+            extras = baseAction.getExtras();
+        }
+        if (extras == null || !extras.containsKey("qrCodeBitmap")) {
+            return false;
+        }
+        Bitmap bitmap = (Bitmap) extras.get("qrCodeBitmap");
+        if (this.mQrCodeView == null) {
+            Log.w("BcSmartspaceCardFlight", "No flight QR code view to update");
+        } else {
+            this.mQrCodeView.setImageBitmap(bitmap);
+        }
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mQrCodeView, 0);
+        return true;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardGenericImage.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardGenericImage.java
new file mode 100644
index 000000000000..ddea963c0ec2
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardGenericImage.java
@@ -0,0 +1,79 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public class BcSmartspaceCardGenericImage extends BcSmartspaceCardSecondary {
+    public ImageView mImageView;
+
+    public BcSmartspaceCardGenericImage(Context context) {
+        super(context);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public void setTextColor(int i) {
+    }
+
+    public BcSmartspaceCardGenericImage(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public void resetUi() {
+        this.mImageView.setImageBitmap(null);
+    }
+
+    public void setImageBitmap(Bitmap bitmap) {
+        this.mImageView.setImageBitmap(bitmap);
+    }
+
+    public void onFinishInflate() {
+        super.onFinishInflate();
+        this.mImageView = (ImageView) findViewById(R.id.image_view);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        Bundle extras;
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        if (baseAction == null) {
+            extras = null;
+        } else {
+            extras = baseAction.getExtras();
+        }
+        if (extras != null && extras.containsKey("imageBitmap")) {
+            if (extras.containsKey("imageScaleType")) {
+                String string = extras.getString("imageScaleType");
+                try {
+                    this.mImageView.setScaleType(ImageView.ScaleType.valueOf(string));
+                } catch (IllegalArgumentException e) {
+                    Log.e("SmartspaceGenericImg", "Invalid imageScaleType value: " + string);
+                }
+            }
+            String dimensionRatio = BcSmartSpaceUtil.getDimensionRatio(extras);
+            if (dimensionRatio != null) {
+                ((ConstraintLayout.LayoutParams) this.mImageView.getLayoutParams()).dimensionRatio = dimensionRatio;
+            }
+            if (extras.containsKey("imageLayoutWidth")) {
+                ((ViewGroup.MarginLayoutParams) this.mImageView.getLayoutParams()).width = extras.getInt("imageLayoutWidth");
+            }
+            if (extras.containsKey("imageLayoutHeight")) {
+                ((ViewGroup.MarginLayoutParams) this.mImageView.getLayoutParams()).height = extras.getInt("imageLayoutHeight");
+            }
+            setImageBitmap((Bitmap) extras.get("imageBitmap"));
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardLoyalty.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardLoyalty.java
new file mode 100644
index 000000000000..d60a12d31136
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardLoyalty.java
@@ -0,0 +1,107 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public class BcSmartspaceCardLoyalty extends BcSmartspaceCardGenericImage {
+    public TextView mCardPromptView;
+    public ImageView mLoyaltyProgramLogoView;
+    public TextView mLoyaltyProgramNameView;
+
+    public BcSmartspaceCardLoyalty(Context context) {
+        super(context);
+    }
+
+    public BcSmartspaceCardLoyalty(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage, com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        this.mLoyaltyProgramNameView.setTextColor(i);
+        this.mCardPromptView.setTextColor(i);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mLoyaltyProgramLogoView = (ImageView) findViewById(R.id.loyalty_program_logo);
+        this.mLoyaltyProgramNameView = (TextView) findViewById(R.id.loyalty_program_name);
+        this.mCardPromptView = (TextView) findViewById(R.id.card_prompt);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage, com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        super.resetUi();
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoyaltyProgramLogoView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoyaltyProgramNameView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mCardPromptView, 8);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage
+    public final void setImageBitmap(Bitmap bitmap) {
+        super.setImageBitmap(bitmap);
+        this.mLoyaltyProgramLogoView.setImageBitmap(bitmap);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardGenericImage, com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        Bundle extras;
+        super.setSmartspaceActions(smartspaceTarget, smartspaceEventNotifier, bcSmartspaceCardLoggingInfo);
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        if (baseAction == null) {
+            extras = null;
+        } else {
+            extras = baseAction.getExtras();
+        }
+        if (extras == null) {
+            return false;
+        }
+        boolean containsKey = extras.containsKey("imageBitmap");
+        if (extras.containsKey("cardPrompt")) {
+            String string = extras.getString("cardPrompt");
+            TextView textView = this.mCardPromptView;
+            if (textView == null) {
+                Log.w("BcSmartspaceCardLoyalty", "No card prompt view to update");
+            } else {
+                textView.setText(string);
+            }
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mCardPromptView, 0);
+            if (containsKey) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 0);
+                return true;
+            }
+            return true;
+        } else if (extras.containsKey("loyaltyProgramName")) {
+            String string2 = extras.getString("loyaltyProgramName");
+            TextView textView2 = this.mLoyaltyProgramNameView;
+            if (textView2 == null) {
+                Log.w("BcSmartspaceCardLoyalty", "No loyalty program name view to update");
+            } else {
+                textView2.setText(string2);
+            }
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoyaltyProgramNameView, 0);
+            if (containsKey) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoyaltyProgramLogoView, 0);
+                return true;
+            }
+            return true;
+        } else {
+            if (containsKey) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mLoyaltyProgramLogoView, 0);
+            }
+            return containsKey;
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSecondary.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSecondary.java
new file mode 100644
index 000000000000..968a55e3be23
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSecondary.java
@@ -0,0 +1,29 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.util.AttributeSet;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public abstract class BcSmartspaceCardSecondary extends ConstraintLayout {
+    public String mPrevSmartspaceTargetId;
+
+    public abstract boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo);
+
+    public abstract void setTextColor(int i);
+
+    public BcSmartspaceCardSecondary(Context context) {
+        super(context);
+        this.mPrevSmartspaceTargetId = "";
+    }
+
+    public BcSmartspaceCardSecondary(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mPrevSmartspaceTargetId = "";
+    }
+
+    public void resetUi() {
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardShoppingList.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardShoppingList.java
new file mode 100644
index 000000000000..71914a2725d3
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardShoppingList.java
@@ -0,0 +1,141 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import java.util.Locale;
+
+public class BcSmartspaceCardShoppingList extends BcSmartspaceCardSecondary {
+    public static final int[] LIST_ITEM_TEXT_VIEW_IDS = {R.id.list_item_1, R.id.list_item_2, R.id.list_item_3};
+    public ImageView mCardPromptIconView;
+    public TextView mCardPromptView;
+    public TextView mEmptyListMessageView;
+    public ImageView mListIconView;
+    public TextView[] mListItems;
+
+    public BcSmartspaceCardShoppingList(Context context) {
+        super(context);
+        this.mListItems = new TextView[3];
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mEmptyListMessageView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mListIconView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mCardPromptIconView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mCardPromptView, 8);
+        for (int i = 0; i < 3; i++) {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mListItems[i], 8);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        this.mCardPromptView.setTextColor(i);
+        this.mEmptyListMessageView.setTextColor(i);
+        for (int i2 = 0; i2 < 3; i2++) {
+            TextView textView = this.mListItems[i2];
+            if (textView == null) {
+                Log.w("BcSmartspaceCardShoppingList", String.format(Locale.US, "Missing list item view to update at row: %d", Integer.valueOf(i2 + 1)));
+                return;
+            }
+            textView.setTextColor(i);
+        }
+    }
+
+    public BcSmartspaceCardShoppingList(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mListItems = new TextView[3];
+    }
+
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mCardPromptView = (TextView) findViewById(R.id.card_prompt);
+        this.mEmptyListMessageView = (TextView) findViewById(R.id.empty_list_message);
+        this.mCardPromptIconView = (ImageView) findViewById(R.id.card_prompt_icon);
+        this.mListIconView = (ImageView) findViewById(R.id.list_icon);
+        for (int i = 0; i < 3; i++) {
+            this.mListItems[i] = (TextView) findViewById(LIST_ITEM_TEXT_VIEW_IDS[i]);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        Bundle extras;
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        Bitmap bitmap = null;
+        if (baseAction == null) {
+            extras = null;
+        } else {
+            extras = baseAction.getExtras();
+        }
+        if (extras != null) {
+            if (extras.containsKey("appIcon")) {
+                bitmap = (Bitmap) extras.get("appIcon");
+            } else if (extras.containsKey("imageBitmap")) {
+                bitmap = (Bitmap) extras.get("imageBitmap");
+            }
+            this.mCardPromptIconView.setImageBitmap(bitmap);
+            this.mListIconView.setImageBitmap(bitmap);
+            if (extras.containsKey("cardPrompt")) {
+                String string = extras.getString("cardPrompt");
+                TextView textView = this.mCardPromptView;
+                if (textView == null) {
+                    Log.w("BcSmartspaceCardShoppingList", "No card prompt view to update");
+                } else {
+                    textView.setText(string);
+                }
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mCardPromptView, 0);
+                if (bitmap != null) {
+                    BcSmartspaceTemplateDataUtils.updateVisibility(this.mCardPromptIconView, 0);
+                    return true;
+                }
+                return true;
+            } else if (extras.containsKey("emptyListString")) {
+                String string2 = extras.getString("emptyListString");
+                TextView textView2 = this.mEmptyListMessageView;
+                if (textView2 == null) {
+                    Log.w("BcSmartspaceCardShoppingList", "No empty list message view to update");
+                } else {
+                    textView2.setText(string2);
+                }
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mEmptyListMessageView, 0);
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mListIconView, 0);
+                return true;
+            } else if (extras.containsKey("listItems")) {
+                String[] stringArray = extras.getStringArray("listItems");
+                if (stringArray.length == 0) {
+                    return false;
+                }
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mListIconView, 0);
+                for (int i = 0; i < 3; i++) {
+                    TextView textView3 = this.mListItems[i];
+                    if (textView3 == null) {
+                        Log.w("BcSmartspaceCardShoppingList", String.format(Locale.US, "Missing list item view to update at row: %d", Integer.valueOf(i + 1)));
+                        return true;
+                    }
+                    if (i < stringArray.length) {
+                        BcSmartspaceTemplateDataUtils.updateVisibility(textView3, 0);
+                        textView3.setText(stringArray[i]);
+                    } else {
+                        BcSmartspaceTemplateDataUtils.updateVisibility(textView3, 8);
+                        textView3.setText("");
+                    }
+                }
+                return true;
+            } else {
+                return false;
+            }
+        }
+        return false;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSports.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSports.java
new file mode 100644
index 000000000000..70904e1f8c4c
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardSports.java
@@ -0,0 +1,123 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public class BcSmartspaceCardSports extends BcSmartspaceCardSecondary {
+    public ImageView mFirstCompetitorLogo;
+    public TextView mFirstCompetitorScore;
+    public ImageView mSecondCompetitorLogo;
+    public TextView mSecondCompetitorScore;
+    public TextView mSummaryView;
+
+    public BcSmartspaceCardSports(Context context) {
+        super(context);
+    }
+
+    public BcSmartspaceCardSports(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSummaryView, 4);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorScore, 4);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorScore, 4);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorLogo, 4);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorLogo, 4);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        this.mSummaryView.setTextColor(i);
+        this.mFirstCompetitorScore.setTextColor(i);
+        this.mSecondCompetitorScore.setTextColor(i);
+    }
+
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mSummaryView = (TextView) findViewById(R.id.match_time_summary);
+        this.mFirstCompetitorScore = (TextView) findViewById(R.id.first_competitor_score);
+        this.mSecondCompetitorScore = (TextView) findViewById(R.id.second_competitor_score);
+        this.mFirstCompetitorLogo = (ImageView) findViewById(R.id.first_competitor_logo);
+        this.mSecondCompetitorLogo = (ImageView) findViewById(R.id.second_competitor_logo);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        Bundle extras;
+        boolean z;
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        if (baseAction == null) {
+            extras = null;
+        } else {
+            extras = baseAction.getExtras();
+        }
+        if (extras == null) {
+            return false;
+        }
+        if (extras.containsKey("matchTimeSummary")) {
+            String string = extras.getString("matchTimeSummary");
+            if (this.mSummaryView == null) {
+                Log.w("BcSmartspaceCardSports", "No match time summary view to update");
+            } else {
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mSummaryView, 0);
+                this.mSummaryView.setText(string);
+            }
+            z = true;
+        } else {
+            z = false;
+        }
+        if (extras.containsKey("firstCompetitorScore")) {
+            String string2 = extras.getString("firstCompetitorScore");
+            if (this.mFirstCompetitorScore == null) {
+                Log.w("BcSmartspaceCardSports", "No first competitor logo view to update");
+            } else {
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorScore, 0);
+                this.mFirstCompetitorScore.setText(string2);
+            }
+            z = true;
+        }
+        if (extras.containsKey("secondCompetitorScore")) {
+            String string3 = extras.getString("secondCompetitorScore");
+            if (this.mSecondCompetitorScore == null) {
+                Log.w("BcSmartspaceCardSports", "No second competitor logo view to update");
+            } else {
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorScore, 0);
+                this.mSecondCompetitorScore.setText(string3);
+            }
+            z = true;
+        }
+        if (extras.containsKey("firstCompetitorLogo")) {
+            Bitmap bitmap = (Bitmap) extras.get("firstCompetitorLogo");
+            if (this.mFirstCompetitorLogo == null) {
+                Log.w("BcSmartspaceCardSports", "No first competitor logo view to update");
+            } else {
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorLogo, 0);
+                this.mFirstCompetitorLogo.setImageBitmap(bitmap);
+            }
+            z = true;
+        }
+        if (extras.containsKey("secondCompetitorLogo")) {
+            Bitmap bitmap2 = (Bitmap) extras.get("secondCompetitorLogo");
+            if (this.mSecondCompetitorLogo == null) {
+                Log.w("BcSmartspaceCardSports", "No second competitor logo view to update");
+                return true;
+            }
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorLogo, 0);
+            this.mSecondCompetitorLogo.setImageBitmap(bitmap2);
+            return true;
+        }
+        return z;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardWeatherForecast.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardWeatherForecast.java
new file mode 100644
index 000000000000..09e339d65647
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceCardWeatherForecast.java
@@ -0,0 +1,172 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.constraintlayout.widget.Constraints;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public class BcSmartspaceCardWeatherForecast extends BcSmartspaceCardSecondary {
+
+    public interface ItemUpdateFunction {
+        void update(View view, int i);
+    }
+
+    public BcSmartspaceCardWeatherForecast(Context context) {
+        super(context);
+    }
+
+    public BcSmartspaceCardWeatherForecast(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        updateFields((view, i2) -> {
+            ((TextView) view).setTextColor(i);
+        }, 4, R.id.temperature_value, "temperature value");
+        updateFields((view2, i22) -> {
+            ((TextView) view2).setTextColor(i);
+        }, 4, R.id.timestamp, "timestamp");
+    }
+
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        ConstraintLayout[] constraintLayoutArr = new ConstraintLayout[4];
+        for (int i = 0; i < 4; i++) {
+            ConstraintLayout constraintLayout3 = (ConstraintLayout) ViewGroup.inflate(getContext(), R.layout.smartspace_card_weather_forecast_column, null);
+            constraintLayout3.setId(View.generateViewId());
+            constraintLayoutArr[i] = constraintLayout3;
+        }
+        for (int i2 = 0; i2 < 4; i2++) {
+            Constraints.LayoutParams lp = new Constraints.LayoutParams(-2, 0);
+            ConstraintLayout constraintLayout = constraintLayoutArr[i2];
+            ConstraintLayout constraintLayout2 = null;
+            if (i2 > 0) {
+                constraintLayout2 = constraintLayoutArr[i2 - 1];
+            }
+            ConstraintLayout constraintLayout22 = null;
+            if (i2 < 3) {
+                constraintLayout22 = constraintLayoutArr[i2 + 1];
+            }
+            if (i2 == 0) {
+                lp.startToStart = 0;
+                lp.horizontalChainStyle = 1;
+            } else {
+                lp.startToEnd = constraintLayout2.getId();
+            }
+            if (i2 == 3) {
+                lp.endToEnd = 0;
+            } else {
+                lp.endToStart = constraintLayout22.getId();
+            }
+            lp.topToTop = 0;
+            lp.bottomToBottom = 0;
+            addView(constraintLayout, lp);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        Bundle extras;
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        if (baseAction == null) {
+            extras = null;
+        } else {
+            extras = baseAction.getExtras();
+        }
+        boolean z = false;
+        if (extras == null) {
+            return false;
+        }
+        if (extras.containsKey("temperatureValues")) {
+            String[] temperatureValues = extras.getStringArray("temperatureValues");
+            if (temperatureValues == null) {
+                Log.w("BcSmartspaceCardWeatherForecast", "Temperature values array is null.");
+            } else {
+                updateFields((view, i) -> {
+                    ((TextView) view).setText(temperatureValues[i]);
+                }, temperatureValues.length, R.id.temperature_value, "temperature value");
+            }
+            z = true;
+        }
+        if (extras.containsKey("weatherIcons")) {
+            Bitmap[] weatherIcons = (Bitmap[]) extras.get("weatherIcons");
+            if (weatherIcons == null) {
+                Log.w("BcSmartspaceCardWeatherForecast", "Weather icons array is null.");
+            } else {
+                updateFields((view2, i2) -> {
+                    ((ImageView) view2).setImageBitmap(weatherIcons[i2]);
+                }, weatherIcons.length, R.id.weather_icon, "weather icon");
+            }
+            z = true;
+        }
+        if (extras.containsKey("timestamps")) {
+            String[] timestamps = extras.getStringArray("timestamps");
+            if (timestamps == null) {
+                Log.w("BcSmartspaceCardWeatherForecast", "Timestamps array is null.");
+                return true;
+            }
+            updateFields((view3, i3) -> {
+                ((TextView) view3).setText(timestamps[i3]);
+            }, timestamps.length, R.id.timestamp, "timestamp");
+            return true;
+        }
+        return z;
+    }
+
+    public final void updateFields(ItemUpdateFunction itemUpdateFunction, int i, int i2, String str) {
+        int i3;
+        int i4;
+        if (getChildCount() < 4) {
+            Log.w("BcSmartspaceForecast", "Missing %d " + str + " view(s) to update." + (4 - getChildCount()));
+            return;
+        }
+        if (i < 4) {
+            int i5 = 4 - i;
+            Log.w("BcSmartspaceForecast", "Missing %d " + str + "(s). Hiding incomplete columns." + i5);
+            if (getChildCount() < 4) {
+                Log.w("BcSmartspaceForecast", "Missing %d columns to update." + (4 - getChildCount()));
+            } else {
+                int i6 = 3 - i5;
+                for (int i7 = 0; i7 < 4; i7++) {
+                    View childAt = getChildAt(i7);
+                    if (i7 <= i6) {
+                        i4 = 0;
+                    } else {
+                        i4 = 8;
+                    }
+                    int i42 = i4;
+                    BcSmartspaceTemplateDataUtils.updateVisibility(childAt, i42);
+                }
+                ConstraintLayout.LayoutParams layoutParams = (ConstraintLayout.LayoutParams) getChildAt(0).getLayoutParams();
+                if (i5 == 0) {
+                    i3 = 1;
+                } else {
+                    i3 = 0;
+                }
+                layoutParams.horizontalChainStyle = i3;
+            }
+        }
+        int min = Math.min(4, i);
+        for (int i8 = 0; i8 < min; i8++) {
+            View findViewById = getChildAt(i8).findViewById(i2);
+            if (findViewById == null) {
+                Log.w("BcSmartspaceForecast", "Missing " + str + " view to update at column: %d." + (i8 + 1));
+                return;
+            }
+            itemUpdateFunction.update(findViewById, i8);
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceDataProvider.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceDataProvider.java
new file mode 100644
index 000000000000..bbd13388b0d0
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceDataProvider.java
@@ -0,0 +1,91 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.SmartspaceTargetEvent;
+import android.os.Debug;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Objects;
+
+public final class BcSmartspaceDataProvider implements BcSmartspaceDataPlugin {
+    public static final boolean DEBUG = Log.isLoggable("BcSmartspaceDataPlugin", 3);
+    public final HashSet<BcSmartspaceDataPlugin.SmartspaceTargetListener> mSmartspaceTargetListeners = new HashSet<>();
+    public final ArrayList<SmartspaceTarget> mSmartspaceTargets = new ArrayList<>();
+    public HashSet<View> mViews = new HashSet<>();
+    public HashSet<View.OnAttachStateChangeListener> mAttachListeners = new HashSet<>();
+    public BcSmartspaceDataPlugin.SmartspaceEventNotifier mEventNotifier = null;
+    public View.OnAttachStateChangeListener mStateChangeListener = new View.OnAttachStateChangeListener() { // from class: com.google.android.systemui.smartspace.BcSmartspaceDataProvider.1
+        @Override // android.view.View.OnAttachStateChangeListener
+        public void onViewAttachedToWindow(View view) {
+            BcSmartspaceDataProvider.this.mViews.add(view);
+            BcSmartspaceDataProvider.this.mAttachListeners.forEach(listener -> {
+                listener.onViewAttachedToWindow(view);
+            });
+        }
+
+        @Override // android.view.View.OnAttachStateChangeListener
+        public void onViewDetachedFromWindow(View view) {
+            BcSmartspaceDataProvider.this.mViews.remove(view);
+            view.removeOnAttachStateChangeListener(this);
+            BcSmartspaceDataProvider.this.mAttachListeners.forEach(listener -> {
+                listener.onViewDetachedFromWindow(view);
+            });
+        }
+    };
+
+    public void registerListener(BcSmartspaceDataPlugin.SmartspaceTargetListener listener) {
+        this.mSmartspaceTargetListeners.add(listener);
+        listener.onSmartspaceTargetsUpdated(this.mSmartspaceTargets);
+    }
+
+    public void unregisterListener(BcSmartspaceDataPlugin.SmartspaceTargetListener listener) {
+        this.mSmartspaceTargetListeners.remove(listener);
+    }
+
+    public void registerSmartspaceEventNotifier(BcSmartspaceDataPlugin.SmartspaceEventNotifier notifier) {
+        this.mEventNotifier = notifier;
+    }
+
+    public void notifySmartspaceEvent(SmartspaceTargetEvent event) {
+        if (this.mEventNotifier != null) {
+            this.mEventNotifier.notifySmartspaceEvent(event);
+        }
+    }
+
+    public BcSmartspaceDataPlugin.SmartspaceView getView(ViewGroup parent) {
+        View inflate = LayoutInflater.from(parent.getContext()).inflate(R.layout.smartspace_enhanced, parent, false);
+        inflate.addOnAttachStateChangeListener(this.mStateChangeListener);
+        return (BcSmartspaceDataPlugin.SmartspaceView) inflate;
+    }
+
+    public void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) {
+        this.mAttachListeners.add(listener);
+        HashSet<View> hashSet = this.mViews;
+        Objects.requireNonNull(listener);
+        hashSet.forEach(v -> mStateChangeListener.onViewAttachedToWindow(v));
+    }
+
+    public void onTargetsAvailable(List<SmartspaceTarget> targets) {
+        if (DEBUG) {
+            Log.d("BcSmartspaceDataPlugin", this + " onTargetsAvailable called. Callers = " + Debug.getCallers(3));
+            Log.d("BcSmartspaceDataPlugin", "    targets.size() = " + targets.size());
+            Log.d("BcSmartspaceDataPlugin", "    targets = " + targets);
+        }
+        this.mSmartspaceTargets.clear();
+        for (SmartspaceTarget smartspaceTarget : targets) {
+            if (smartspaceTarget.getFeatureType() != 15) {
+                this.mSmartspaceTargets.add(smartspaceTarget);
+            }
+        }
+        this.mSmartspaceTargetListeners.forEach(listener -> {
+            listener.onSmartspaceTargetsUpdated(this.mSmartspaceTargets);
+        });
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceEvent.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceEvent.java
new file mode 100644
index 000000000000..c34181a79b9d
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceEvent.java
@@ -0,0 +1,22 @@
+package com.google.android.systemui.smartspace;
+
+public enum BcSmartspaceEvent implements EventEnum {
+    IGNORE(-1),
+    SMARTSPACE_CARD_RECEIVED(759),
+    SMARTSPACE_CARD_CLICK(760),
+    SMARTSPACE_CARD_DISMISS(761),
+    SMARTSPACE_CARD_SEEN(800),
+    ENABLED_SMARTSPACE(822),
+    DISABLED_SMARTSPACE(823);
+    
+    private final int mId;
+
+    BcSmartspaceEvent(int id) {
+        this.mId = id;
+    }
+
+    @Override // com.google.android.systemui.smartspace.EventEnum
+    public int getId() {
+        return this.mId;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceTemplateDataUtils.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceTemplateDataUtils.java
new file mode 100644
index 000000000000..f12f01bcd837
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceTemplateDataUtils.java
@@ -0,0 +1,91 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceUtils;
+import android.app.smartspace.uitemplatedata.Icon;
+import android.app.smartspace.uitemplatedata.Text;
+import android.util.Log;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.android.systemui.bcsmartspace.R;
+
+public final class BcSmartspaceTemplateDataUtils {
+    public static int getSecondaryCardRes(int i) {
+        switch (i) {
+            case 2:
+                return R.layout.smartspace_sub_image_template_card;
+            case 3:
+                return R.layout.smartspace_sub_list_template_card;
+            case 4:
+                return R.layout.smartspace_carousel_template_card;
+            case 5:
+                return R.layout.smartspace_head_to_head_template_card;
+            case 6:
+                return R.layout.smartspace_combined_cards_template_card;
+            case 7:
+                return R.layout.smartspace_sub_card_template_card;
+            default:
+                return 0;
+        }
+    }
+
+    public static void offsetImageViewForIcon(ImageView imageView, DoubleShadowIconDrawable doubleShadowIconDrawable) {
+        if (doubleShadowIconDrawable == null) {
+            imageView.setTranslationX(0.0f);
+            imageView.setTranslationY(0.0f);
+            return;
+        }
+        float f = -doubleShadowIconDrawable.mIconInsetSize;
+        imageView.setTranslationX(f);
+        imageView.setTranslationY(f);
+    }
+
+    public static void offsetTextViewForIcon(TextView textView, DoubleShadowIconDrawable doubleShadowIconDrawable, boolean z) {
+        int i;
+        if (doubleShadowIconDrawable == null) {
+            textView.setTranslationX(0.0f);
+            return;
+        }
+        if (z) {
+            i = 1;
+        } else {
+            i = -1;
+        }
+        textView.setTranslationX(i * doubleShadowIconDrawable.mIconInsetSize);
+    }
+
+    public static void setIcon(ImageView imageView, Icon icon) {
+        if (imageView == null) {
+            Log.w("BcSmartspaceTemplateDataUtils", "Cannot set. The image view is null");
+            return;
+        }
+        if (icon == null) {
+            Log.w("BcSmartspaceTemplateDataUtils", "Cannot set. The given icon is null");
+            updateVisibility(imageView, 8);
+        }
+        imageView.setImageIcon(icon.getIcon());
+        if (icon.getContentDescription() != null) {
+            imageView.setContentDescription(icon.getContentDescription());
+        }
+    }
+
+    public static void setText(TextView textView, Text text) {
+        if (textView == null) {
+            Log.w("BcSmartspaceTemplateDataUtils", "Cannot set. The text view is null");
+            return;
+        }
+        if (SmartspaceUtils.isEmpty(text)) {
+            Log.w("BcSmartspaceTemplateDataUtils", "Cannot set. The given text is empty");
+            updateVisibility(textView, 8);
+        }
+        textView.setText(text.getText());
+        textView.setEllipsize(text.getTruncateAtType());
+        textView.setMaxLines(text.getMaxLines());
+    }
+
+    public static void updateVisibility(View view, int i) {
+        if (view != null && view.getVisibility() != i) {
+            view.setVisibility(i);
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceView.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceView.java
new file mode 100644
index 000000000000..7b3d5e3c8ce4
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/BcSmartspaceView.java
@@ -0,0 +1,485 @@
+package com.google.android.systemui.smartspace;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.SmartspaceTargetEvent;
+import android.content.ComponentName;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.graphics.drawable.Drawable;
+import android.os.Debug;
+import android.os.Handler;
+import android.os.Parcelable;
+import android.provider.Settings;
+import android.text.TextUtils;
+import android.util.ArraySet;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.viewpager.widget.ViewPager;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.android.systemui.plugins.FalsingManager;
+import com.google.android.systemui.smartspace.CardPagerAdapter;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLogger;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggerUtil;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceSubcardLoggingInfo;
+import com.google.android.systemui.smartspace.uitemplate.BaseTemplateCard;
+import java.time.DateTimeException;
+import java.time.Instant;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class BcSmartspaceView extends FrameLayout implements BcSmartspaceDataPlugin.SmartspaceTargetListener, BcSmartspaceDataPlugin.SmartspaceView {
+    public static final String TAG = "BcSmartspaceView";
+    public static final boolean DEBUG = Log.isLoggable(TAG, 3);
+    public final CardPagerAdapter mAdapter;
+    public boolean mAnimateSmartspaceUpdate;
+    public final ContentObserver mAodObserver;
+    public int mCardPosition;
+    public BcSmartspaceDataPlugin mDataProvider;
+    public boolean mIsAodEnabled;
+    public ArraySet<String> mLastReceivedTargets;
+    public final ViewPager.OnPageChangeListener mOnPageChangeListener;
+    public PageIndicator mPageIndicator;
+    public List<? extends Parcelable> mPendingTargets;
+    public Animator mRunningAnimation;
+    public int mScrollState;
+    public ViewPager mViewPager;
+
+    public BcSmartspaceView(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mLastReceivedTargets = new ArraySet<>();
+        this.mIsAodEnabled = false;
+        this.mCardPosition = 0;
+        this.mAnimateSmartspaceUpdate = false;
+        this.mScrollState = 0;
+        this.mAodObserver = new ContentObserver(new Handler()) { // from class: com.google.android.systemui.smartspace.BcSmartspaceView.1
+            @Override // android.database.ContentObserver
+            public void onChange(boolean z) {
+                BcSmartspaceView.this.onSettingsChanged();
+            }
+        };
+        this.mAdapter = new CardPagerAdapter(this);
+        this.mOnPageChangeListener = new ViewPager.OnPageChangeListener() { // from class: com.google.android.systemui.smartspace.BcSmartspaceView.2
+            public void onPageScrollStateChanged(int state) {
+                List<? extends Parcelable> list;
+                BcSmartspaceView.this.mScrollState = state;
+                if (state == 0 && (list = BcSmartspaceView.this.mPendingTargets) != null) {
+                    BcSmartspaceView.this.onSmartspaceTargetsUpdated(list);
+                }
+            }
+
+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+                if (BcSmartspaceView.this.mPageIndicator != null) {
+                    BcSmartspaceView.this.mPageIndicator.setPageOffset(position, positionOffset);
+                }
+            }
+
+            public void onPageSelected(int position) {
+                SmartspaceTarget targetAtPosition = BcSmartspaceView.this.mAdapter.getTargetAtPosition(BcSmartspaceView.this.mCardPosition);
+                BcSmartspaceView.this.mCardPosition = position;
+                SmartspaceTarget targetAtPosition2 = BcSmartspaceView.this.mAdapter.getTargetAtPosition(position);
+                BcSmartspaceView.this.logSmartspaceEvent(targetAtPosition2, BcSmartspaceView.this.mCardPosition, BcSmartspaceEvent.SMARTSPACE_CARD_SEEN);
+                if (BcSmartspaceView.this.mDataProvider == null) {
+                    Log.w(BcSmartspaceView.TAG, "Cannot notify target hidden/shown smartspace events: data provider null");
+                    return;
+                }
+                if (targetAtPosition == null) {
+                    Log.w(BcSmartspaceView.TAG, "Cannot notify target hidden smartspace event: previous target is null.");
+                } else {
+                    SmartspaceTargetEvent.Builder builder = new SmartspaceTargetEvent.Builder(3);
+                    builder.setSmartspaceTarget(targetAtPosition);
+                    SmartspaceAction baseAction = targetAtPosition.getBaseAction();
+                    if (baseAction != null) {
+                        builder.setSmartspaceActionId(baseAction.getId());
+                    }
+                    BcSmartspaceView.this.mDataProvider.notifySmartspaceEvent(builder.build());
+                }
+                SmartspaceTargetEvent.Builder builder2 = new SmartspaceTargetEvent.Builder(2);
+                builder2.setSmartspaceTarget(targetAtPosition2);
+                SmartspaceAction baseAction2 = targetAtPosition2.getBaseAction();
+                if (baseAction2 != null) {
+                    builder2.setSmartspaceActionId(baseAction2.getId());
+                }
+                BcSmartspaceView.this.mDataProvider.notifySmartspaceEvent(builder2.build());
+            }
+        };
+    }
+
+    @Override // android.view.View
+    public void onVisibilityAggregated(boolean isVisible) {
+        super.onVisibilityAggregated(isVisible);
+        if (this.mDataProvider != null) {
+            this.mDataProvider.notifySmartspaceEvent(new SmartspaceTargetEvent.Builder(isVisible ? 6 : 7).build());
+        }
+    }
+
+    @Override // android.view.View
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        this.mViewPager = findViewById(R.id.smartspace_card_pager);
+        this.mPageIndicator = (PageIndicator) findViewById(R.id.smartspace_page_indicator);
+    }
+
+    @Override // android.view.ViewGroup, android.view.View
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        this.mViewPager.setAdapter(this.mAdapter);
+        this.mViewPager.addOnPageChangeListener(this.mOnPageChangeListener);
+        this.mPageIndicator.setNumPages(this.mAdapter.getCount());
+        try {
+            getContext().getContentResolver().registerContentObserver(Settings.Secure.getUriFor("doze_always_on"), false, this.mAodObserver, -1);
+            this.mIsAodEnabled = isAodEnabled(getContext());
+        } catch (Exception e) {
+            Log.w(TAG, "Unable to register Doze Always on content observer.", e);
+        }
+        if (this.mDataProvider != null) {
+            registerDataProvider(this.mDataProvider);
+        }
+    }
+
+    @Override // android.view.ViewGroup, android.view.View
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        getContext().getContentResolver().unregisterContentObserver(this.mAodObserver);
+        if (this.mDataProvider != null) {
+            this.mDataProvider.unregisterListener(this);
+        }
+    }
+
+    @Override // android.widget.FrameLayout, android.view.View
+    protected void onMeasure(int i, int i2) {
+        int size = View.MeasureSpec.getSize(i2);
+        int dimensionPixelSize = getContext().getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_height);
+        if (size > 0 && size < dimensionPixelSize) {
+            float f3 = size / dimensionPixelSize;
+            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.round(View.MeasureSpec.getSize(i) / f3), 1073741824), View.MeasureSpec.makeMeasureSpec(dimensionPixelSize, 1073741824));
+            setScaleX(f3);
+            setScaleY(f3);
+            setPivotX(0.0f);
+            setPivotY(dimensionPixelSize / 2.0f);
+            return;
+        }
+        super.onMeasure(i, i2);
+        setScaleX(1.0f);
+        setScaleY(1.0f);
+        resetPivot();
+    }
+
+    public void registerDataProvider(BcSmartspaceDataPlugin plugin) {
+        this.mDataProvider = plugin;
+        plugin.registerListener(this);
+        this.mAdapter.setDataProvider(this.mDataProvider);
+    }
+
+    public void onSmartspaceTargetsUpdated(List<? extends Parcelable> list) {
+        int i;
+        BaseTemplateCard baseTemplateCard;
+        BcSmartspaceCard bcSmartspaceCard;
+        if (DEBUG) {
+            Log.d(TAG, "@" + Integer.toHexString(hashCode()) + ", onTargetsAvailable called. Callers = " + Debug.getCallers(5));
+            Log.d(TAG, "    targets.size() = " + list.size());
+            Log.d(TAG, "    targets = " + list);
+        }
+        if (this.mScrollState != 0 && this.mAdapter.getCount() > 1) {
+            this.mPendingTargets = list;
+            return;
+        }
+        this.mPendingTargets = null;
+        boolean z = getLayoutDirection() == 1;
+        int i2 = this.mViewPager.getCurrentItem();
+        if (z) {
+            i = this.mAdapter.getCount() - i2;
+            ArrayList<? extends Parcelable> arrayList = new ArrayList<>(list);
+            Collections.reverse(arrayList);
+            list = arrayList;
+        } else {
+            i = i2;
+        }
+        CardPagerAdapter.ViewHolder viewHolder = this.mAdapter.mViewHolders.get(i2);
+        if (viewHolder == null) {
+            baseTemplateCard = null;
+        } else {
+            baseTemplateCard = viewHolder.mCard;
+        }
+        CardPagerAdapter.ViewHolder viewHolder2 = this.mAdapter.mViewHolders.get(i2);
+        if (viewHolder2 == null) {
+            bcSmartspaceCard = null;
+        } else {
+            bcSmartspaceCard = viewHolder2.mLegacyCard;
+        }
+        this.mAdapter.mAODTargets.clear();
+        this.mAdapter.mLockscreenTargets.clear();
+        this.mAdapter.mHasDifferentTargets = false;
+        this.mAdapter.mNextAlarmData.mHolidayAlarmsTarget = null;
+        list.forEach(obj -> {
+            int q;
+            SmartspaceTarget it = (SmartspaceTarget) obj;
+            if (it.getFeatureType() == 34) {
+                this.mAdapter.mNextAlarmData.mHolidayAlarmsTarget = it;
+                return;
+            }
+            if (it.getBaseAction() != null && it.getBaseAction().getExtras() != null) {
+                q = it.getBaseAction().getExtras().getInt("SCREEN_EXTRA", 3);
+            } else {
+                q = 3;
+            }
+            if ((q & 2) != 0) {
+                this.mAdapter.mAODTargets.add(it);
+            }
+            if ((q & 1) != 0) {
+                this.mAdapter.mLockscreenTargets.add(it);
+            }
+            if (q != 3) {
+                this.mAdapter.mHasDifferentTargets = true;
+            }
+        });
+        this.mAdapter.addDefaultDateCardIfEmpty(this.mAdapter.mAODTargets);
+        this.mAdapter.addDefaultDateCardIfEmpty(this.mAdapter.mLockscreenTargets);
+        this.mAdapter.updateTargetVisibility();
+        this.mAdapter.notifyDataSetChanged();
+        int count = this.mAdapter.getCount();
+        if (z) {
+            this.mViewPager.setCurrentItem(Math.max(0, Math.min(count - 1, count - i)), false);
+        }
+        if (this.mPageIndicator != null) {
+            this.mPageIndicator.setNumPages(count);
+        }
+        if (this.mAnimateSmartspaceUpdate) {
+            if (baseTemplateCard != null) {
+                animateSmartspaceUpdate(baseTemplateCard);
+            } else if (bcSmartspaceCard != null) {
+                animateSmartspaceUpdate(bcSmartspaceCard);
+            }
+        }
+        for (int i3 = 0; i3 < count; i3++) {
+            SmartspaceTarget targetAtPosition = this.mAdapter.getTargetAtPosition(i3);
+            if (!this.mLastReceivedTargets.contains(targetAtPosition.getSmartspaceTargetId())) {
+                logSmartspaceEvent(targetAtPosition, i3, BcSmartspaceEvent.SMARTSPACE_CARD_RECEIVED);
+                SmartspaceTargetEvent.Builder builder = new SmartspaceTargetEvent.Builder(8);
+                builder.setSmartspaceTarget(targetAtPosition);
+                SmartspaceAction baseAction = targetAtPosition.getBaseAction();
+                if (baseAction != null) {
+                    builder.setSmartspaceActionId(baseAction.getId());
+                }
+                this.mDataProvider.notifySmartspaceEvent(builder.build());
+            }
+        }
+        this.mLastReceivedTargets.clear();
+        this.mLastReceivedTargets.addAll((Collection) this.mAdapter.mSmartspaceTargets.stream().map((v0) -> {
+            return v0.getSmartspaceTargetId();
+        }).collect(Collectors.toList()));
+        this.mAdapter.notifyDataSetChanged();
+    }
+
+    public void logSmartspaceEvent(SmartspaceTarget smartspaceTarget, int rank, BcSmartspaceEvent bcSmartspaceEvent) {
+        int i2;
+        BcSmartspaceSubcardLoggingInfo createSubcardLoggingInfo;
+        if (bcSmartspaceEvent == BcSmartspaceEvent.SMARTSPACE_CARD_RECEIVED) {
+            try {
+                i2 = (int) Instant.now().minusMillis(smartspaceTarget.getCreationTimeMillis()).toEpochMilli();
+            } catch (ArithmeticException | DateTimeException e) {
+                Log.e(TAG, "received_latency_millis will be -1 due to exception ", e);
+                i2 = -1;
+            }
+        } else {
+            i2 = 0;
+        }
+        BcSmartspaceCardLoggingInfo.Builder builder = new BcSmartspaceCardLoggingInfo.Builder();
+        builder.mInstanceId = InstanceId.create(smartspaceTarget);
+        builder.mFeatureType = smartspaceTarget.getFeatureType();
+        String packageName = getContext().getPackageName();
+        CardPagerAdapter cardPagerAdapter = this.mAdapter;
+        builder.mDisplaySurface = BcSmartSpaceUtil.getLoggingDisplaySurface(packageName, cardPagerAdapter.mIsDreaming, cardPagerAdapter.mDozeAmount);
+        builder.mRank = rank;
+        builder.mCardinality = this.mAdapter.getCount();
+        builder.mReceivedLatency = i2;
+        builder.mUid = BcSmartspaceCardLoggerUtil.getUid(getContext().getPackageManager(), smartspaceTarget);
+        if (smartspaceTarget.getTemplateData() != null) {
+            createSubcardLoggingInfo = BcSmartspaceCardLoggerUtil.createSubcardLoggingInfo(smartspaceTarget.getTemplateData());
+        } else {
+            createSubcardLoggingInfo = BcSmartspaceCardLoggerUtil.createSubcardLoggingInfo(smartspaceTarget);
+        }
+        builder.mSubcardInfo = createSubcardLoggingInfo;
+        BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo = new BcSmartspaceCardLoggingInfo(builder);
+        if (smartspaceTarget.getTemplateData() != null) {
+            BcSmartspaceCardLoggerUtil.tryForcePrimaryFeatureType(bcSmartspaceCardLoggingInfo);
+        } else {
+            BcSmartspaceCardLoggerUtil.tryForcePrimaryFeatureTypeAndInjectWeatherSubcard(bcSmartspaceCardLoggingInfo, smartspaceTarget);
+        }
+        BcSmartspaceCardLogger.log(bcSmartspaceEvent, bcSmartspaceCardLoggingInfo);
+    }
+
+    public void animateSmartspaceUpdate(final ConstraintLayout constraintLayout) {
+        if (this.mRunningAnimation == null && constraintLayout.getParent() == null) {
+            final ViewGroup viewGroup = (ViewGroup) this.mViewPager.getParent();
+            constraintLayout.measure(View.MeasureSpec.makeMeasureSpec(this.mViewPager.getWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(this.mViewPager.getHeight(), 1073741824));
+            constraintLayout.layout(this.mViewPager.getLeft(), this.mViewPager.getTop(), this.mViewPager.getRight(), this.mViewPager.getBottom());
+            AnimatorSet animatorSet = new AnimatorSet();
+            float dimension = getContext().getResources().getDimension(R.dimen.enhanced_smartspace_dismiss_margin);
+            animatorSet.play(ObjectAnimator.ofFloat(constraintLayout, View.TRANSLATION_Y, 0.0f, (-getHeight()) - dimension));
+            animatorSet.play(ObjectAnimator.ofFloat(constraintLayout, View.ALPHA, 1.0f, 0.0f));
+            animatorSet.play(ObjectAnimator.ofFloat(this.mViewPager, View.TRANSLATION_Y, getHeight() + dimension, 0.0f));
+            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: com.google.android.systemui.smartspace.BcSmartspaceView.3
+                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
+                public void onAnimationEnd(Animator animator) {
+                    constraintLayout.setTranslationY(0.0f);
+                    constraintLayout.setAlpha(1.0f);
+                    viewGroup.getOverlay().remove((View) constraintLayout);
+                    BcSmartspaceView bcSmartspaceView = BcSmartspaceView.this;
+                    bcSmartspaceView.mRunningAnimation = null;
+                    bcSmartspaceView.mAnimateSmartspaceUpdate = false;
+                }
+
+                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
+                public void onAnimationStart(Animator animator) {
+                    viewGroup.getOverlay().add((View) constraintLayout);
+                }
+            });
+            this.mRunningAnimation = animatorSet;
+            animatorSet.start();
+        }
+    }
+
+    public final int getCurrentCardTopPadding() {
+        BcSmartspaceCard bcSmartspaceCard;
+        BaseTemplateCard baseTemplateCard;
+        CardPagerAdapter.ViewHolder viewHolder = this.mAdapter.mViewHolders.get(this.mViewPager.getCurrentItem());
+        ViewGroup viewGroup = null;
+        if (viewHolder == null) {
+            bcSmartspaceCard = null;
+        } else {
+            bcSmartspaceCard = viewHolder.mLegacyCard;
+        }
+        if (bcSmartspaceCard != null) {
+            CardPagerAdapter.ViewHolder viewHolder2 = this.mAdapter.mViewHolders.get(this.mViewPager.getCurrentItem());
+            if (viewHolder2 != null) {
+                viewGroup = viewHolder2.mLegacyCard;
+            }
+            return viewGroup.getPaddingTop();
+        }
+        CardPagerAdapter.ViewHolder viewHolder3 = this.mAdapter.mViewHolders.get(this.mViewPager.getCurrentItem());
+        if (viewHolder3 == null) {
+            baseTemplateCard = null;
+        } else {
+            baseTemplateCard = viewHolder3.mCard;
+        }
+        if (baseTemplateCard != null) {
+            CardPagerAdapter.ViewHolder viewHolder4 = this.mAdapter.mViewHolders.get(this.mViewPager.getCurrentItem());
+            if (viewHolder4 != null) {
+                viewGroup = viewHolder4.mCard;
+            }
+            return viewGroup.getPaddingTop();
+        }
+        return 0;
+    }
+
+    public int getSelectedPage() {
+        return this.mViewPager.getCurrentItem();
+    }
+
+    public void setSelectedPage(int i) {
+        this.mViewPager.setCurrentItem(i, false);
+        this.mPageIndicator.setPageOffset(i, 0.0f);
+    }
+
+    public void setPrimaryTextColor(int i) {
+        this.mAdapter.setPrimaryTextColor(i);
+        this.mPageIndicator.setPrimaryColor(i);
+    }
+
+    public void setDozeAmount(float f) {
+        this.mPageIndicator.setAlpha(1.0f - f);
+        ArrayList<SmartspaceTarget> arrayList = this.mAdapter.mSmartspaceTargets;
+        this.mAdapter.setDozeAmount(f);
+        CardPagerAdapter cardPagerAdapter2 = this.mAdapter;
+        if (cardPagerAdapter2.mHasDifferentTargets && cardPagerAdapter2.mSmartspaceTargets != arrayList && cardPagerAdapter2.getCount() > 0) {
+            this.mViewPager.setCurrentItem(0, false);
+            this.mPageIndicator.setPageOffset(0, 0.0f);
+        }
+        this.mPageIndicator.setNumPages(this.mAdapter.getCount());
+        String packageName = getContext().getPackageName();
+        CardPagerAdapter cardPagerAdapter3 = this.mAdapter;
+        int loggingDisplaySurface = BcSmartSpaceUtil.getLoggingDisplaySurface(packageName, cardPagerAdapter3.mIsDreaming, cardPagerAdapter3.mDozeAmount);
+        if (loggingDisplaySurface == -1) {
+            return;
+        }
+        if (loggingDisplaySurface == 3 && !this.mIsAodEnabled) {
+            return;
+        }
+        if (DEBUG) {
+            Log.d(TAG, "@" + Integer.toHexString(hashCode()) + ", setDozeAmount: Logging SMARTSPACE_CARD_SEEN, currentSurface = " + loggingDisplaySurface);
+        }
+        BcSmartspaceEvent bcSmartspaceEvent = BcSmartspaceEvent.SMARTSPACE_CARD_SEEN;
+        SmartspaceTarget targetAtPosition = this.mAdapter.getTargetAtPosition(this.mCardPosition);
+        if (targetAtPosition == null) {
+            Log.w(TAG, "Current card is not present in the Adapter; cannot log.");
+        } else {
+            logSmartspaceEvent(targetAtPosition, this.mCardPosition, bcSmartspaceEvent);
+        }
+        if (this.mAdapter.mNextAlarmData.mImage != null) {
+            logSmartspaceEvent(new SmartspaceTarget.Builder("upcoming_alarm_card_94510_12684", new ComponentName(getContext(), getClass()), getContext().getUser()).setFeatureType(23).build(), 0, bcSmartspaceEvent);
+            if (!TextUtils.isEmpty(this.mAdapter.mNextAlarmData.getHolidayAlarmText(null))) {
+                logSmartspaceEvent(this.mAdapter.mNextAlarmData.mHolidayAlarmsTarget, 0, bcSmartspaceEvent);
+            }
+        }
+    }
+
+    public void setIsDreaming(boolean isDreaming) {
+        this.mAdapter.mIsDreaming = isDreaming;
+    }
+
+    public void setUiSurface(String uiSurface) {
+        this.mAdapter.mUiSurface = uiSurface;
+    }
+
+    public void setKeyguardBypassEnabled(boolean isEnabled) {
+        this.mAdapter.mKeyguardBypassEnabled = isEnabled;
+        this.mAdapter.updateTargetVisibility();
+    }
+
+    public void setDnd(Drawable drawable, String str) {
+        this.mAdapter.setDnd(drawable, str);
+    }
+
+    public void setNextAlarm(Drawable drawable, String str) {
+        this.mAdapter.setNextAlarm(drawable, str);
+    }
+
+    public void setMediaTarget(SmartspaceTarget smartspaceTarget) {
+        this.mAdapter.setMediaTarget(smartspaceTarget);
+    }
+
+    @Override // android.view.View
+    public void setOnLongClickListener(View.OnLongClickListener onLongClickListener) {
+        this.mViewPager.setOnLongClickListener(onLongClickListener);
+    }
+
+    private void onSettingsChanged() {
+        this.mIsAodEnabled = isAodEnabled(getContext());
+    }
+
+    private static boolean isAodEnabled(Context context) {
+        return Settings.Secure.getIntForUser(context.getContentResolver(), "doze_always_on", 0, context.getUserId()) == 1;
+    }
+
+    public void setFalsingManager(FalsingManager falsingManager) {
+        BcSmartSpaceUtil.sFalsingManager = falsingManager;
+    }
+
+    public void setIntentStarter(BcSmartspaceDataPlugin.IntentStarter intentStarter) {
+        BcSmartSpaceUtil.sIntentStarter = intentStarter;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/CardPagerAdapter.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/CardPagerAdapter.java
new file mode 100644
index 000000000000..80d956996e2e
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/CardPagerAdapter.java
@@ -0,0 +1,812 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.SmartspaceUtils;
+import android.app.smartspace.uitemplatedata.BaseTemplateData;
+import android.app.smartspace.uitemplatedata.TapAction;
+import android.content.ComponentName;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.Log;
+import android.util.SparseArray;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.viewpager.widget.PagerAdapter;
+import com.android.internal.graphics.ColorUtils;
+import com.android.launcher3.icons.GraphicsUtils;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggerUtil;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceSubcardLoggingInfo;
+import com.google.android.systemui.smartspace.uitemplate.BaseTemplateCard;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.UUID;
+import java.util.function.IntPredicate;
+import java.util.stream.IntStream;
+
+public class CardPagerAdapter extends PagerAdapter {
+    public static final int MAX_FEATURE_TYPE = 41;
+    public static final int MIN_FEATURE_TYPE = -2;
+    public final View mRoot;
+    public BcSmartspaceDataPlugin mDataProvider;
+    public int mCurrentTextColor;
+    public int mPrimaryTextColor;
+    public ArrayList<SmartspaceTarget> mSmartspaceTargets = new ArrayList<>();
+    public ArrayList<SmartspaceTarget> mAODTargets = new ArrayList<>();
+    public ArrayList<SmartspaceTarget> mLockscreenTargets = new ArrayList<>();
+    public final ArrayList<SmartspaceTarget> mMediaTargets = new ArrayList<>();
+    public final SparseArray<ViewHolder> mViewHolders = new SparseArray<>();
+    public final LazyServerFlagLoader mEnableCardRecycling = new LazyServerFlagLoader("enable_card_recycling");
+    public final LazyServerFlagLoader mEnableReducedCardRecycling = new LazyServerFlagLoader("enable_reduced_card_recycling");
+    public final SparseArray<BaseTemplateCard> mRecycledCards = new SparseArray<>();
+    public final SparseArray<BcSmartspaceCard> mRecycledLegacyCards = new SparseArray<>();
+    public BcNextAlarmData mNextAlarmData = new BcNextAlarmData();
+    public boolean mIsDreaming = false;
+    public String mUiSurface = null;
+    public float mDozeAmount = 0.0f;
+    public float mLastDozeAmount = 0.0f;
+    public int mDozeColor = -1;
+    public String mDndDescription = null;
+    public Drawable mDndImage = null;
+    public boolean mKeyguardBypassEnabled = false;
+    public boolean mHasDifferentTargets = false;
+
+    List<SmartspaceTarget> getTargets() {
+        return this.mSmartspaceTargets;
+    }
+
+    public CardPagerAdapter(View view) {
+        this.mRoot = view;
+        int attrColor = GraphicsUtils.getAttrColor(view.getContext(), 16842806);
+        this.mPrimaryTextColor = attrColor;
+        this.mCurrentTextColor = attrColor;
+    }
+
+    public static int getBaseLegacyCardRes(int layout) {
+        return layout != 1 ? R.layout.smartspace_card : R.layout.smartspace_card_date;
+    }
+
+    public static int getLegacySecondaryCardRes(int layout) {
+        if (layout != -2) {
+            if (layout == -1) {
+                return R.layout.smartspace_card_combination;
+            }
+            if (layout == 3) {
+                return R.layout.smartspace_card_generic_landscape_image;
+            }
+            if (layout == 4) {
+                return R.layout.smartspace_card_flight;
+            }
+            if (layout == 9) {
+                return R.layout.smartspace_card_sports;
+            }
+            if (layout == 10) {
+                return R.layout.smartspace_card_weather_forecast;
+            }
+            if (layout == 13) {
+                return R.layout.smartspace_card_shopping_list;
+            }
+            if (layout == 14) {
+                return R.layout.smartspace_card_loyalty;
+            }
+            if (layout == 18) {
+                return R.layout.smartspace_card_generic_landscape_image;
+            }
+            if (layout != 20 && layout != 30) {
+                return 0;
+            }
+            return R.layout.smartspace_card_doorbell;
+        }
+        return R.layout.smartspace_card_combination_at_store;
+    }
+
+    public static boolean useRecycledViewForAction(SmartspaceAction smartspaceAction, SmartspaceAction smartspaceAction2) {
+        if (smartspaceAction == null && smartspaceAction2 == null) {
+            return true;
+        }
+        if (smartspaceAction != null && smartspaceAction2 != null) {
+            Bundle extras = smartspaceAction.getExtras();
+            Bundle extras2 = smartspaceAction2.getExtras();
+            if (extras == null && extras2 == null) {
+                return true;
+            }
+            Bundle extras3 = smartspaceAction.getExtras();
+            Bundle extras4 = smartspaceAction2.getExtras();
+            return (extras3 == null || extras4 == null || !smartspaceAction.getExtras().keySet().equals(smartspaceAction2.getExtras().keySet())) ? false : true;
+        }
+        return false;
+    }
+
+    public static boolean useRecycledViewForActionsList(final List<SmartspaceAction> list, final List<SmartspaceAction> list2) {
+        if (list == null && list2 == null) {
+            return true;
+        }
+        return list != null && list2 != null && list.size() == list2.size() && IntStream.range(0, list.size()).allMatch(new IntPredicate() { // from class: com.google.android.systemui.smartspace.CardPagerAdapter.1
+            @Override // java.util.function.IntPredicate
+            public boolean test(int i) {
+                return CardPagerAdapter.useRecycledViewForAction((SmartspaceAction) list.get(i), (SmartspaceAction) list2.get(i));
+            }
+        });
+    }
+
+    public static boolean useRecycledViewForNewTarget(SmartspaceTarget smartspaceTarget, SmartspaceTarget smartspaceTarget2) {
+        if (smartspaceTarget2 == null || !smartspaceTarget.getSmartspaceTargetId().equals(smartspaceTarget2.getSmartspaceTargetId()) || !useRecycledViewForAction(smartspaceTarget.getHeaderAction(), smartspaceTarget2.getHeaderAction()) || !useRecycledViewForAction(smartspaceTarget.getBaseAction(), smartspaceTarget2.getBaseAction()) || !useRecycledViewForActionsList(smartspaceTarget.getActionChips(), smartspaceTarget2.getActionChips()) || !useRecycledViewForActionsList(smartspaceTarget.getIconGrid(), smartspaceTarget2.getIconGrid())) {
+            return false;
+        }
+        BaseTemplateData templateData = smartspaceTarget.getTemplateData();
+        BaseTemplateData templateData2 = smartspaceTarget2.getTemplateData();
+        return (templateData == null || templateData2 == null || !templateData.equals(templateData2)) ? false : true;
+    }
+
+    public void refreshCards() {
+        for (int i = 0; i < this.mViewHolders.size(); i++) {
+            SparseArray<ViewHolder> sparseArray = this.mViewHolders;
+            ViewHolder viewHolder = sparseArray.get(sparseArray.keyAt(i));
+            if (viewHolder != null) {
+                onBindViewHolder(viewHolder);
+            }
+        }
+    }
+
+    @Override
+    public void destroyItem(ViewGroup viewGroup, int position, Object obj) {
+        ViewHolder viewHolder = (ViewHolder) obj;
+        if (viewHolder == null) {
+            return;
+        }
+        BcSmartspaceCard bcSmartspaceCard = viewHolder.mLegacyCard;
+        if (bcSmartspaceCard != null) {
+            SmartspaceTarget smartspaceTarget = bcSmartspaceCard.mTarget;
+            if (smartspaceTarget != null && this.mEnableCardRecycling.get()) {
+                this.mRecycledLegacyCards.put(getFeatureType(smartspaceTarget), bcSmartspaceCard);
+            }
+            viewGroup.removeView(bcSmartspaceCard);
+        }
+        BaseTemplateCard baseTemplateCard = viewHolder.mCard;
+        if (baseTemplateCard != null) {
+            if (baseTemplateCard.mTarget != null && this.mEnableCardRecycling.get()) {
+                this.mRecycledCards.put(baseTemplateCard.mTarget.getFeatureType(), baseTemplateCard);
+            }
+            viewGroup.removeView(viewHolder.mCard);
+        }
+        if (this.mViewHolders.get(position) == viewHolder) {
+            this.mViewHolders.remove(position);
+        }
+    }
+
+    @Override
+    public int getCount() {
+        return this.mSmartspaceTargets.size();
+    }
+
+    @Override
+    public int getItemPosition(Object obj) {
+        ViewHolder viewHolder = (ViewHolder) obj;
+        SmartspaceTarget targetAtPosition = getTargetAtPosition(viewHolder.mPosition);
+        if (viewHolder.mTarget == targetAtPosition) {
+            return -1;
+        }
+        if (targetAtPosition != null && getFeatureType(targetAtPosition) == getFeatureType(viewHolder.mTarget) && Objects.equals(targetAtPosition.getSmartspaceTargetId(), viewHolder.mTarget.getSmartspaceTargetId())) {
+            viewHolder.mTarget = targetAtPosition;
+            onBindViewHolder(viewHolder);
+            return -1;
+        }
+        return -2;
+    }
+
+    public SmartspaceTarget getTargetAtPosition(int position) {
+        if (!this.mSmartspaceTargets.isEmpty() && position >= 0 && position < this.mSmartspaceTargets.size()) {
+            return this.mSmartspaceTargets.get(position);
+        }
+        return null;
+    }
+
+    @Override // androidx.viewpager.widget.PagerAdapter
+    public final Object instantiateItem(ViewGroup viewGroup, int i) {
+        BcSmartspaceCard bcSmartspaceCard;
+        ViewHolder viewHolder;
+        BaseTemplateCard baseTemplateCard;
+        BaseTemplateData.SubItemInfo subItemInfo;
+        int i2;
+        int secondaryCardRes;
+        SmartspaceTarget smartspaceTarget = (SmartspaceTarget) this.mSmartspaceTargets.get(i);
+        if (smartspaceTarget.getTemplateData() != null) {
+            Log.i("SsCardPagerAdapter", "Use UI template for the feature: " + smartspaceTarget.getFeatureType());
+            if (this.mEnableCardRecycling.get()) {
+                baseTemplateCard = (BaseTemplateCard) this.mRecycledCards.removeReturnOld(smartspaceTarget.getFeatureType());
+            } else {
+                baseTemplateCard = null;
+            }
+            if (baseTemplateCard == null || (this.mEnableReducedCardRecycling.get() && !useRecycledViewForNewTarget(smartspaceTarget, baseTemplateCard.mTarget))) {
+                BaseTemplateData templateData = smartspaceTarget.getTemplateData();
+                if (templateData != null) {
+                    subItemInfo = templateData.getPrimaryItem();
+                } else {
+                    subItemInfo = null;
+                }
+                if (subItemInfo != null && (!SmartspaceUtils.isEmpty(subItemInfo.getText()) || subItemInfo.getIcon() != null)) {
+                    i2 = R.layout.smartspace_base_template_card;
+                } else {
+                    i2 = R.layout.smartspace_base_template_card_with_date;
+                }
+                LayoutInflater from = LayoutInflater.from(viewGroup.getContext());
+                BaseTemplateCard baseTemplateCard2 = (BaseTemplateCard) from.inflate(i2, viewGroup, false);
+                if (templateData != null && (secondaryCardRes = BcSmartspaceTemplateDataUtils.getSecondaryCardRes(templateData.getTemplateType())) != 0) {
+                    BcSmartspaceCardSecondary bcSmartspaceCardSecondary = (BcSmartspaceCardSecondary) from.inflate(secondaryCardRes, (ViewGroup) baseTemplateCard2, false);
+                    if (bcSmartspaceCardSecondary != null) {
+                        Log.i("SsCardPagerAdapter", "Secondary card is found");
+                    }
+                    ViewGroup viewGroup2 = baseTemplateCard2.mSecondaryCardPane;
+                    if (viewGroup2 != null) {
+                        baseTemplateCard2.mSecondaryCard = bcSmartspaceCardSecondary;
+                        BcSmartspaceTemplateDataUtils.updateVisibility(viewGroup2, 8);
+                        baseTemplateCard2.mSecondaryCardPane.removeAllViews();
+                        if (bcSmartspaceCardSecondary != null) {
+                            ConstraintLayout.LayoutParams layoutParams = new ConstraintLayout.LayoutParams(-2, baseTemplateCard2.getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_card_height));
+                            layoutParams.setMarginStart(baseTemplateCard2.getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_secondary_card_start_margin));
+                            layoutParams.startToStart = 0;
+                            layoutParams.topToTop = 0;
+                            layoutParams.bottomToBottom = 0;
+                            baseTemplateCard2.mSecondaryCardPane.addView(bcSmartspaceCardSecondary, layoutParams);
+                        }
+                    }
+                }
+                baseTemplateCard = baseTemplateCard2;
+            }
+            viewHolder = new ViewHolder(i, null, smartspaceTarget, baseTemplateCard);
+            viewGroup.addView(baseTemplateCard);
+        } else {
+            if (this.mEnableCardRecycling.get()) {
+                bcSmartspaceCard = (BcSmartspaceCard) this.mRecycledLegacyCards.removeReturnOld(getFeatureType(smartspaceTarget));
+            } else {
+                bcSmartspaceCard = null;
+            }
+            if (bcSmartspaceCard == null || (this.mEnableReducedCardRecycling.get() && !useRecycledViewForNewTarget(smartspaceTarget, bcSmartspaceCard.mTarget))) {
+                int featureType = getFeatureType(smartspaceTarget);
+                LayoutInflater from2 = LayoutInflater.from(viewGroup.getContext());
+                BcSmartspaceCard bcSmartspaceCard2 = (BcSmartspaceCard) from2.inflate(getBaseLegacyCardRes(featureType), viewGroup, false);
+                int legacySecondaryCardRes = getLegacySecondaryCardRes(featureType);
+                if (legacySecondaryCardRes != 0) {
+                    BcSmartspaceCardSecondary bcSmartspaceCardSecondary2 = (BcSmartspaceCardSecondary) from2.inflate(legacySecondaryCardRes, (ViewGroup) bcSmartspaceCard2, false);
+                    ViewGroup viewGroup3 = bcSmartspaceCard2.mSecondaryCardGroup;
+                    if (viewGroup3 != null) {
+                        bcSmartspaceCard2.mSecondaryCard = bcSmartspaceCardSecondary2;
+                        BcSmartspaceTemplateDataUtils.updateVisibility(viewGroup3, 8);
+                        bcSmartspaceCard2.mSecondaryCardGroup.removeAllViews();
+                        if (bcSmartspaceCardSecondary2 != null) {
+                            ConstraintLayout.LayoutParams layoutParams2 = new ConstraintLayout.LayoutParams(-2, bcSmartspaceCard2.getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_card_height));
+                            layoutParams2.setMarginStart(bcSmartspaceCard2.getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_secondary_card_start_margin));
+                            layoutParams2.startToStart = 0;
+                            layoutParams2.topToTop = 0;
+                            layoutParams2.bottomToBottom = 0;
+                            bcSmartspaceCard2.mSecondaryCardGroup.addView(bcSmartspaceCardSecondary2, layoutParams2);
+                        }
+                    }
+                }
+                bcSmartspaceCard = bcSmartspaceCard2;
+            }
+            viewHolder = new ViewHolder(i, bcSmartspaceCard, smartspaceTarget, null);
+            viewGroup.addView(bcSmartspaceCard);
+        }
+        onBindViewHolder(viewHolder);
+        this.mViewHolders.put(i, viewHolder);
+        return viewHolder;
+    }
+
+    public boolean isViewFromObject(View view, Object obj) {
+        ViewHolder viewHolder = (ViewHolder) obj;
+        return view == viewHolder.mLegacyCard || view == viewHolder.mCard;
+    }
+
+    public void onBindViewHolder(ViewHolder viewHolder) {
+        BcSmartspaceSubcardLoggingInfo createSubcardLoggingInfo;
+        BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier;
+        TapAction tapAction;
+        BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo;
+        int i;
+        String uuid;
+        Drawable drawable;
+        int i2;
+        int i3;
+        int i4;
+        BcSmartspaceDataPlugin.SmartspaceEventNotifier eventNotifier;
+        String uuid2;
+        BcNextAlarmData bcNextAlarmData;
+        int i5;
+        int i6;
+        String str;
+        DoubleShadowIconDrawable doubleShadowIconDrawable;
+        int i7;
+        TapAction tapAction2;
+        int i8;
+        SmartspaceTarget smartspaceTarget = this.mSmartspaceTargets.get(viewHolder.mPosition);
+        BcSmartspaceCardLoggingInfo.Builder builder = new BcSmartspaceCardLoggingInfo.Builder();
+        builder.mInstanceId = InstanceId.create(smartspaceTarget);
+        builder.mFeatureType = smartspaceTarget.getFeatureType();
+        builder.mDisplaySurface = BcSmartSpaceUtil.getLoggingDisplaySurface(this.mRoot.getContext().getPackageName(), this.mIsDreaming, this.mDozeAmount);
+        builder.mRank = viewHolder.mPosition;
+        builder.mCardinality = this.mSmartspaceTargets.size();
+        builder.mUid = BcSmartspaceCardLoggerUtil.getUid(this.mRoot.getContext().getPackageManager(), smartspaceTarget);
+        if (smartspaceTarget.getTemplateData() != null) {
+            createSubcardLoggingInfo = BcSmartspaceCardLoggerUtil.createSubcardLoggingInfo(smartspaceTarget.getTemplateData());
+        } else {
+            createSubcardLoggingInfo = BcSmartspaceCardLoggerUtil.createSubcardLoggingInfo(smartspaceTarget);
+        }
+        builder.mSubcardInfo = createSubcardLoggingInfo;
+        BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo2 = new BcSmartspaceCardLoggingInfo(builder);
+        if (smartspaceTarget.getTemplateData() != null) {
+            BcSmartspaceCardLoggerUtil.tryForcePrimaryFeatureType(bcSmartspaceCardLoggingInfo2);
+            BaseTemplateCard baseTemplateCard = viewHolder.mCard;
+            if (baseTemplateCard == null) {
+                Log.w("SsCardPagerAdapter", "No ui-template card view can be binded");
+                return;
+            }
+            baseTemplateCard.mIsDreaming = this.mIsDreaming;
+            baseTemplateCard.mUiSurface = this.mUiSurface;
+            if (this.mDataProvider == null) {
+                eventNotifier = null;
+            } else {
+                eventNotifier = smartspaceTargetEvent -> {
+                    this.mDataProvider.notifySmartspaceEvent(smartspaceTargetEvent);
+                };
+            }
+            BcNextAlarmData bcNextAlarmData2 = this.mNextAlarmData;
+            if (!smartspaceTarget.getSmartspaceTargetId().equals(baseTemplateCard.mPrevSmartspaceTargetId)) {
+                baseTemplateCard.mTarget = null;
+                baseTemplateCard.mTemplateData = null;
+                baseTemplateCard.mFeatureType = 0;
+                baseTemplateCard.mLoggingInfo = null;
+                baseTemplateCard.setOnClickListener(null);
+                baseTemplateCard.resetTextView(baseTemplateCard.mTitleTextView);
+                baseTemplateCard.resetTextView(baseTemplateCard.mSubtitleTextView);
+                baseTemplateCard.resetTextView(baseTemplateCard.mSubtitleSupplementalView);
+                baseTemplateCard.resetTextView(baseTemplateCard.mSupplementalLineTextView);
+                baseTemplateCard.resetTextView(baseTemplateCard.mNextAlarmTextView);
+                ImageView imageView = baseTemplateCard.mNextAlarmImageView;
+                if (imageView != null) {
+                    imageView.setImageDrawable(null);
+                }
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mTitleTextView, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mSubtitleTextView, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mSubtitleSupplementalView, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mSecondaryCardPane, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mDndImageView, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mNextAlarmImageView, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mNextAlarmTextView, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mExtrasGroup, 4);
+            }
+            baseTemplateCard.mPrevSmartspaceTargetId = smartspaceTarget.getSmartspaceTargetId();
+            baseTemplateCard.mTarget = smartspaceTarget;
+            baseTemplateCard.mTemplateData = smartspaceTarget.getTemplateData();
+            baseTemplateCard.mFeatureType = smartspaceTarget.getFeatureType();
+            baseTemplateCard.mLoggingInfo = bcSmartspaceCardLoggingInfo2;
+            baseTemplateCard.mShouldShowPageIndicator = this.mSmartspaceTargets.size() > 1;
+            baseTemplateCard.mValidSecondaryCard = false;
+            ViewGroup viewGroup = baseTemplateCard.mTextGroup;
+            if (viewGroup != null) {
+                viewGroup.setTranslationX(0.0f);
+            }
+            if (baseTemplateCard.mTemplateData == null) {
+                doubleShadowIconDrawable = null;
+                i6 = 8;
+            } else {
+                BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo3 = baseTemplateCard.mLoggingInfo;
+                if (bcSmartspaceCardLoggingInfo3 == null) {
+                    BcSmartspaceCardLoggingInfo.Builder builder2 = new BcSmartspaceCardLoggingInfo.Builder();
+                    builder2.mDisplaySurface = BcSmartSpaceUtil.getLoggingDisplaySurface(baseTemplateCard.getContext().getPackageName(), baseTemplateCard.mIsDreaming, baseTemplateCard.mDozeAmount);
+                    builder2.mFeatureType = baseTemplateCard.mFeatureType;
+                    builder2.mUid = BcSmartspaceCardLoggerUtil.getUid(baseTemplateCard.getContext().getPackageManager(), baseTemplateCard.mTarget);
+                    bcSmartspaceCardLoggingInfo3 = new BcSmartspaceCardLoggingInfo(builder2);
+                }
+                baseTemplateCard.mLoggingInfo = bcSmartspaceCardLoggingInfo3;
+                if (baseTemplateCard.mSecondaryCard != null) {
+                    Log.i("SsBaseTemplateCard", "Secondary card is not null");
+                    BcSmartspaceCardSecondary bcSmartspaceCardSecondary = baseTemplateCard.mSecondaryCard;
+                    String smartspaceTargetId = smartspaceTarget.getSmartspaceTargetId();
+                    if (!bcSmartspaceCardSecondary.mPrevSmartspaceTargetId.equals(smartspaceTargetId)) {
+                        bcSmartspaceCardSecondary.mPrevSmartspaceTargetId = smartspaceTargetId;
+                        bcSmartspaceCardSecondary.resetUi();
+                    }
+                    baseTemplateCard.mValidSecondaryCard = baseTemplateCard.mSecondaryCard.setSmartspaceActions(smartspaceTarget, eventNotifier, baseTemplateCard.mLoggingInfo);
+                }
+                ViewGroup viewGroup2 = baseTemplateCard.mSecondaryCardPane;
+                if (viewGroup2 != null) {
+                    if (baseTemplateCard.mDozeAmount != 1.0f && baseTemplateCard.mValidSecondaryCard) {
+                        i8 = 0;
+                    } else {
+                        i8 = 8;
+                    }
+                    BcSmartspaceTemplateDataUtils.updateVisibility(viewGroup2, i8);
+                }
+                BaseTemplateData.SubItemInfo primaryItem = baseTemplateCard.mTemplateData.getPrimaryItem();
+                if (baseTemplateCard.mDateView == null) {
+                    bcNextAlarmData = bcNextAlarmData2;
+                    i5 = 8;
+                } else {
+                    if (primaryItem != null && primaryItem.getTapAction() != null) {
+                        uuid2 = primaryItem.getTapAction().getId().toString();
+                    } else {
+                        uuid2 = UUID.randomUUID().toString();
+                    }
+                    TapAction build = new TapAction.Builder(uuid2).setIntent(BcSmartSpaceUtil.getOpenCalendarIntent()).build();
+                    bcNextAlarmData = bcNextAlarmData2;
+                    i5 = 8;
+                    BcSmartSpaceUtil.setOnClickListener(baseTemplateCard.mDateView, baseTemplateCard.mTarget, build, eventNotifier, "SsBaseTemplateCard", bcSmartspaceCardLoggingInfo2, 0);
+                }
+                baseTemplateCard.setUpTextView(baseTemplateCard.mTitleTextView, baseTemplateCard.mTemplateData.getPrimaryItem(), eventNotifier);
+                baseTemplateCard.setUpTextView(baseTemplateCard.mSubtitleTextView, baseTemplateCard.mTemplateData.getSubtitleItem(), eventNotifier);
+                baseTemplateCard.setUpTextView(baseTemplateCard.mSubtitleSupplementalView, baseTemplateCard.mTemplateData.getSubtitleSupplementalItem(), eventNotifier);
+                BaseTemplateData.SubItemInfo supplementalAlarmItem = baseTemplateCard.mTemplateData.getSupplementalAlarmItem();
+                ImageView imageView2 = baseTemplateCard.mNextAlarmImageView;
+                if (imageView2 != null && baseTemplateCard.mNextAlarmTextView != null) {
+                    if (bcNextAlarmData.mImage == null) {
+                        BcSmartspaceTemplateDataUtils.updateVisibility(imageView2, i5);
+                        BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mNextAlarmTextView, i5);
+                        BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(baseTemplateCard.mNextAlarmImageView, null);
+                    } else {
+                        DoubleShadowIconDrawable doubleShadowIconDrawable2 = new DoubleShadowIconDrawable(baseTemplateCard.getContext());
+                        doubleShadowIconDrawable2.setIcon(bcNextAlarmData.mImage);
+                        baseTemplateCard.mNextAlarmImageView.setImageDrawable(doubleShadowIconDrawable2);
+                        BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(baseTemplateCard.mNextAlarmImageView, doubleShadowIconDrawable2);
+                        BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mNextAlarmImageView, 0);
+                        String description = bcNextAlarmData.getDescription(supplementalAlarmItem);
+                        baseTemplateCard.mNextAlarmTextView.setContentDescription(baseTemplateCard.getContext().getString(R.string.accessibility_next_alarm, description));
+                        baseTemplateCard.mNextAlarmTextView.setText(description);
+                        BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mNextAlarmTextView, 0);
+                        if (supplementalAlarmItem == null) {
+                            tapAction2 = null;
+                        } else {
+                            tapAction2 = supplementalAlarmItem.getTapAction();
+                        }
+                        bcNextAlarmData.setOnClickListener(baseTemplateCard.mNextAlarmImageView, tapAction2, eventNotifier, BcSmartSpaceUtil.getLoggingDisplaySurface(baseTemplateCard.getContext().getPackageName(), baseTemplateCard.mIsDreaming, baseTemplateCard.mDozeAmount));
+                        bcNextAlarmData.setOnClickListener(baseTemplateCard.mNextAlarmTextView, tapAction2, eventNotifier, BcSmartSpaceUtil.getLoggingDisplaySurface(baseTemplateCard.getContext().getPackageName(), baseTemplateCard.mIsDreaming, baseTemplateCard.mDozeAmount));
+                    }
+                }
+                baseTemplateCard.setUpTextView(baseTemplateCard.mSupplementalLineTextView, baseTemplateCard.mTemplateData.getSupplementalLineItem(), eventNotifier);
+                baseTemplateCard.updateZenVisibility();
+                if (baseTemplateCard.mTemplateData.getPrimaryItem() != null && baseTemplateCard.mTemplateData.getPrimaryItem().getTapAction() != null) {
+                    i6 = i5;
+                    str = "SsBaseTemplateCard";
+                    i7 = 2;
+                    doubleShadowIconDrawable = null;
+                    BcSmartSpaceUtil.setOnClickListener(baseTemplateCard, smartspaceTarget, baseTemplateCard.mTemplateData.getPrimaryItem().getTapAction(), eventNotifier, "SsBaseTemplateCard", baseTemplateCard.mLoggingInfo, 0);
+                } else {
+                    i6 = i5;
+                    str = "SsBaseTemplateCard";
+                    doubleShadowIconDrawable = null;
+                    i7 = 2;
+                }
+                ViewGroup viewGroup3 = baseTemplateCard.mSecondaryCardPane;
+                if (viewGroup3 == null) {
+                    Log.i(str, "Secondary card pane is null");
+                } else {
+                    ViewGroup.LayoutParams layoutParams = (ConstraintLayout.LayoutParams) viewGroup3.getLayoutParams();
+                    ((ConstraintLayout.LayoutParams) layoutParams).matchConstraintMaxWidth = baseTemplateCard.getWidth() / i7;
+                    baseTemplateCard.mSecondaryCardPane.setLayoutParams(layoutParams);
+                }
+            }
+            if (baseTemplateCard.mDndImageView != null) {
+                if (this.mDndImage == null) {
+                    BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mDndImageView, i6);
+                    BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(baseTemplateCard.mDndImageView, doubleShadowIconDrawable);
+                } else {
+                    DoubleShadowIconDrawable doubleShadowIconDrawable3 = new DoubleShadowIconDrawable(baseTemplateCard.getContext());
+                    doubleShadowIconDrawable3.setIcon(this.mDndImage.mutate());
+                    baseTemplateCard.mDndImageView.setImageDrawable(doubleShadowIconDrawable3);
+                    baseTemplateCard.mDndImageView.setContentDescription(this.mDndDescription);
+                    BcSmartspaceTemplateDataUtils.updateVisibility(baseTemplateCard.mDndImageView, 0);
+                    BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(baseTemplateCard.mDndImageView, doubleShadowIconDrawable3);
+                }
+                baseTemplateCard.updateZenVisibility();
+            }
+            baseTemplateCard.setPrimaryTextColor(this.mCurrentTextColor);
+            baseTemplateCard.setDozeAmount(this.mDozeAmount);
+            return;
+        }
+        BcSmartspaceCardLoggerUtil.tryForcePrimaryFeatureTypeAndInjectWeatherSubcard(bcSmartspaceCardLoggingInfo2, smartspaceTarget);
+        BcSmartspaceCard bcSmartspaceCard = viewHolder.mLegacyCard;
+        if (bcSmartspaceCard == null) {
+            Log.w("SsCardPagerAdapter", "No legacy card view can be binded");
+            return;
+        }
+        bcSmartspaceCard.mIsDreaming = this.mIsDreaming;
+        if (this.mDataProvider == null) {
+            smartspaceEventNotifier = null;
+        } else {
+            smartspaceEventNotifier = smartspaceTargetEvent2 -> {
+                this.mDataProvider.notifySmartspaceEvent(smartspaceTargetEvent2);
+            };
+        }
+        String smartspaceTargetId2 = smartspaceTarget.getSmartspaceTargetId();
+        if (!bcSmartspaceCard.mPrevSmartspaceTargetId.equals(smartspaceTargetId2)) {
+            bcSmartspaceCard.mPrevSmartspaceTargetId = smartspaceTargetId2;
+            bcSmartspaceCard.mEventNotifier = null;
+            BcSmartspaceTemplateDataUtils.updateVisibility(bcSmartspaceCard.mSecondaryCardGroup, 8);
+            bcSmartspaceCard.mIconDrawable.setIcon(null);
+            bcSmartspaceCard.updateZenVisibility();
+            bcSmartspaceCard.setTitle(null, null, false);
+            bcSmartspaceCard.setSubtitle(null, null, false);
+            bcSmartspaceCard.updateIconTint();
+            bcSmartspaceCard.setOnClickListener(null);
+        }
+        bcSmartspaceCard.mTarget = smartspaceTarget;
+        bcSmartspaceCard.mEventNotifier = smartspaceEventNotifier;
+        SmartspaceAction headerAction = smartspaceTarget.getHeaderAction();
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        bcSmartspaceCard.mUsePageIndicatorUi = this.mSmartspaceTargets.size() > 1;
+        bcSmartspaceCard.mValidSecondaryCard = false;
+        ViewGroup viewGroup4 = bcSmartspaceCard.mTextGroup;
+        if (viewGroup4 != null) {
+            viewGroup4.setTranslationX(0.0f);
+        }
+        if (headerAction != null) {
+            BcSmartspaceCardSecondary bcSmartspaceCardSecondary2 = bcSmartspaceCard.mSecondaryCard;
+            if (bcSmartspaceCardSecondary2 != null) {
+                String smartspaceTargetId3 = smartspaceTarget.getSmartspaceTargetId();
+                if (!bcSmartspaceCardSecondary2.mPrevSmartspaceTargetId.equals(smartspaceTargetId3)) {
+                    bcSmartspaceCardSecondary2.mPrevSmartspaceTargetId = smartspaceTargetId3;
+                    bcSmartspaceCardSecondary2.resetUi();
+                }
+                bcSmartspaceCard.mValidSecondaryCard = bcSmartspaceCard.mSecondaryCard.setSmartspaceActions(smartspaceTarget, bcSmartspaceCard.mEventNotifier, bcSmartspaceCardLoggingInfo2);
+            }
+            ViewGroup viewGroup5 = bcSmartspaceCard.mSecondaryCardGroup;
+            if (bcSmartspaceCard.mDozeAmount != 1.0f && bcSmartspaceCard.mValidSecondaryCard) {
+                i4 = 8;
+            } else {
+                i4 = 0;
+            }
+            BcSmartspaceTemplateDataUtils.updateVisibility(viewGroup5, i4);
+            Drawable iconDrawable = BcSmartSpaceUtil.getIconDrawable(bcSmartspaceCard.getContext(), headerAction.getIcon());
+            boolean z6 = iconDrawable != null;
+            bcSmartspaceCard.mIconDrawable.setIcon(iconDrawable);
+            CharSequence title = headerAction.getTitle();
+            CharSequence subtitle = headerAction.getSubtitle();
+            boolean z7 = smartspaceTarget.getFeatureType() == 1 || !TextUtils.isEmpty(title);
+            boolean z11 = !TextUtils.isEmpty(subtitle);
+            bcSmartspaceCard.updateZenVisibility();
+            if (!z7) {
+                title = subtitle;
+            }
+            CharSequence contentDescription = headerAction.getContentDescription();
+            boolean z8 = z7 != z11 && z6;
+            bcSmartspaceCard.setTitle(title, contentDescription, z8);
+            if (!z7 || !z11) {
+                subtitle = null;
+            }
+            bcSmartspaceCard.setSubtitle(subtitle, headerAction.getContentDescription(), z6);
+            bcSmartspaceCard.updateIconTint();
+        }
+        if (bcSmartspaceCard.mBaseActionIconSubtitleView != null) {
+            if (baseAction != null && baseAction.getIcon() != null) {
+                drawable = BcSmartSpaceUtil.getIconDrawable(bcSmartspaceCard.getContext(), baseAction.getIcon());
+            } else {
+                drawable = null;
+            }
+            if (baseAction != null && baseAction.getIcon() != null && drawable != null) {
+                drawable.setTintList(null);
+                bcSmartspaceCard.mBaseActionIconSubtitleView.setText(baseAction.getSubtitle());
+                bcSmartspaceCard.mBaseActionIconSubtitleView.setCompoundDrawablesRelative(drawable, null, null, null);
+                BcSmartspaceTemplateDataUtils.updateVisibility(bcSmartspaceCard.mBaseActionIconSubtitleView, 0);
+                if (baseAction.getExtras() != null && !baseAction.getExtras().isEmpty()) {
+                    i2 = baseAction.getExtras().getInt("subcardType", -1);
+                } else {
+                    i2 = -1;
+                }
+                if (i2 != -1) {
+                    i3 = BcSmartspaceCard.getClickedIndex(bcSmartspaceCardLoggingInfo2, i2);
+                } else {
+                    Log.d("BcSmartspaceCard", String.format("Subcard expected but missing type. loggingInfo=%s, baseAction=%s", bcSmartspaceCardLoggingInfo2, baseAction));
+                    i3 = 0;
+                }
+                tapAction = null;
+                bcSmartspaceCardLoggingInfo = bcSmartspaceCardLoggingInfo2;
+                BcSmartSpaceUtil.setOnClickListener(bcSmartspaceCard.mBaseActionIconSubtitleView, smartspaceTarget, baseAction, bcSmartspaceCard.mEventNotifier, "BcSmartspaceCard", bcSmartspaceCardLoggingInfo2, i3);
+                bcSmartspaceCard.setFormattedContentDescription(bcSmartspaceCard.mBaseActionIconSubtitleView, baseAction.getSubtitle(), baseAction.getContentDescription());
+            } else {
+                tapAction = null;
+                bcSmartspaceCardLoggingInfo = bcSmartspaceCardLoggingInfo2;
+                BcSmartspaceTemplateDataUtils.updateVisibility(bcSmartspaceCard.mBaseActionIconSubtitleView, 4);
+                bcSmartspaceCard.mBaseActionIconSubtitleView.setOnClickListener(null);
+                bcSmartspaceCard.mBaseActionIconSubtitleView.setContentDescription(null);
+            }
+        } else {
+            tapAction = null;
+            bcSmartspaceCardLoggingInfo = bcSmartspaceCardLoggingInfo2;
+        }
+        if (bcSmartspaceCard.mDateView != null) {
+            if (headerAction != null) {
+                uuid = headerAction.getId();
+            } else if (baseAction != null) {
+                uuid = baseAction.getId();
+            } else {
+                uuid = UUID.randomUUID().toString();
+            }
+            BcSmartSpaceUtil.setOnClickListener(bcSmartspaceCard.mDateView, smartspaceTarget, new SmartspaceAction.Builder(uuid, "unusedTitle").setIntent(BcSmartSpaceUtil.getOpenCalendarIntent()).build(), bcSmartspaceCard.mEventNotifier, "BcSmartspaceCard", bcSmartspaceCardLoggingInfo, 0);
+        }
+        if (headerAction != null && (headerAction.getIntent() != null || headerAction.getPendingIntent() != null)) {
+            if (smartspaceTarget.getFeatureType() == 1 && bcSmartspaceCardLoggingInfo.mFeatureType == 39) {
+                i = BcSmartspaceCard.getClickedIndex(bcSmartspaceCardLoggingInfo, 1);
+            } else {
+                i = 0;
+            }
+            BcSmartSpaceUtil.setOnClickListener(bcSmartspaceCard, smartspaceTarget, headerAction, bcSmartspaceCard.mEventNotifier, "BcSmartspaceCard", bcSmartspaceCardLoggingInfo, i);
+        } else if (baseAction != null && (baseAction.getIntent() != null || baseAction.getPendingIntent() != null)) {
+            BcSmartSpaceUtil.setOnClickListener(bcSmartspaceCard, smartspaceTarget, baseAction, bcSmartspaceCard.mEventNotifier, "BcSmartspaceCard", bcSmartspaceCardLoggingInfo, 0);
+        } else {
+            BcSmartSpaceUtil.setOnClickListener(bcSmartspaceCard, smartspaceTarget, headerAction, bcSmartspaceCard.mEventNotifier, "BcSmartspaceCard", bcSmartspaceCardLoggingInfo, 0);
+        }
+        ViewGroup viewGroup6 = bcSmartspaceCard.mSecondaryCardGroup;
+        if (viewGroup6 != null) {
+            ViewGroup.LayoutParams layoutParams2 = (ConstraintLayout.LayoutParams) viewGroup6.getLayoutParams();
+            if (getFeatureType(smartspaceTarget) == -2) {
+                ((ConstraintLayout.LayoutParams) layoutParams2).matchConstraintMaxWidth = (bcSmartspaceCard.getWidth() * 3) / 4;
+            } else {
+                ((ConstraintLayout.LayoutParams) layoutParams2).matchConstraintMaxWidth = bcSmartspaceCard.getWidth() / 2;
+            }
+            bcSmartspaceCard.mSecondaryCardGroup.setLayoutParams(layoutParams2);
+        }
+        bcSmartspaceCard.setPrimaryTextColor(this.mCurrentTextColor);
+        bcSmartspaceCard.setDozeAmount(this.mDozeAmount);
+        Drawable drawable3 = this.mDndImage;
+        ImageView imageView4 = bcSmartspaceCard.mDndImageView;
+        if (imageView4 != null) {
+            if (drawable3 == null) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(imageView4, 8);
+                BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(bcSmartspaceCard.mDndImageView, null);
+            } else {
+                bcSmartspaceCard.mDndIconDrawable.setIcon(drawable3.mutate());
+                bcSmartspaceCard.mDndImageView.setImageDrawable(bcSmartspaceCard.mDndIconDrawable);
+                bcSmartspaceCard.mDndImageView.setContentDescription(this.mDndDescription);
+                BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(bcSmartspaceCard.mDndImageView, bcSmartspaceCard.mDndIconDrawable);
+                BcSmartspaceTemplateDataUtils.updateVisibility(bcSmartspaceCard.mDndImageView, 0);
+            }
+            bcSmartspaceCard.updateZenVisibility();
+        }
+        BcNextAlarmData bcNextAlarmData3 = this.mNextAlarmData;
+        ImageView imageView5 = bcSmartspaceCard.mNextAlarmImageView;
+        if (imageView5 != null && bcSmartspaceCard.mNextAlarmTextView != null) {
+            Drawable drawable4 = bcNextAlarmData3.mImage;
+            if (drawable4 == null) {
+                BcSmartspaceTemplateDataUtils.updateVisibility(imageView5, 8);
+                BcSmartspaceTemplateDataUtils.updateVisibility(bcSmartspaceCard.mNextAlarmTextView, 8);
+                BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(bcSmartspaceCard.mNextAlarmImageView, null);
+            } else {
+                bcSmartspaceCard.mNextAlarmIconDrawable.setIcon(drawable4);
+                bcSmartspaceCard.mNextAlarmImageView.setImageDrawable(bcSmartspaceCard.mNextAlarmIconDrawable);
+                BcSmartspaceTemplateDataUtils.offsetImageViewForIcon(bcSmartspaceCard.mNextAlarmImageView, bcSmartspaceCard.mNextAlarmIconDrawable);
+                BcSmartspaceTemplateDataUtils.updateVisibility(bcSmartspaceCard.mNextAlarmImageView, 0);
+                String description2 = bcNextAlarmData3.getDescription(null);
+                bcSmartspaceCard.mNextAlarmTextView.setContentDescription(bcSmartspaceCard.getContext().getString(R.string.accessibility_next_alarm, description2));
+                bcSmartspaceCard.mNextAlarmTextView.setText(description2);
+                BcSmartspaceTemplateDataUtils.updateVisibility(bcSmartspaceCard.mNextAlarmTextView, 0);
+                bcNextAlarmData3.setOnClickListener(bcSmartspaceCard.mNextAlarmImageView, tapAction, bcSmartspaceCard.mEventNotifier, BcSmartSpaceUtil.getLoggingDisplaySurface(bcSmartspaceCard.getContext().getPackageName(), bcSmartspaceCard.mIsDreaming, bcSmartspaceCard.mDozeAmount));
+                bcNextAlarmData3.setOnClickListener(bcSmartspaceCard.mNextAlarmTextView, tapAction, bcSmartspaceCard.mEventNotifier, BcSmartSpaceUtil.getLoggingDisplaySurface(bcSmartspaceCard.getContext().getPackageName(), bcSmartspaceCard.mIsDreaming, bcSmartspaceCard.mDozeAmount));
+            }
+            bcSmartspaceCard.updateZenVisibility();
+        }
+    }
+
+    public void setDataProvider(BcSmartspaceDataPlugin plugin) {
+        this.mDataProvider = plugin;
+    }
+
+    public void setPrimaryTextColor(int i) {
+        this.mPrimaryTextColor = i;
+        setDozeAmount(this.mDozeAmount);
+    }
+
+    public void setDnd(Drawable drawable, String str) {
+        this.mDndImage = drawable;
+        this.mDndDescription = str;
+        refreshCards();
+    }
+
+    public void setNextAlarm(Drawable drawable, String str) {
+        BcNextAlarmData bcNextAlarmData = this.mNextAlarmData;
+        bcNextAlarmData.mImage = drawable;
+        if (drawable != null) {
+            drawable.mutate();
+        }
+        bcNextAlarmData.mDescription = str;
+        refreshCards();
+    }
+
+    public void setMediaTarget(SmartspaceTarget smartspaceTarget) {
+        this.mMediaTargets.clear();
+        if (smartspaceTarget != null) {
+            this.mMediaTargets.add(smartspaceTarget);
+        }
+        updateTargetVisibility();
+    }
+
+    public void setDozeAmount(float f) {
+        this.mCurrentTextColor = ColorUtils.blendARGB(this.mPrimaryTextColor, this.mDozeColor, f);
+        this.mLastDozeAmount = this.mDozeAmount;
+        this.mDozeAmount = f;
+        updateTargetVisibility();
+        for (int i = 0; i < this.mViewHolders.size(); i++) {
+            SparseArray<ViewHolder> sparseArray = this.mViewHolders;
+            ViewHolder viewHolder = sparseArray.get(sparseArray.keyAt(i));
+            if (viewHolder != null) {
+                BcSmartspaceCard bcSmartspaceCard = viewHolder.mLegacyCard;
+                if (bcSmartspaceCard != null) {
+                    bcSmartspaceCard.setPrimaryTextColor(this.mCurrentTextColor);
+                    bcSmartspaceCard.setDozeAmount(this.mDozeAmount);
+                }
+                BaseTemplateCard baseTemplateCard = viewHolder.mCard;
+                if (baseTemplateCard != null) {
+                    baseTemplateCard.setPrimaryTextColor(this.mCurrentTextColor);
+                    baseTemplateCard.setDozeAmount(this.mDozeAmount);
+                }
+            }
+        }
+    }
+
+    public void updateTargetVisibility() {
+        ArrayList<SmartspaceTarget> targets;
+        ArrayList<SmartspaceTarget> targets2;
+        if (Float.compare(this.mDozeAmount, 1.0f) == 0) {
+            if (isMediaPreferred(this.mAODTargets)) {
+                targets2 = this.mMediaTargets;
+            } else {
+                targets2 = this.mAODTargets;
+            }
+            this.mSmartspaceTargets = targets2;
+            notifyDataSetChanged();
+            return;
+        }
+        if (isMediaPreferred(this.mLockscreenTargets) && this.mKeyguardBypassEnabled) {
+            targets = this.mMediaTargets;
+        } else {
+            targets = this.mLockscreenTargets;
+        }
+        this.mSmartspaceTargets = targets;
+        if (Float.compare(this.mLastDozeAmount, 0.0f) == 0 || Float.compare(this.mLastDozeAmount, 1.0f) == 0 || Float.compare(this.mDozeAmount, 0.0f) == 0) {
+            notifyDataSetChanged();
+        }
+    }
+
+    public static int getFeatureType(SmartspaceTarget target) {
+        List<SmartspaceAction> actionChips = target.getActionChips();
+        int featureType = target.getFeatureType();
+        if (actionChips != null && !actionChips.isEmpty()) {
+            if (featureType != 13 || actionChips.size() != 1) {
+                return -1;
+            }
+            return -2;
+        }
+        return featureType;
+    }
+
+    public void addDefaultDateCardIfEmpty(ArrayList<SmartspaceTarget> targets) {
+        if (targets.isEmpty()) {
+            targets.add(new SmartspaceTarget.Builder("date_card_794317_92634", new ComponentName(this.mRoot.getContext(), CardPagerAdapter.class), this.mRoot.getContext().getUser()).setFeatureType(1).build());
+        }
+    }
+
+    public boolean isMediaPreferred(ArrayList<SmartspaceTarget> targets) {
+        return targets.size() == 1 && targets.get(0).getFeatureType() == 1 && !this.mMediaTargets.isEmpty();
+    }
+
+    public static class ViewHolder {
+        public final BaseTemplateCard mCard;
+        public final BcSmartspaceCard mLegacyCard;
+        public final int mPosition;
+        public SmartspaceTarget mTarget;
+
+        public ViewHolder(int position, BcSmartspaceCard legacyCard, SmartspaceTarget target, BaseTemplateCard card) {
+            this.mPosition = position;
+            this.mLegacyCard = legacyCard;
+            this.mTarget = target;
+            this.mCard = card;
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowIconDrawable.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowIconDrawable.java
new file mode 100644
index 000000000000..14e301798bda
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowIconDrawable.java
@@ -0,0 +1,108 @@
+package com.google.android.systemui.smartspace;
+
+import android.content.Context;
+import android.graphics.BlendMode;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ColorFilter;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.RenderEffect;
+import android.graphics.RenderNode;
+import android.graphics.Shader;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.InsetDrawable;
+import com.android.internal.graphics.ColorUtils;
+import com.android.systemui.bcsmartspace.R;
+
+public class DoubleShadowIconDrawable extends Drawable {
+    public int mAmbientShadowRadius;
+    public final int mCanvasSize;
+    public RenderNode mDoubleShadowNode;
+    public InsetDrawable mIconDrawable;
+    public final int mIconInsetSize;
+    public int mKeyShadowOffsetX;
+    public int mKeyShadowOffsetY;
+    public int mKeyShadowRadius;
+    public boolean mShowShadow;
+
+    public DoubleShadowIconDrawable(Context context) {
+        int dimensionPixelSize = context.getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_icon_size);
+        int dimensionPixelSize2 = context.getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_icon_inset);
+        this.mIconInsetSize = dimensionPixelSize2;
+        int i = (dimensionPixelSize2 * 2) + dimensionPixelSize;
+        this.mCanvasSize = i;
+        this.mAmbientShadowRadius = context.getResources().getDimensionPixelSize(R.dimen.ambient_text_shadow_radius);
+        this.mKeyShadowRadius = context.getResources().getDimensionPixelSize(R.dimen.key_text_shadow_radius);
+        this.mKeyShadowOffsetX = context.getResources().getDimensionPixelSize(R.dimen.key_text_shadow_dx);
+        this.mKeyShadowOffsetY = context.getResources().getDimensionPixelSize(R.dimen.key_text_shadow_dy);
+        setBounds(0, 0, i, i);
+    }
+
+    @Override // android.graphics.drawable.Drawable
+    public int getOpacity() {
+        return 0;
+    }
+
+    public void setIcon(Drawable drawable) {
+        RenderNode renderNode = null;
+        if (drawable == null) {
+            this.mIconDrawable = null;
+            return;
+        }
+        InsetDrawable insetDrawable = new InsetDrawable(drawable, this.mIconInsetSize);
+        this.mIconDrawable = insetDrawable;
+        int i = this.mCanvasSize;
+        insetDrawable.setBounds(0, 0, i, i);
+        if (this.mIconDrawable != null) {
+            RenderNode renderNode2 = new RenderNode("DoubleShadowNode");
+            int i2 = this.mCanvasSize;
+            renderNode2.setPosition(0, 0, i2, i2);
+            RenderEffect createShadowRenderEffect = createShadowRenderEffect(this.mAmbientShadowRadius, 0, 0, 48);
+            RenderEffect createShadowRenderEffect2 = createShadowRenderEffect(this.mKeyShadowRadius, this.mKeyShadowOffsetX, this.mKeyShadowOffsetY, 72);
+            if (createShadowRenderEffect != null && createShadowRenderEffect2 != null) {
+                renderNode2.setRenderEffect(RenderEffect.createBlendModeEffect(createShadowRenderEffect, createShadowRenderEffect2, BlendMode.DARKEN));
+                renderNode = renderNode2;
+            }
+        }
+        this.mDoubleShadowNode = renderNode;
+    }
+
+    public static RenderEffect createShadowRenderEffect(int i, int i2, int i3, int i4) {
+        return RenderEffect.createColorFilterEffect(new PorterDuffColorFilter(Color.argb(i4, 0, 0, 0), PorterDuff.Mode.MULTIPLY), RenderEffect.createOffsetEffect(i2, i3, RenderEffect.createBlurEffect(i, i, Shader.TileMode.CLAMP)));
+    }
+
+    @Override // android.graphics.drawable.Drawable
+    public void setAlpha(int i) {
+        this.mIconDrawable.setAlpha(i);
+    }
+
+    @Override // android.graphics.drawable.Drawable
+    public void setColorFilter(ColorFilter colorFilter) {
+        this.mIconDrawable.setColorFilter(colorFilter);
+    }
+
+    @Override // android.graphics.drawable.Drawable
+    public void setTint(int alpha) {
+        if (this.mIconDrawable != null) {
+            this.mIconDrawable.setTint(alpha);
+        }
+        this.mShowShadow = ColorUtils.calculateLuminance(alpha) > 0.5d;
+    }
+
+    @Override // android.graphics.drawable.Drawable
+    public void draw(Canvas canvas) {
+        RenderNode renderNode;
+        if (canvas.isHardwareAccelerated() && (renderNode = this.mDoubleShadowNode) != null && this.mShowShadow) {
+            if (!renderNode.hasDisplayList()) {
+                this.mIconDrawable.draw(this.mDoubleShadowNode.beginRecording());
+                this.mDoubleShadowNode.endRecording();
+            }
+            canvas.drawRenderNode(this.mDoubleShadowNode);
+        }
+        InsetDrawable insetDrawable = this.mIconDrawable;
+        if (insetDrawable != null) {
+            insetDrawable.draw(canvas);
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowTextView.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowTextView.java
new file mode 100644
index 000000000000..ac6897d14d9a
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/DoubleShadowTextView.java
@@ -0,0 +1,63 @@
+package com.google.android.systemui.smartspace;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.util.AttributeSet;
+import android.widget.TextView;
+import androidx.core.graphics.ColorUtils;
+import com.android.systemui.bcsmartspace.R;
+
+public class DoubleShadowTextView extends TextView {
+    public final float mAmbientShadowBlur;
+    public final int mAmbientShadowColor;
+    public boolean mDrawShadow;
+    public final float mKeyShadowBlur;
+    public final int mKeyShadowColor;
+    public final float mKeyShadowOffsetX;
+    public final float mKeyShadowOffsetY;
+
+    public DoubleShadowTextView(Context context) {
+        this(context, null);
+    }
+
+    public DoubleShadowTextView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public DoubleShadowTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        updateDrawShadow(getCurrentTextColor());
+        this.mKeyShadowBlur = context.getResources().getDimensionPixelSize(R.dimen.key_text_shadow_radius);
+        this.mKeyShadowOffsetX = context.getResources().getDimensionPixelSize(R.dimen.key_text_shadow_dx);
+        this.mKeyShadowOffsetY = context.getResources().getDimensionPixelSize(R.dimen.key_text_shadow_dy);
+        this.mKeyShadowColor = context.getResources().getColor(R.color.key_text_shadow_color);
+        this.mAmbientShadowBlur = context.getResources().getDimensionPixelSize(R.dimen.ambient_text_shadow_radius);
+        this.mAmbientShadowColor = context.getResources().getColor(R.color.ambient_text_shadow_color);
+    }
+
+    @Override // android.widget.TextView, android.view.View
+    public void onDraw(Canvas canvas) {
+        if (!this.mDrawShadow) {
+            getPaint().clearShadowLayer();
+            super.onDraw(canvas);
+            return;
+        }
+        getPaint().setShadowLayer(this.mAmbientShadowBlur, 0.0f, 0.0f, this.mAmbientShadowColor);
+        super.onDraw(canvas);
+        canvas.save();
+        canvas.clipRect(getScrollX(), getExtendedPaddingTop() + getScrollY(), getWidth() + getScrollX(), getHeight() + getScrollY());
+        getPaint().setShadowLayer(this.mKeyShadowBlur, this.mKeyShadowOffsetX, this.mKeyShadowOffsetY, this.mKeyShadowColor);
+        super.onDraw(canvas);
+        canvas.restore();
+    }
+
+    @Override // android.widget.TextView
+    public void setTextColor(int color) {
+        super.setTextColor(color);
+        updateDrawShadow(color);
+    }
+
+    private void updateDrawShadow(int color) {
+        this.mDrawShadow = ColorUtils.calculateLuminance(color) > 0.5d;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/EventEnum.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/EventEnum.java
new file mode 100644
index 000000000000..08cd10883163
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/EventEnum.java
@@ -0,0 +1,5 @@
+package com.google.android.systemui.smartspace;
+
+public interface EventEnum {
+    int getId();
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/IcuDateTextView.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/IcuDateTextView.java
new file mode 100644
index 000000000000..b181af5f196d
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/IcuDateTextView.java
@@ -0,0 +1,93 @@
+package com.google.android.systemui.smartspace;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.icu.text.DateFormat;
+import android.icu.text.DisplayContext;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.util.AttributeSet;
+import com.android.systemui.bcsmartspace.R;
+import java.util.Locale;
+import java.util.Objects;
+
+public class IcuDateTextView extends DoubleShadowTextView {
+    public DateFormat mFormatter;
+    public Handler mHandler;
+    public final BroadcastReceiver mIntentReceiver;
+    public String mText;
+    public final Runnable mTicker;
+
+    public IcuDateTextView(Context context) {
+        this(context, null);
+    }
+
+    public IcuDateTextView(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet, 0);
+        this.mTicker = this::onTimeTick;
+        this.mIntentReceiver = new BroadcastReceiver() { // from class: com.google.android.systemui.smartspace.IcuDateTextView.1
+            @Override // android.content.BroadcastReceiver
+            public void onReceive(Context context2, Intent intent) {
+                IcuDateTextView.this.onTimeChanged(!"android.intent.action.TIME_TICK".equals(intent.getAction()));
+            }
+        };
+    }
+
+    @Override // android.widget.TextView, android.view.View
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        IntentFilter intentFilter = new IntentFilter();
+        intentFilter.addAction("android.intent.action.TIME_SET");
+        intentFilter.addAction("android.intent.action.TIMEZONE_CHANGED");
+        getContext().registerReceiver(this.mIntentReceiver, intentFilter);
+        onTimeChanged(true);
+        this.mHandler = new Handler();
+    }
+
+    @Override // android.view.View
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (this.mHandler != null) {
+            getContext().unregisterReceiver(this.mIntentReceiver);
+            this.mHandler = null;
+        }
+    }
+
+    private void onTimeTick() {
+        onTimeChanged(false);
+        if (this.mHandler != null) {
+            long uptimeMillis = SystemClock.uptimeMillis();
+            this.mHandler.postAtTime(this.mTicker, uptimeMillis + (1000 - (uptimeMillis % 1000)));
+        }
+    }
+
+    @Override // android.view.View
+    public void onVisibilityAggregated(boolean isVisible) {
+        super.onVisibilityAggregated(isVisible);
+        if (this.mHandler != null) {
+            this.mHandler.removeCallbacks(this.mTicker);
+            if (isVisible) {
+                this.mTicker.run();
+            }
+        }
+    }
+
+    public void onTimeChanged(boolean force) {
+        if (!isShown()) {
+            return;
+        }
+        if (this.mFormatter == null || force) {
+            DateFormat format = DateFormat.getInstanceForSkeleton(getContext().getString(R.string.smartspace_icu_date_pattern), Locale.getDefault());
+            this.mFormatter = format;
+            format.setContext(DisplayContext.CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE);
+        }
+        String format2 = this.mFormatter.format(Long.valueOf(System.currentTimeMillis()));
+        if (!Objects.equals(this.mText, format2)) {
+            this.mText = format2;
+            setText(format2);
+            setContentDescription(format2);
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InstanceId.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InstanceId.java
new file mode 100644
index 000000000000..9a7c0f50f0d4
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InstanceId.java
@@ -0,0 +1,24 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceTarget;
+import java.util.UUID;
+
+public class InstanceId {
+    public static int create(SmartspaceTarget smartspaceTarget) {
+        if (smartspaceTarget == null) {
+            return SmallHash.hash(UUID.randomUUID().toString());
+        }
+        String smartspaceTargetId = smartspaceTarget.getSmartspaceTargetId();
+        if (smartspaceTargetId != null && !smartspaceTargetId.isEmpty()) {
+            return SmallHash.hash(smartspaceTargetId);
+        }
+        return SmallHash.hash(String.valueOf(smartspaceTarget.getCreationTimeMillis()));
+    }
+
+    public static int create(String str) {
+        if (str != null && !str.isEmpty()) {
+            return SmallHash.hash(str);
+        }
+        return SmallHash.hash(UUID.randomUUID().toString());
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InterceptingViewPager.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InterceptingViewPager.java
new file mode 100644
index 000000000000..c7b8bc7cc346
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/InterceptingViewPager.java
@@ -0,0 +1,86 @@
+package com.google.android.systemui.smartspace;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.ViewConfiguration;
+import androidx.viewpager.widget.ViewPager;
+
+public class InterceptingViewPager extends ViewPager {
+    public boolean mHasPerformedLongPress;
+    public boolean mHasPostedLongPress;
+    public final Runnable mLongPressCallback;
+    public final EventProxy mSuperOnIntercept;
+    public final EventProxy mSuperOnTouch;
+
+    public interface EventProxy {
+        boolean delegateEvent(MotionEvent motionEvent);
+    }
+
+    public boolean superOnTouchEvent(MotionEvent event) {
+        return super.onTouchEvent(event);
+    }
+
+    public boolean superOnInterceptTouchEvent(MotionEvent event) {
+        return super.onInterceptTouchEvent(event);
+    }
+
+    public InterceptingViewPager(Context context) {
+        super(context);
+        this.mSuperOnTouch = this::superOnTouchEvent;
+        this.mSuperOnIntercept = this::superOnInterceptTouchEvent;
+        this.mLongPressCallback = this::triggerLongPress;
+    }
+
+    public InterceptingViewPager(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        this.mSuperOnTouch = this::superOnTouchEvent;
+        this.mSuperOnIntercept = this::superOnInterceptTouchEvent;
+        this.mLongPressCallback = this::triggerLongPress;
+    }
+
+    public boolean onInterceptTouchEvent(MotionEvent event) {
+        return handleTouchOverride(event, this.mSuperOnIntercept);
+    }
+
+    public boolean onTouchEvent(MotionEvent event) {
+        return handleTouchOverride(event, this.mSuperOnTouch);
+    }
+
+    private boolean handleTouchOverride(MotionEvent event, EventProxy proxy) {
+        int action = event.getAction();
+        if (action == 0) {
+            this.mHasPerformedLongPress = false;
+            if (isLongClickable()) {
+                cancelScheduledLongPress();
+                this.mHasPostedLongPress = true;
+                postDelayed(this.mLongPressCallback, ViewConfiguration.getLongPressTimeout());
+            }
+        } else if (action == 1 || action == 3) {
+            cancelScheduledLongPress();
+        }
+        if (this.mHasPerformedLongPress) {
+            cancelScheduledLongPress();
+            return true;
+        } else if (!proxy.delegateEvent(event)) {
+            return false;
+        } else {
+            cancelScheduledLongPress();
+            return true;
+        }
+    }
+
+    private void cancelScheduledLongPress() {
+        if (this.mHasPostedLongPress) {
+            this.mHasPostedLongPress = false;
+            removeCallbacks(this.mLongPressCallback);
+        }
+    }
+
+    public void triggerLongPress() {
+        this.mHasPerformedLongPress = true;
+        if (performLongClick()) {
+            getParent().requestDisallowInterceptTouchEvent(true);
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/LazyServerFlagLoader.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/LazyServerFlagLoader.java
new file mode 100644
index 000000000000..7eb44e2880f7
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/LazyServerFlagLoader.java
@@ -0,0 +1,26 @@
+package com.google.android.systemui.smartspace;
+
+import android.provider.DeviceConfig;
+
+public final class LazyServerFlagLoader {
+    public final String mPropertyKey;
+    public Boolean mValue = null;
+
+    public LazyServerFlagLoader(String key) {
+        this.mPropertyKey = key;
+    }
+
+    public boolean get() {
+        if (this.mValue == null) {
+            this.mValue = Boolean.valueOf(DeviceConfig.getBoolean("launcher", this.mPropertyKey, true));
+            DeviceConfig.addOnPropertiesChangedListener("launcher", (v0) -> {
+                v0.run();
+            }, properties -> {
+                if (properties.getKeyset().contains(this.mPropertyKey)) {
+                    this.mValue = Boolean.valueOf(properties.getBoolean(this.mPropertyKey, true));
+                }
+            });
+        }
+        return this.mValue.booleanValue();
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/NewCardInfo.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/NewCardInfo.java
new file mode 100644
index 000000000000..25a8df46e769
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/NewCardInfo.java
@@ -0,0 +1,104 @@
+package com.google.android.systemui.smartspace;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageInfo;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.net.Uri;
+import android.provider.MediaStore;
+import android.text.TextUtils;
+import android.util.Log;
+import com.android.systemui.smartspace.nano.SmartspaceProto;
+import java.io.ByteArrayOutputStream;
+
+public final class NewCardInfo {
+    public final SmartspaceProto.SmartspaceUpdate.SmartspaceCard mCard;
+    public final Intent mIntent;
+    public final boolean mIsPrimary;
+    public final PackageInfo mPackageInfo;
+    public final long mPublishTime;
+
+    public NewCardInfo(SmartspaceProto.SmartspaceUpdate.SmartspaceCard smartspaceCard, Intent intent, boolean z, long j, PackageInfo packageInfo) {
+        this.mCard = smartspaceCard;
+        this.mIsPrimary = z;
+        this.mIntent = intent;
+        this.mPublishTime = j;
+        this.mPackageInfo = packageInfo;
+    }
+
+    public boolean isPrimary() {
+        return this.mIsPrimary;
+    }
+
+    public Bitmap retrieveIcon(Context context) {
+        if (this.mCard.icon == null) {
+            return null;
+        }
+        Bitmap bitmap = (Bitmap) retrieveFromIntent(this.mCard.icon.key, this.mIntent);
+        if (bitmap != null) {
+            return bitmap;
+        }
+        try {
+            if (!TextUtils.isEmpty(this.mCard.icon.uri)) {
+                return MediaStore.Images.Media.getBitmap(context.getContentResolver(), Uri.parse(this.mCard.icon.uri));
+            }
+            if (!TextUtils.isEmpty(this.mCard.icon.gsaResourceName)) {
+                Intent.ShortcutIconResource shortcutIconResource = new Intent.ShortcutIconResource();
+                shortcutIconResource.packageName = "com.google.android.googlequicksearchbox";
+                shortcutIconResource.resourceName = this.mCard.icon.gsaResourceName;
+                return createIconBitmap(shortcutIconResource, context);
+            }
+            return null;
+        } catch (Exception e) {
+            Log.e("NewCardInfo", "retrieving bitmap uri=" + this.mCard.icon.uri + " gsaRes=" + this.mCard.icon.gsaResourceName);
+            return null;
+        }
+    }
+
+    public SmartspaceProto.CardWrapper toWrapper(Context context) {
+        SmartspaceProto.CardWrapper cardWrapper = new SmartspaceProto.CardWrapper();
+        Bitmap retrieveIcon = retrieveIcon(context);
+        if (retrieveIcon != null) {
+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+            retrieveIcon.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);
+            cardWrapper.icon = byteArrayOutputStream.toByteArray();
+        }
+        cardWrapper.card = this.mCard;
+        cardWrapper.publishTime = this.mPublishTime;
+        PackageInfo packageInfo = this.mPackageInfo;
+        if (packageInfo != null) {
+            cardWrapper.gsaVersionCode = packageInfo.versionCode;
+            cardWrapper.gsaUpdateTime = packageInfo.lastUpdateTime;
+        }
+        return cardWrapper;
+    }
+
+    private static <T> T retrieveFromIntent(String str, Intent intent) {
+        if (TextUtils.isEmpty(str)) {
+            return null;
+        }
+        return (T) intent.getParcelableExtra(str);
+    }
+
+    static Bitmap createIconBitmap(Intent.ShortcutIconResource shortcutIconResource, Context context) {
+        try {
+            Resources resourcesForApplication = context.getPackageManager().getResourcesForApplication(shortcutIconResource.packageName);
+            if (resourcesForApplication != null) {
+                return BitmapFactory.decodeResource(resourcesForApplication, resourcesForApplication.getIdentifier(shortcutIconResource.resourceName, null, null));
+            }
+            return null;
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public int getUserId() {
+        return this.mIntent.getIntExtra("uid", -1);
+    }
+
+    public boolean shouldDiscard() {
+        return this.mCard == null || this.mCard.shouldDiscard;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/PageIndicator.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/PageIndicator.java
new file mode 100644
index 000000000000..6bde5ea5caad
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/PageIndicator.java
@@ -0,0 +1,147 @@
+package com.google.android.systemui.smartspace;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import com.android.systemui.bcsmartspace.R;
+
+public class PageIndicator extends LinearLayout {
+    public int mCurrentPageIndex;
+    public int mNumPages;
+    public int mPrimaryColor;
+
+    public PageIndicator(Context context) {
+        super(context);
+        this.mPrimaryColor = getAttrColor(getContext(), 16842806);
+        this.mCurrentPageIndex = -1;
+        this.mNumPages = -1;
+    }
+
+    public PageIndicator(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        this.mPrimaryColor = getAttrColor(getContext(), 16842806);
+        this.mCurrentPageIndex = -1;
+        this.mNumPages = -1;
+    }
+
+    public PageIndicator(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        this.mPrimaryColor = getAttrColor(getContext(), 16842806);
+        this.mCurrentPageIndex = -1;
+        this.mNumPages = -1;
+    }
+
+    public PageIndicator(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        this.mPrimaryColor = getAttrColor(getContext(), 16842806);
+        this.mCurrentPageIndex = -1;
+        this.mNumPages = -1;
+    }
+
+    public static int getAttrColor(Context context, int attr) {
+        TypedArray obtainStyledAttributes = context.obtainStyledAttributes(new int[]{attr});
+        int color = obtainStyledAttributes.getColor(0, 0);
+        obtainStyledAttributes.recycle();
+        return color;
+    }
+
+    public void setNumPages(int pages) {
+        if (pages <= 0) {
+            Log.w("PageIndicator", "Total number of pages invalid: " + pages + ". Assuming 1 page.");
+            pages = 1;
+        }
+        if (pages < 2) {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this, 8);
+            return;
+        }
+        BcSmartspaceTemplateDataUtils.updateVisibility(this, 0);
+        if (pages != this.mNumPages) {
+            this.mNumPages = pages;
+            initializePageIndicators();
+        }
+    }
+
+    public void setPrimaryColor(int color) {
+        this.mPrimaryColor = color;
+        for (int i = 0; i < getChildCount(); i++) {
+            ((ImageView) getChildAt(i)).getDrawable().setTint(this.mPrimaryColor);
+        }
+    }
+
+    public void setPageOffset(int position, float positionOffset) {
+        int i4 = Float.compare(positionOffset, 0.0f);
+        if ((i4 != 0 || position != this.mCurrentPageIndex) && position >= 0 && position < getChildCount() - 1) {
+            ImageView imageView = (ImageView) getChildAt(position);
+            int childIndex = position + 1;
+            ImageView imageView2 = (ImageView) getChildAt(childIndex);
+            if (imageView != null && imageView2 != null) {
+                if (i4 == 0 || positionOffset >= 0.99f) {
+                    if (this.mCurrentPageIndex >= 0 && this.mCurrentPageIndex < getChildCount()) {
+                        getChildAt(this.mCurrentPageIndex).setAlpha(0.4f);
+                    }
+                    this.mCurrentPageIndex = i4 == 0 ? position : childIndex;
+                }
+                imageView.setAlpha(((1.0f - positionOffset) * 0.6f) + 0.4f);
+                imageView2.setAlpha((0.6f * positionOffset) + 0.4f);
+                if (positionOffset >= 0.5d) {
+                    childIndex = position + 2;
+                }
+                Object[] offset = {Integer.valueOf(childIndex), Integer.valueOf(this.mNumPages)};
+                setContentDescription(getContext().getString(R.string.accessibility_smartspace_page, offset));
+            }
+        }
+    }
+
+    private void initializePageIndicators() {
+        LinearLayout.LayoutParams lp;
+        int childCount = getChildCount() - this.mNumPages;
+        for (int i = 0; i < childCount; i++) {
+            removeViewAt(0);
+        }
+        int dimensionPixelSize = getContext().getResources().getDimensionPixelSize(R.dimen.page_indicator_dot_margin);
+        int i2 = 0;
+        while (i2 < this.mNumPages) {
+            ImageView imageView = i2 < getChildCount() ? (ImageView) getChildAt(i2) : new ImageView(getContext());
+            if (i2 < getChildCount()) {
+                lp = (LinearLayout.LayoutParams) imageView.getLayoutParams();
+            } else {
+                lp = new LinearLayout.LayoutParams(-2, -2);
+            }
+            if (i2 == 0) {
+                lp.setMarginStart(0);
+            } else {
+                lp.setMarginStart(dimensionPixelSize);
+            }
+            if (i2 == this.mNumPages - 1) {
+                lp.setMarginEnd(0);
+            } else {
+                lp.setMarginEnd(dimensionPixelSize);
+            }
+            if (i2 < getChildCount()) {
+                imageView.setLayoutParams(lp);
+            } else {
+                Drawable drawable = getContext().getResources().getDrawable(R.drawable.page_indicator_dot, getContext().getTheme());
+                drawable.setTint(this.mPrimaryColor);
+                imageView.setImageDrawable(drawable);
+                addView(imageView, lp);
+            }
+            int index = this.mCurrentPageIndex;
+            if (index < 0) {
+                this.mCurrentPageIndex = 0;
+            } else {
+                int numPages = this.mNumPages;
+                if (index >= numPages) {
+                    this.mCurrentPageIndex = numPages - 1;
+                }
+            }
+            imageView.setAlpha(i2 == this.mCurrentPageIndex ? 1.0f : 0.4f);
+            i2++;
+        }
+        setContentDescription(getContext().getString(R.string.accessibility_smartspace_page, 1, Integer.valueOf(this.mNumPages)));
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/ProtoStore.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/ProtoStore.java
new file mode 100644
index 000000000000..c764d76941a4
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/ProtoStore.java
@@ -0,0 +1,56 @@
+package com.google.android.systemui.smartspace;
+
+import android.content.Context;
+import android.util.Log;
+import com.android.systemui.smartspace.nano.SmartspaceProto;
+import com.google.protobuf.nano.MessageNano;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+
+public class ProtoStore {
+    public final Context mContext;
+
+    public ProtoStore(Context context) {
+        this.mContext = context.getApplicationContext();
+    }
+
+    public void store(SmartspaceProto.CardWrapper cardWrapper, String str) {
+        try {
+            FileOutputStream openFileOutput = this.mContext.openFileOutput(str, 0);
+            if (cardWrapper != null) {
+                openFileOutput.write(MessageNano.toByteArray(cardWrapper));
+            } else {
+                Log.d("ProtoStore", "deleting " + str);
+                this.mContext.deleteFile(str);
+            }
+            if (openFileOutput != null) {
+                openFileOutput.close();
+            }
+        } catch (FileNotFoundException e) {
+            Log.d("ProtoStore", "file does not exist");
+        } catch (Exception ex) {
+            Log.e("ProtoStore", "unable to write file", ex);
+        }
+    }
+
+    public <T extends MessageNano> boolean load(String str, T t) {
+        File fileStreamPath = this.mContext.getFileStreamPath(str);
+        try {
+            FileInputStream fileInputStream = new FileInputStream(fileStreamPath);
+            int length = (int) fileStreamPath.length();
+            byte[] bArr = new byte[length];
+            fileInputStream.read(bArr, 0, length);
+            MessageNano.mergeFrom(t, bArr);
+            fileInputStream.close();
+            return true;
+        } catch (FileNotFoundException e) {
+            Log.d("ProtoStore", "no cached data");
+            return false;
+        } catch (Exception ex) {
+            Log.e("ProtoStore", "unable to load data", ex);
+            return false;
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/SmallHash.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/SmallHash.java
new file mode 100644
index 000000000000..063089fcae34
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/SmallHash.java
@@ -0,0 +1,13 @@
+package com.google.android.systemui.smartspace;
+
+import java.util.Objects;
+
+public final class SmallHash {
+    public static int hash(String str) {
+        return hash(Objects.hashCode(str));
+    }
+
+    public static int hash(int i) {
+        return Math.abs(Math.floorMod(i, 8192));
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLogger.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLogger.java
new file mode 100644
index 000000000000..0be15dca7c44
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLogger.java
@@ -0,0 +1,44 @@
+package com.google.android.systemui.smartspace.logging;
+
+import android.os.Debug;
+import android.util.Log;
+import com.android.systemui.shared.system.SysUiStatsLog;
+import com.android.systemui.smartspace.nano.SmartspaceProto;
+import com.google.android.systemui.smartspace.EventEnum;
+import com.google.protobuf.nano.MessageNano;
+import java.util.ArrayList;
+import java.util.List;
+
+public final class BcSmartspaceCardLogger {
+    public static final String TAG = "StatsLog";
+    public static final boolean IS_VERBOSE = Log.isLoggable(TAG, 2);
+
+    public static void log(EventEnum eventEnum, BcSmartspaceCardLoggingInfo cardInfo) {
+        byte[] subcardList;
+        BcSmartspaceSubcardLoggingInfo subcardInfo = cardInfo.mSubcardInfo;
+        if (subcardInfo != null && subcardInfo.mSubcards != null && !subcardInfo.mSubcards.isEmpty()) {
+            SmartspaceProto.SmartSpaceSubcards subcards = new SmartspaceProto.SmartSpaceSubcards();
+            subcards.clickedSubcardIndex = subcardInfo.mClickedSubcardIndex;
+            List<BcSmartspaceCardMetadataLoggingInfo> metadataLogging = subcardInfo.mSubcards;
+            ArrayList<SmartspaceProto.SmartSpaceCardMetadata> metadata = new ArrayList<>();
+            metadataLogging.forEach(metaDataLoggingList -> {
+                SmartspaceProto.SmartSpaceCardMetadata cardMetadata = new SmartspaceProto.SmartSpaceCardMetadata();
+                cardMetadata.instanceId = metaDataLoggingList.mInstanceId;
+                cardMetadata.cardTypeId = metaDataLoggingList.mCardTypeId;
+                metadata.add(cardMetadata);
+            });
+            subcards.subcards = (SmartspaceProto.SmartSpaceCardMetadata[]) metadata.toArray(new SmartspaceProto.SmartSpaceCardMetadata[0]);
+            subcardList = MessageNano.toByteArray(subcards);
+        } else {
+            subcardList = null;
+        }
+        writeLog(eventEnum, cardInfo, subcardList);
+    }
+
+    static void writeLog(EventEnum eventEnum, BcSmartspaceCardLoggingInfo cardInfo, byte[] subcards) {
+        SysUiStatsLog.write(352, eventEnum.getId(), cardInfo.mInstanceId, 0, cardInfo.mDisplaySurface, cardInfo.mRank, cardInfo.mCardinality, cardInfo.mFeatureType, cardInfo.mUid, 0, 0, cardInfo.mReceivedLatency, subcards, subcards);
+        if (IS_VERBOSE) {
+            Log.d(TAG, String.format("\nLogged Smartspace event(%s), info(%s), callers=%s", eventEnum, cardInfo.toString(), Debug.getCallers(5)));
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggerUtil.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggerUtil.java
new file mode 100644
index 000000000000..200f5bcdae81
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggerUtil.java
@@ -0,0 +1,125 @@
+package com.google.android.systemui.smartspace.logging;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.uitemplatedata.BaseTemplateData;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.text.TextUtils;
+import com.google.android.systemui.smartspace.InstanceId;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardMetadataLoggingInfo;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceSubcardLoggingInfo;
+import java.util.ArrayList;
+import java.util.List;
+
+public final class BcSmartspaceCardLoggerUtil {
+    public static BcSmartspaceSubcardLoggingInfo createSubcardLoggingInfo(SmartspaceTarget smartspaceTarget) {
+        if (smartspaceTarget == null || smartspaceTarget.getBaseAction() == null || smartspaceTarget.getBaseAction().getExtras() == null || smartspaceTarget.getBaseAction().getExtras().isEmpty() || smartspaceTarget.getBaseAction().getExtras().getInt("subcardType", -1) == -1) {
+            return null;
+        }
+        SmartspaceAction baseAction = smartspaceTarget.getBaseAction();
+        int create = InstanceId.create(baseAction.getExtras().getString("subcardId"));
+        int i = baseAction.getExtras().getInt("subcardType");
+        BcSmartspaceCardMetadataLoggingInfo.Builder builder = new BcSmartspaceCardMetadataLoggingInfo.Builder();
+        builder.mInstanceId = create;
+        builder.mCardTypeId = i;
+        BcSmartspaceCardMetadataLoggingInfo bcSmartspaceCardMetadataLoggingInfo = new BcSmartspaceCardMetadataLoggingInfo(builder);
+        ArrayList arrayList = new ArrayList();
+        arrayList.add(bcSmartspaceCardMetadataLoggingInfo);
+        BcSmartspaceSubcardLoggingInfo.Builder builder2 = new BcSmartspaceSubcardLoggingInfo.Builder();
+        builder2.mSubcards = arrayList;
+        builder2.mClickedSubcardIndex = 0;
+        return new BcSmartspaceSubcardLoggingInfo(builder2);
+    }
+
+    public static int getUid(PackageManager packageManager, SmartspaceTarget smartspaceTarget) {
+        int i = -1;
+        if (packageManager != null) {
+            i = -1;
+            if (smartspaceTarget != null) {
+                i = -1;
+                if (smartspaceTarget.getComponentName() != null) {
+                    i = -1;
+                    if (!TextUtils.isEmpty(smartspaceTarget.getComponentName().getPackageName())) {
+                        if ("package_name".equals(smartspaceTarget.getComponentName().getPackageName())) {
+                            i = -1;
+                        } else {
+                            try {
+                                ApplicationInfo applicationInfo = packageManager.getApplicationInfo(smartspaceTarget.getComponentName().getPackageName(), PackageManager.ApplicationInfoFlags.of(0L));
+                                i = -1;
+                                if (applicationInfo != null) {
+                                    i = applicationInfo.uid;
+                                }
+                            } catch (PackageManager.NameNotFoundException e) {
+                                i = -1;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        return i;
+    }
+
+    public static void createSubcardLoggingInfoHelper(ArrayList arrayList, BaseTemplateData.SubItemInfo subItemInfo) {
+        if (subItemInfo != null && subItemInfo.getLoggingInfo() != null) {
+            BaseTemplateData.SubItemLoggingInfo loggingInfo = subItemInfo.getLoggingInfo();
+            BcSmartspaceCardMetadataLoggingInfo.Builder builder = new BcSmartspaceCardMetadataLoggingInfo.Builder();
+            builder.mCardTypeId = loggingInfo.getFeatureType();
+            builder.mInstanceId = loggingInfo.getInstanceId();
+            arrayList.add(new BcSmartspaceCardMetadataLoggingInfo(builder));
+        }
+    }
+
+    public static boolean tryForcePrimaryFeatureType(BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        if (bcSmartspaceCardLoggingInfo.mFeatureType != 1) {
+            return false;
+        }
+        bcSmartspaceCardLoggingInfo.mFeatureType = 39;
+        bcSmartspaceCardLoggingInfo.mInstanceId = InstanceId.create("date_card_794317_92634");
+        return true;
+    }
+
+    public static void tryForcePrimaryFeatureTypeAndInjectWeatherSubcard(BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo, SmartspaceTarget smartspaceTarget) {
+        if (tryForcePrimaryFeatureType(bcSmartspaceCardLoggingInfo) && smartspaceTarget != null && !"date_card_794317_92634".equals(smartspaceTarget.getSmartspaceTargetId())) {
+            if (bcSmartspaceCardLoggingInfo.mSubcardInfo == null) {
+                BcSmartspaceSubcardLoggingInfo.Builder builder = new BcSmartspaceSubcardLoggingInfo.Builder();
+                builder.mClickedSubcardIndex = 0;
+                builder.mSubcards = new ArrayList();
+                bcSmartspaceCardLoggingInfo.mSubcardInfo = new BcSmartspaceSubcardLoggingInfo(builder);
+            }
+            BcSmartspaceSubcardLoggingInfo bcSmartspaceSubcardLoggingInfo = bcSmartspaceCardLoggingInfo.mSubcardInfo;
+            if (bcSmartspaceSubcardLoggingInfo.mSubcards == null) {
+                bcSmartspaceSubcardLoggingInfo.mSubcards = new ArrayList();
+            }
+            if (bcSmartspaceCardLoggingInfo.mSubcardInfo.mSubcards.size() == 0 || (bcSmartspaceCardLoggingInfo.mSubcardInfo.mSubcards.get(0) != null && bcSmartspaceCardLoggingInfo.mSubcardInfo.mSubcards.get(0).mCardTypeId != 1)) {
+                List<BcSmartspaceCardMetadataLoggingInfo> list = bcSmartspaceCardLoggingInfo.mSubcardInfo.mSubcards;
+                BcSmartspaceCardMetadataLoggingInfo.Builder builder2 = new BcSmartspaceCardMetadataLoggingInfo.Builder();
+                builder2.mInstanceId = InstanceId.create(smartspaceTarget);
+                builder2.mCardTypeId = 1;
+                list.add(0, new BcSmartspaceCardMetadataLoggingInfo(builder2));
+                BcSmartspaceSubcardLoggingInfo bcSmartspaceSubcardLoggingInfo2 = bcSmartspaceCardLoggingInfo.mSubcardInfo;
+                int i = bcSmartspaceSubcardLoggingInfo2.mClickedSubcardIndex;
+                if (i > 0) {
+                    bcSmartspaceSubcardLoggingInfo2.mClickedSubcardIndex = i + 1;
+                }
+            }
+        }
+    }
+
+    public static BcSmartspaceSubcardLoggingInfo createSubcardLoggingInfo(BaseTemplateData baseTemplateData) {
+        if (baseTemplateData == null) {
+            return null;
+        }
+        ArrayList arrayList = new ArrayList();
+        createSubcardLoggingInfoHelper(arrayList, baseTemplateData.getSubtitleItem());
+        createSubcardLoggingInfoHelper(arrayList, baseTemplateData.getSubtitleSupplementalItem());
+        createSubcardLoggingInfoHelper(arrayList, baseTemplateData.getSupplementalLineItem());
+        if (arrayList.isEmpty()) {
+            return null;
+        }
+        BcSmartspaceSubcardLoggingInfo.Builder builder = new BcSmartspaceSubcardLoggingInfo.Builder();
+        builder.mSubcards = arrayList;
+        return new BcSmartspaceSubcardLoggingInfo(builder);
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggingInfo.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggingInfo.java
new file mode 100644
index 000000000000..5b99d9d9d589
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardLoggingInfo.java
@@ -0,0 +1,75 @@
+package com.google.android.systemui.smartspace.logging;
+
+import java.util.Objects;
+
+public final class BcSmartspaceCardLoggingInfo {
+    public final int mCardinality;
+    public final int mDisplaySurface;
+    public int mFeatureType;
+    public int mInstanceId;
+    public final int mRank;
+    public final int mReceivedLatency;
+    public BcSmartspaceSubcardLoggingInfo mSubcardInfo;
+    public final int mUid;
+
+    public static final class Builder {
+        public int mCardinality;
+        public int mDisplaySurface = 1;
+        public int mFeatureType;
+        public int mInstanceId;
+        public int mRank;
+        public int mReceivedLatency;
+        public BcSmartspaceSubcardLoggingInfo mSubcardInfo;
+        public int mUid;
+    }
+
+    public final boolean equals(Object obj) {
+        boolean z = true;
+        if (this == obj) {
+            return true;
+        }
+        if (!(obj instanceof BcSmartspaceCardLoggingInfo)) {
+            return false;
+        }
+        BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo = (BcSmartspaceCardLoggingInfo) obj;
+        if (this.mInstanceId != bcSmartspaceCardLoggingInfo.mInstanceId || this.mDisplaySurface != bcSmartspaceCardLoggingInfo.mDisplaySurface || this.mRank != bcSmartspaceCardLoggingInfo.mRank || this.mCardinality != bcSmartspaceCardLoggingInfo.mCardinality || this.mFeatureType != bcSmartspaceCardLoggingInfo.mFeatureType || this.mReceivedLatency != bcSmartspaceCardLoggingInfo.mReceivedLatency || this.mUid != bcSmartspaceCardLoggingInfo.mUid || !Objects.equals(this.mSubcardInfo, bcSmartspaceCardLoggingInfo.mSubcardInfo)) {
+            z = false;
+        }
+        return z;
+    }
+
+    public final String toString() {
+        StringBuilder m = LogBuilder.m("instance_id = ");
+        m.append(this.mInstanceId);
+        m.append(", feature type = ");
+        m.append(this.mFeatureType);
+        m.append(", display surface = ");
+        m.append(this.mDisplaySurface);
+        m.append(", rank = ");
+        m.append(this.mRank);
+        m.append(", cardinality = ");
+        m.append(this.mCardinality);
+        m.append(", receivedLatencyMillis = ");
+        m.append(this.mReceivedLatency);
+        m.append(", uid = ");
+        m.append(this.mUid);
+        m.append(", subcardInfo = ");
+        m.append(this.mSubcardInfo);
+        return m.toString();
+    }
+
+    public BcSmartspaceCardLoggingInfo(Builder builder) {
+        this.mInstanceId = builder.mInstanceId;
+        this.mDisplaySurface = builder.mDisplaySurface;
+        this.mRank = builder.mRank;
+        this.mCardinality = builder.mCardinality;
+        this.mFeatureType = builder.mFeatureType;
+        this.mReceivedLatency = builder.mReceivedLatency;
+        this.mUid = builder.mUid;
+        this.mSubcardInfo = builder.mSubcardInfo;
+    }
+
+    public final int hashCode() {
+        return Objects.hash(Integer.valueOf(this.mInstanceId), Integer.valueOf(this.mDisplaySurface), Integer.valueOf(this.mRank), Integer.valueOf(this.mCardinality), Integer.valueOf(this.mFeatureType), Integer.valueOf(this.mReceivedLatency), Integer.valueOf(this.mUid), this.mSubcardInfo);
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardMetadataLoggingInfo.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardMetadataLoggingInfo.java
new file mode 100644
index 000000000000..8efb86fd2620
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceCardMetadataLoggingInfo.java
@@ -0,0 +1,44 @@
+package com.google.android.systemui.smartspace.logging;
+
+import java.util.Objects;
+
+public final class BcSmartspaceCardMetadataLoggingInfo {
+    public final int mCardTypeId;
+    public final int mInstanceId;
+
+    public static final class Builder {
+        public int mCardTypeId;
+        public int mInstanceId;
+    }
+
+    public final boolean equals(Object obj) {
+        boolean z = true;
+        if (this == obj) {
+            return true;
+        }
+        if (!(obj instanceof BcSmartspaceCardMetadataLoggingInfo)) {
+            return false;
+        }
+        BcSmartspaceCardMetadataLoggingInfo bcSmartspaceCardMetadataLoggingInfo = (BcSmartspaceCardMetadataLoggingInfo) obj;
+        if (this.mInstanceId != bcSmartspaceCardMetadataLoggingInfo.mInstanceId || this.mCardTypeId != bcSmartspaceCardMetadataLoggingInfo.mCardTypeId) {
+            z = false;
+        }
+        return z;
+    }
+
+    public final String toString() {
+        StringBuilder m = LogBuilder.m("BcSmartspaceCardMetadataLoggingInfo{mInstanceId=");
+        m.append(this.mInstanceId);
+        m.append(", mCardTypeId=");
+        return LogBuilder.m(m, this.mCardTypeId, '}');
+    }
+
+    public BcSmartspaceCardMetadataLoggingInfo(Builder builder) {
+        this.mInstanceId = builder.mInstanceId;
+        this.mCardTypeId = builder.mCardTypeId;
+    }
+
+    public final int hashCode() {
+        return Objects.hash(Integer.valueOf(this.mInstanceId), Integer.valueOf(this.mCardTypeId));
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceSubcardLoggingInfo.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceSubcardLoggingInfo.java
new file mode 100644
index 000000000000..24350ac9d1f3
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/BcSmartspaceSubcardLoggingInfo.java
@@ -0,0 +1,51 @@
+package com.google.android.systemui.smartspace.logging;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+public final class BcSmartspaceSubcardLoggingInfo {
+    public int mClickedSubcardIndex;
+    public List<BcSmartspaceCardMetadataLoggingInfo> mSubcards;
+
+    public static final class Builder {
+        public int mClickedSubcardIndex;
+        public List<BcSmartspaceCardMetadataLoggingInfo> mSubcards;
+    }
+
+    public final boolean equals(Object obj) {
+        boolean z = true;
+        if (this == obj) {
+            return true;
+        }
+        if (!(obj instanceof BcSmartspaceSubcardLoggingInfo)) {
+            return false;
+        }
+        BcSmartspaceSubcardLoggingInfo bcSmartspaceSubcardLoggingInfo = (BcSmartspaceSubcardLoggingInfo) obj;
+        if (this.mClickedSubcardIndex != bcSmartspaceSubcardLoggingInfo.mClickedSubcardIndex || !Objects.equals(this.mSubcards, bcSmartspaceSubcardLoggingInfo.mSubcards)) {
+            z = false;
+        }
+        return z;
+    }
+
+    public final String toString() {
+        StringBuilder m = LogBuilder.m("BcSmartspaceSubcardLoggingInfo{mSubcards=");
+        m.append(this.mSubcards);
+        m.append(", mClickedSubcardIndex=");
+        return LogBuilder.m(m, this.mClickedSubcardIndex, '}');
+    }
+
+    public BcSmartspaceSubcardLoggingInfo(Builder builder) {
+        List<BcSmartspaceCardMetadataLoggingInfo> list = builder.mSubcards;
+        if (list != null) {
+            this.mSubcards = list;
+        } else {
+            this.mSubcards = new ArrayList();
+        }
+        this.mClickedSubcardIndex = builder.mClickedSubcardIndex;
+    }
+
+    public final int hashCode() {
+        return Objects.hash(this.mSubcards, Integer.valueOf(this.mClickedSubcardIndex));
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/LogBuilder.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/LogBuilder.java
new file mode 100644
index 000000000000..63c215fe3099
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/logging/LogBuilder.java
@@ -0,0 +1,96 @@
+package com.google.android.systemui.smartspace.logging;
+
+import android.util.Log;
+import java.io.PrintWriter;
+
+public class LogBuilder {
+    public static StringBuilder m(String str) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(str);
+        return sb;
+    }
+
+    public static void m(String str, String str2, String str3) {
+        Log.w(str3, str + str2);
+    }
+
+    public static String m(StringBuilder sb, int i, char c) {
+        sb.append(i);
+        sb.append(c);
+        return sb.toString();
+    }
+
+    public static void m(StringBuilder sb, int i, String str) {
+        sb.append(i);
+        Log.d(str, sb.toString());
+    }
+
+    public static StringBuilder m(StringBuilder sb, boolean z, PrintWriter printWriter, String str) {
+        sb.append(z);
+        printWriter.println(sb);
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(str);
+        return sb2;
+    }
+
+    public static String mnolog(String str, String str2, String str3) {
+        return str + str2 + str3;
+    }
+
+    public static StringBuilder m(char c) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(c);
+        return sb;
+    }
+
+    public static StringBuilder m(String str, String str2) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(str);
+        sb.append(str2);
+        return sb;
+    }
+
+    public static String m(StringBuilder sb, String str, String str2) {
+        sb.append(str);
+        sb.append(str2);
+        return sb.toString();
+    }
+
+    public static void m(String str, int i, String str2) {
+        Log.d(str2, str + i);
+    }
+
+    public static StringBuilder m(PrintWriter printWriter, String str, String str2) {
+        printWriter.println(str);
+        StringBuilder sb = new StringBuilder();
+        sb.append(str2);
+        return sb;
+    }
+
+    public static StringBuilder m(StringBuilder sb, float f, PrintWriter printWriter, String str) {
+        sb.append(f);
+        printWriter.println(sb);
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(str);
+        return sb2;
+    }
+
+    public static StringBuilder m(String str, int i, String str2, int i2, String str3) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(str);
+        sb.append(i);
+        sb.append(str2);
+        sb.append(i2);
+        sb.append(str3);
+        return sb;
+    }
+
+    public static void m(StringBuilder sb, boolean z, String str) {
+        sb.append(z);
+        Log.d(str, sb.toString());
+    }
+
+    public static String stringPlus(Object obj, String str) {
+        return str + obj;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/BaseTemplateCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/BaseTemplateCard.java
new file mode 100644
index 000000000000..6a7b94f93616
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/BaseTemplateCard.java
@@ -0,0 +1,325 @@
+package com.google.android.systemui.smartspace.uitemplate;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.SmartspaceUtils;
+import android.app.smartspace.uitemplatedata.BaseTemplateData;
+import android.app.smartspace.uitemplatedata.Icon;
+import android.app.smartspace.uitemplatedata.TapAction;
+import android.app.smartspace.uitemplatedata.Text;
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.ViewGroup;
+import android.view.accessibility.AccessibilityNodeInfo;
+import android.widget.ImageView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.app.animation.Interpolators;
+import com.android.launcher3.icons.GraphicsUtils;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.BcSmartSpaceUtil;
+import com.google.android.systemui.smartspace.BcSmartspaceCardSecondary;
+import com.google.android.systemui.smartspace.BcSmartspaceTemplateDataUtils;
+import com.google.android.systemui.smartspace.DoubleShadowIconDrawable;
+import com.google.android.systemui.smartspace.DoubleShadowTextView;
+import com.google.android.systemui.smartspace.IcuDateTextView;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardMetadataLoggingInfo;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceSubcardLoggingInfo;
+import java.util.List;
+
+public class BaseTemplateCard extends ConstraintLayout {
+    public IcuDateTextView mDateView;
+    public ImageView mDndImageView;
+    public float mDozeAmount;
+    public ViewGroup mExtrasGroup;
+    public int mFeatureType;
+    public int mIconTintColor;
+    public boolean mIsDreaming;
+    public String mUiSurface;
+    public BcSmartspaceCardLoggingInfo mLoggingInfo;
+    public ImageView mNextAlarmImageView;
+    public DoubleShadowTextView mNextAlarmTextView;
+    public String mPrevSmartspaceTargetId;
+    public BcSmartspaceCardSecondary mSecondaryCard;
+    public ViewGroup mSecondaryCardPane;
+    public boolean mShouldShowPageIndicator;
+    public DoubleShadowTextView mSubtitleSupplementalView;
+    public DoubleShadowTextView mSubtitleTextView;
+    public DoubleShadowTextView mSupplementalLineTextView;
+    public SmartspaceTarget mTarget;
+    public BaseTemplateData mTemplateData;
+    public ViewGroup mTextGroup;
+    public DoubleShadowTextView mTitleTextView;
+    public int mTopPadding;
+    public boolean mValidSecondaryCard;
+
+    public BaseTemplateCard(Context context) {
+        this(context, null);
+    }
+
+    public BaseTemplateCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mSecondaryCard = null;
+        this.mFeatureType = 0;
+        this.mLoggingInfo = null;
+        this.mIconTintColor = GraphicsUtils.getAttrColor(getContext(), 16842806);
+        this.mPrevSmartspaceTargetId = "";
+        this.mTextGroup = null;
+        this.mSecondaryCardPane = null;
+        this.mDateView = null;
+        this.mTitleTextView = null;
+        this.mSubtitleTextView = null;
+        this.mSubtitleSupplementalView = null;
+        this.mExtrasGroup = null;
+        this.mDndImageView = null;
+        this.mNextAlarmImageView = null;
+        this.mNextAlarmTextView = null;
+        this.mSupplementalLineTextView = null;
+    }
+
+    public static boolean shouldTint(BaseTemplateData.SubItemInfo subItemInfo) {
+        if (subItemInfo != null && subItemInfo.getIcon() != null) {
+            return subItemInfo.getIcon().shouldTint();
+        }
+        return false;
+    }
+
+    public final void resetTextView(DoubleShadowTextView doubleShadowTextView) {
+        if (doubleShadowTextView == null) {
+            return;
+        }
+        doubleShadowTextView.setCompoundDrawablesRelative(null, null, null, null);
+        doubleShadowTextView.setOnClickListener(null);
+        doubleShadowTextView.setContentDescription(null);
+        doubleShadowTextView.setText((CharSequence) null);
+        BcSmartspaceTemplateDataUtils.offsetTextViewForIcon(doubleShadowTextView, null, isRtl());
+    }
+
+    public final void setDozeAmount(float f) {
+        this.mDozeAmount = f;
+        ImageView imageView = this.mDndImageView;
+        if (imageView != null) {
+            imageView.setAlpha(f);
+        }
+        SmartspaceTarget smartspaceTarget = this.mTarget;
+        if (smartspaceTarget != null && smartspaceTarget.getBaseAction() != null && this.mTarget.getBaseAction().getExtras() != null) {
+            Bundle extras = this.mTarget.getBaseAction().getExtras();
+            if (this.mTitleTextView != null && extras.getBoolean("hide_title_on_aod")) {
+                this.mTitleTextView.setAlpha(1.0f - f);
+            }
+            if (this.mSubtitleTextView != null && extras.getBoolean("hide_subtitle_on_aod")) {
+                this.mSubtitleTextView.setAlpha(1.0f - f);
+            }
+        }
+        if (this.mTextGroup != null) {
+            ViewGroup viewGroup = this.mSecondaryCardPane;
+            int i = 0;
+            int i2 = 1;
+            boolean z = this.mDozeAmount == 1.0f || !this.mValidSecondaryCard;
+            if (z) {
+                i = 8;
+            }
+            BcSmartspaceTemplateDataUtils.updateVisibility(viewGroup, i);
+            ViewGroup viewGroup2 = this.mSecondaryCardPane;
+            if (viewGroup2 != null && viewGroup2.getVisibility() != 8) {
+                ViewGroup viewGroup3 = this.mTextGroup;
+                if (!isRtl()) {
+                    i2 = -1;
+                }
+                viewGroup3.setTranslationX(Interpolators.EMPHASIZED.getInterpolation(this.mDozeAmount) * this.mSecondaryCardPane.getWidth() * i2);
+                this.mSecondaryCardPane.setAlpha(Math.max(0.0f, Math.min(1.0f, ((1.0f - this.mDozeAmount) * 9.0f) - 6.0f)));
+                return;
+            }
+            this.mTextGroup.setTranslationX(0.0f);
+        }
+    }
+
+    public final void setPrimaryTextColor(int i) {
+        this.mIconTintColor = i;
+        if (this.mTitleTextView != null) {
+            this.mTitleTextView.setTextColor(i);
+            if (this.mTemplateData != null) {
+                updateTextViewIconTint(this.mTitleTextView, shouldTint(this.mTemplateData.getPrimaryItem()));
+            }
+        }
+        if (this.mDateView != null) {
+            this.mDateView.setTextColor(i);
+        }
+        if (this.mSubtitleTextView != null) {
+            this.mSubtitleTextView.setTextColor(i);
+            if (this.mTemplateData != null) {
+                updateTextViewIconTint(this.mSubtitleTextView, shouldTint(this.mTemplateData.getSubtitleItem()));
+            }
+        }
+        if (this.mSubtitleSupplementalView != null) {
+            this.mSubtitleSupplementalView.setTextColor(i);
+            if (this.mTemplateData != null) {
+                updateTextViewIconTint(this.mSubtitleSupplementalView, shouldTint(this.mTemplateData.getSubtitleSupplementalItem()));
+            }
+        }
+        updateZenColors();
+    }
+
+    public final void setUpTextView(DoubleShadowTextView doubleShadowTextView, BaseTemplateData.SubItemInfo subItemInfo, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier) {
+        BcSmartspaceSubcardLoggingInfo bcSmartspaceSubcardLoggingInfo;
+        List<BcSmartspaceCardMetadataLoggingInfo> list;
+        CharSequence text;
+        CharSequence charSequence;
+        if (doubleShadowTextView == null) {
+            Log.d("SsBaseTemplateCard", "No text view can be set up");
+            return;
+        }
+        resetTextView(doubleShadowTextView);
+        if (subItemInfo == null) {
+            Log.d("SsBaseTemplateCard", "Passed-in item info is null");
+            BcSmartspaceTemplateDataUtils.updateVisibility(doubleShadowTextView, 8);
+            return;
+        }
+        Text text2 = subItemInfo.getText();
+        BcSmartspaceTemplateDataUtils.setText(doubleShadowTextView, subItemInfo.getText());
+        if (!SmartspaceUtils.isEmpty(text2)) {
+            doubleShadowTextView.setTextColor(this.mIconTintColor);
+        }
+        Icon icon = subItemInfo.getIcon();
+        int i = 0;
+        if (icon != null) {
+            DoubleShadowIconDrawable doubleShadowIconDrawable = new DoubleShadowIconDrawable(getContext());
+            doubleShadowIconDrawable.setIcon(BcSmartSpaceUtil.getIconDrawable(getContext(), icon.getIcon()));
+            doubleShadowTextView.setCompoundDrawablesRelative(doubleShadowIconDrawable, null, null, null);
+            if (SmartspaceUtils.isEmpty(text2)) {
+                text = "";
+            } else {
+                text = text2.getText();
+            }
+            CharSequence contentDescription = icon.getContentDescription();
+            if (TextUtils.isEmpty(text)) {
+                charSequence = contentDescription;
+            } else {
+                charSequence = text;
+                if (!TextUtils.isEmpty(contentDescription)) {
+                    charSequence = this.mContext.getString(R.string.generic_smartspace_concatenated_desc, contentDescription, text);
+                }
+            }
+            doubleShadowTextView.setContentDescription(charSequence);
+            updateTextViewIconTint(doubleShadowTextView, icon.shouldTint());
+            BcSmartspaceTemplateDataUtils.offsetTextViewForIcon(doubleShadowTextView, doubleShadowIconDrawable, isRtl());
+        }
+        BcSmartspaceTemplateDataUtils.updateVisibility(doubleShadowTextView, 0);
+        SmartspaceTarget smartspaceTarget = this.mTarget;
+        TapAction tapAction = subItemInfo.getTapAction();
+        BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo = this.mLoggingInfo;
+        if (bcSmartspaceCardLoggingInfo != null && (bcSmartspaceSubcardLoggingInfo = bcSmartspaceCardLoggingInfo.mSubcardInfo) != null && (list = bcSmartspaceSubcardLoggingInfo.mSubcards) != null && !list.isEmpty() && subItemInfo.getLoggingInfo() != null) {
+            int featureType = subItemInfo.getLoggingInfo().getFeatureType();
+            BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo2 = this.mLoggingInfo;
+            if (featureType != bcSmartspaceCardLoggingInfo2.mFeatureType) {
+                List<BcSmartspaceCardMetadataLoggingInfo> list2 = bcSmartspaceCardLoggingInfo2.mSubcardInfo.mSubcards;
+                BaseTemplateData.SubItemLoggingInfo loggingInfo = subItemInfo.getLoggingInfo();
+                int i2 = 0;
+                while (true) {
+                    if (i2 < list2.size()) {
+                        BcSmartspaceCardMetadataLoggingInfo bcSmartspaceCardMetadataLoggingInfo = list2.get(i2);
+                        if (bcSmartspaceCardMetadataLoggingInfo.mInstanceId == loggingInfo.getInstanceId() && bcSmartspaceCardMetadataLoggingInfo.mCardTypeId == loggingInfo.getFeatureType()) {
+                            i = i2 + 1;
+                            break;
+                        }
+                        i2++;
+                    } else {
+                        break;
+                    }
+                }
+            }
+        }
+        BcSmartSpaceUtil.setOnClickListener(doubleShadowTextView, smartspaceTarget, tapAction, smartspaceEventNotifier, "SsBaseTemplateCard", bcSmartspaceCardLoggingInfo, i);
+    }
+
+    public final void updateZenColors() {
+        ImageView imageView = this.mNextAlarmImageView;
+        if (imageView != null && imageView.getDrawable() != null) {
+            imageView.getDrawable().setTint(this.mIconTintColor);
+        }
+        DoubleShadowTextView doubleShadowTextView = this.mNextAlarmTextView;
+        if (doubleShadowTextView != null) {
+            doubleShadowTextView.setTextColor(this.mIconTintColor);
+        }
+        ImageView imageView2 = this.mDndImageView;
+        if (imageView2 != null && imageView2.getDrawable() != null) {
+            imageView2.getDrawable().setTint(this.mIconTintColor);
+        }
+        DoubleShadowTextView doubleShadowTextView2 = this.mSupplementalLineTextView;
+        if (doubleShadowTextView2 != null) {
+            doubleShadowTextView2.setTextColor(this.mIconTintColor);
+            BaseTemplateData baseTemplateData = this.mTemplateData;
+            if (baseTemplateData != null) {
+                updateTextViewIconTint(this.mSupplementalLineTextView, shouldTint(baseTemplateData.getSupplementalLineItem()));
+            }
+        }
+    }
+
+    public final void updateZenVisibility() {
+        if (this.mExtrasGroup == null) {
+            return;
+        }
+        ImageView imageView = this.mDndImageView;
+        boolean z4 = true;
+        int i = 0;
+        boolean z = imageView != null && imageView.getVisibility() == 0;
+        ImageView imageView2 = this.mNextAlarmImageView;
+        boolean z2 = imageView2 != null && imageView2.getVisibility() == 0;
+        DoubleShadowTextView doubleShadowTextView = this.mSupplementalLineTextView;
+        boolean z3 = doubleShadowTextView != null && doubleShadowTextView.getVisibility() == 0;
+        if ((!z && !z2 && !z3) || (this.mShouldShowPageIndicator && this.mDateView == null)) {
+            z4 = false;
+        }
+        int i2 = this.mTopPadding;
+        if (!z4) {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mExtrasGroup, 4);
+            i = i2;
+        } else {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mExtrasGroup, 0);
+            updateZenColors();
+        }
+        setPadding(getPaddingLeft(), i, getPaddingRight(), getPaddingBottom());
+    }
+
+    public final AccessibilityNodeInfo createAccessibilityNodeInfo() {
+        AccessibilityNodeInfo createAccessibilityNodeInfo = super.createAccessibilityNodeInfo();
+        createAccessibilityNodeInfo.getExtras().putCharSequence("AccessibilityNodeInfo.roleDescription", " ");
+        return createAccessibilityNodeInfo;
+    }
+
+    public final void onFinishInflate() {
+        super.onFinishInflate();
+        this.mTextGroup = (ViewGroup) findViewById(R.id.text_group);
+        this.mSecondaryCardPane = (ViewGroup) findViewById(R.id.secondary_card_group);
+        this.mDateView = (IcuDateTextView) findViewById(R.id.date);
+        this.mTitleTextView = (DoubleShadowTextView) findViewById(R.id.title_text);
+        this.mSubtitleTextView = (DoubleShadowTextView) findViewById(R.id.subtitle_text);
+        this.mSubtitleSupplementalView = (DoubleShadowTextView) findViewById(R.id.base_action_icon_subtitle);
+        this.mExtrasGroup = (ViewGroup) findViewById(R.id.smartspace_extras_group);
+        this.mTopPadding = getPaddingTop();
+        ViewGroup viewGroup = this.mExtrasGroup;
+        if (viewGroup != null) {
+            this.mDndImageView = (ImageView) viewGroup.findViewById(R.id.dnd_icon);
+            this.mNextAlarmImageView = (ImageView) this.mExtrasGroup.findViewById(R.id.alarm_icon);
+            this.mNextAlarmTextView = (DoubleShadowTextView) this.mExtrasGroup.findViewById(R.id.alarm_text);
+            this.mSupplementalLineTextView = (DoubleShadowTextView) this.mExtrasGroup.findViewById(R.id.supplemental_line_text);
+        }
+    }
+
+    public final void updateTextViewIconTint(DoubleShadowTextView doubleShadowTextView, boolean z) {
+        Drawable[] compoundDrawablesRelative = doubleShadowTextView.getCompoundDrawablesRelative();
+        for (Drawable drawable : compoundDrawablesRelative) {
+            if (drawable != null) {
+                if (z) {
+                    drawable.setTint(this.mIconTintColor);
+                } else {
+                    drawable.setTintList(null);
+                }
+            }
+        }
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CarouselTemplateCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CarouselTemplateCard.java
new file mode 100644
index 000000000000..5f90115b7caf
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CarouselTemplateCard.java
@@ -0,0 +1,158 @@
+package com.google.android.systemui.smartspace.uitemplate;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.uitemplatedata.CarouselTemplateData;
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import androidx.constraintlayout.widget.Constraints;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.BcSmartSpaceUtil;
+import com.google.android.systemui.smartspace.BcSmartspaceCardSecondary;
+import com.google.android.systemui.smartspace.BcSmartspaceTemplateDataUtils;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import java.util.List;
+import java.util.Locale;
+import java.util.function.Predicate;
+
+public class CarouselTemplateCard extends BcSmartspaceCardSecondary {
+    public static final int clinit = 0;
+
+    public CarouselTemplateCard(Context context) {
+        super(context);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        for (int i = 0; i < getChildCount(); i++) {
+            View childAt = getChildAt(i);
+            BcSmartspaceTemplateDataUtils.updateVisibility(childAt.findViewById(R.id.upper_text), 8);
+            BcSmartspaceTemplateDataUtils.updateVisibility(childAt.findViewById(R.id.icon), 8);
+            BcSmartspaceTemplateDataUtils.updateVisibility(childAt.findViewById(R.id.lower_text), 8);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        for (int i2 = 0; i2 < getChildCount(); i2++) {
+            ((TextView) getChildAt(i2).findViewById(R.id.upper_text)).setTextColor(i);
+            ((TextView) getChildAt(i2).findViewById(R.id.lower_text)).setTextColor(i);
+        }
+    }
+
+    public CarouselTemplateCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    public final void onFinishInflate() {
+        ConstraintLayout constraintLayout;
+        ConstraintLayout constraintLayout2;
+        super/*android.view.ViewGroup*/.onFinishInflate();
+        ConstraintLayout[] constraintLayoutArr = new ConstraintLayout[4];
+        for (int i = 0; i < 4; i++) {
+            ConstraintLayout constraintLayout3 = (ConstraintLayout) ViewGroup.inflate(getContext(), R.layout.smartspace_carousel_column_template_card, null);
+            constraintLayout3.setId(View.generateViewId());
+            constraintLayoutArr[i] = constraintLayout3;
+        }
+        for (int i2 = 0; i2 < 4; i2++) {
+            Constraints.LayoutParams layoutParams = new Constraints.LayoutParams(-2, 0);
+            ConstraintLayout constraintLayout4 = constraintLayoutArr[i2];
+            if (i2 > 0) {
+                constraintLayout = constraintLayoutArr[i2 - 1];
+            } else {
+                constraintLayout = null;
+            }
+            if (i2 < 3) {
+                constraintLayout2 = constraintLayoutArr[i2 + 1];
+            } else {
+                constraintLayout2 = null;
+            }
+            if (i2 == 0) {
+                ((ConstraintLayout.LayoutParams) layoutParams).startToStart = 0;
+                ((ConstraintLayout.LayoutParams) layoutParams).horizontalChainStyle = 1;
+            } else {
+                ((ConstraintLayout.LayoutParams) layoutParams).startToEnd = constraintLayout.getId();
+            }
+            if (i2 == 3) {
+                ((ConstraintLayout.LayoutParams) layoutParams).endToEnd = 0;
+            } else {
+                ((ConstraintLayout.LayoutParams) layoutParams).endToStart = constraintLayout2.getId();
+            }
+            ((ConstraintLayout.LayoutParams) layoutParams).topToTop = 0;
+            ((ConstraintLayout.LayoutParams) layoutParams).bottomToBottom = 0;
+            addView(constraintLayout4, layoutParams);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        int i;
+        int i2;
+        CarouselTemplateData templateData = (CarouselTemplateData) smartspaceTarget.getTemplateData();
+        if (templateData != null && templateData.getCarouselItems() != null) {
+            List carouselItems = templateData.getCarouselItems();
+            int intExact = Math.toIntExact(carouselItems.stream().filter(new Predicate() { // from class: com.google.android.systemui.smartspace.uitemplate.CarouselTemplateCard$$ExternalSyntheticLambda0
+                @Override // java.util.function.Predicate
+                public final boolean test(Object obj) {
+                    boolean z;
+                    CarouselTemplateData.CarouselItem carouselItem = (CarouselTemplateData.CarouselItem) obj;
+                    int i3 = CarouselTemplateCard.clinit;
+                    if (carouselItem.getImage() != null && carouselItem.getLowerText() != null && carouselItem.getUpperText() != null) {
+                        z = true;
+                    } else {
+                        z = false;
+                    }
+                    return z;
+                }
+            }).count());
+            if (intExact < 4) {
+                int i3 = 4 - intExact;
+                Log.w("CarouselTemplateCard", String.format(Locale.US, "Hiding %d incomplete column(s).", Integer.valueOf(i3)));
+                for (int i4 = 0; i4 < 4; i4++) {
+                    View childAt = getChildAt(i4);
+                    if (i4 <= 3 - i3) {
+                        i2 = 0;
+                    } else {
+                        i2 = 8;
+                    }
+                    BcSmartspaceTemplateDataUtils.updateVisibility(childAt, i2);
+                }
+                ConstraintLayout.LayoutParams layoutParams = (ConstraintLayout.LayoutParams) getChildAt(0).getLayoutParams();
+                if (i3 == 0) {
+                    i = 1;
+                } else {
+                    i = 0;
+                }
+                layoutParams.horizontalChainStyle = i;
+            }
+            for (int i5 = 0; i5 < intExact; i5++) {
+                TextView textView = (TextView) getChildAt(i5).findViewById(R.id.upper_text);
+                ImageView imageView = (ImageView) getChildAt(i5).findViewById(R.id.icon);
+                TextView textView2 = (TextView) getChildAt(i5).findViewById(R.id.lower_text);
+                BcSmartspaceTemplateDataUtils.setText(textView, ((CarouselTemplateData.CarouselItem) carouselItems.get(i5)).getUpperText());
+                BcSmartspaceTemplateDataUtils.updateVisibility(textView, 0);
+                BcSmartspaceTemplateDataUtils.setIcon(imageView, ((CarouselTemplateData.CarouselItem) carouselItems.get(i5)).getImage());
+                BcSmartspaceTemplateDataUtils.updateVisibility(imageView, 0);
+                BcSmartspaceTemplateDataUtils.setText(textView2, ((CarouselTemplateData.CarouselItem) carouselItems.get(i5)).getLowerText());
+                BcSmartspaceTemplateDataUtils.updateVisibility(textView2, 0);
+            }
+            if (templateData.getCarouselAction() != null) {
+                BcSmartSpaceUtil.setOnClickListener(this, smartspaceTarget, templateData.getCarouselAction(), smartspaceEventNotifier, "CarouselTemplateCard", bcSmartspaceCardLoggingInfo);
+            }
+            for (CarouselTemplateData.CarouselItem carouselItem : templateData.getCarouselItems()) {
+                if (carouselItem.getTapAction() != null) {
+                    BcSmartSpaceUtil.setOnClickListener(this, smartspaceTarget, carouselItem.getTapAction(), smartspaceEventNotifier, "CarouselTemplateCard", bcSmartspaceCardLoggingInfo);
+                }
+            }
+            return true;
+        }
+        Log.w("CarouselTemplateCard", "CarouselTemplateData is null or has no CarouselItem");
+        return false;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CombinedCardsTemplateCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CombinedCardsTemplateCard.java
new file mode 100644
index 000000000000..51f619d4e87e
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/CombinedCardsTemplateCard.java
@@ -0,0 +1,102 @@
+package com.google.android.systemui.smartspace.uitemplate;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.uitemplatedata.BaseTemplateData;
+import android.app.smartspace.uitemplatedata.CombinedCardsTemplateData;
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.ViewGroup;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.BcSmartspaceCardSecondary;
+import com.google.android.systemui.smartspace.BcSmartspaceTemplateDataUtils;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import java.util.List;
+
+public class CombinedCardsTemplateCard extends BcSmartspaceCardSecondary {
+    public ConstraintLayout mFirstSubCard;
+    public ConstraintLayout mSecondSubCard;
+
+    public CombinedCardsTemplateCard(Context context) {
+        super(context);
+    }
+
+    public CombinedCardsTemplateCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        if (this.mFirstSubCard.getChildCount() != 0) {
+            ((BcSmartspaceCardSecondary) this.mFirstSubCard.getChildAt(0)).setTextColor(i);
+        }
+        if (this.mSecondSubCard.getChildCount() != 0) {
+            ((BcSmartspaceCardSecondary) this.mSecondSubCard.getChildAt(0)).setTextColor(i);
+        }
+    }
+
+    public final void onFinishInflate() {
+        super/*android.view.ViewGroup*/.onFinishInflate();
+        this.mFirstSubCard = findViewById(R.id.first_sub_card_container);
+        this.mSecondSubCard = findViewById(R.id.second_sub_card_container);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstSubCard, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondSubCard, 8);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        BaseTemplateData baseTemplateData;
+        CombinedCardsTemplateData templateData = (CombinedCardsTemplateData) smartspaceTarget.getTemplateData();
+        if (templateData != null && !templateData.getCombinedCardDataList().isEmpty()) {
+            List combinedCardDataList = templateData.getCombinedCardDataList();
+            BaseTemplateData baseTemplateData2 = (BaseTemplateData) combinedCardDataList.get(0);
+            if (combinedCardDataList.size() > 1) {
+                baseTemplateData = (BaseTemplateData) combinedCardDataList.get(1);
+            } else {
+                baseTemplateData = null;
+            }
+            if (!setupSubCard(this.mFirstSubCard, baseTemplateData2, smartspaceTarget, smartspaceEventNotifier, bcSmartspaceCardLoggingInfo)) {
+                return false;
+            }
+            if (baseTemplateData != null && !setupSubCard(this.mSecondSubCard, baseTemplateData, smartspaceTarget, smartspaceEventNotifier, bcSmartspaceCardLoggingInfo)) {
+                return false;
+            }
+            return true;
+        }
+        Log.w("CombinedCardsTemplateCard", "TemplateData is null or empty");
+        return false;
+    }
+
+    public final boolean setupSubCard(ConstraintLayout constraintLayout, BaseTemplateData baseTemplateData, SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        if (baseTemplateData == null) {
+            BcSmartspaceTemplateDataUtils.updateVisibility(constraintLayout, 8);
+            Log.w("CombinedCardsTemplateCard", "Sub-card templateData is null or empty");
+            return false;
+        }
+        int secondaryCardRes = BcSmartspaceTemplateDataUtils.getSecondaryCardRes(baseTemplateData.getTemplateType());
+        if (secondaryCardRes == 0) {
+            BcSmartspaceTemplateDataUtils.updateVisibility(constraintLayout, 8);
+            Log.w("CombinedCardsTemplateCard", "Combined sub-card res is null. Cannot set it up");
+            return false;
+        }
+        BcSmartspaceCardSecondary r0 = (BcSmartspaceCardSecondary) LayoutInflater.from(constraintLayout.getContext()).inflate(secondaryCardRes, (ViewGroup) constraintLayout, false);
+        r0.setSmartspaceActions(new SmartspaceTarget.Builder(smartspaceTarget.getSmartspaceTargetId(), smartspaceTarget.getComponentName(), smartspaceTarget.getUserHandle()).setTemplateData(baseTemplateData).build(), smartspaceEventNotifier, bcSmartspaceCardLoggingInfo);
+        constraintLayout.removeAllViews();
+        ConstraintLayout.LayoutParams layoutParams = new ConstraintLayout.LayoutParams(-2, getResources().getDimensionPixelSize(R.dimen.enhanced_smartspace_card_height));
+        layoutParams.startToStart = 0;
+        layoutParams.endToEnd = 0;
+        layoutParams.topToTop = 0;
+        layoutParams.bottomToBottom = 0;
+        BcSmartspaceTemplateDataUtils.updateVisibility(r0, 0);
+        constraintLayout.addView(r0, layoutParams);
+        BcSmartspaceTemplateDataUtils.updateVisibility(constraintLayout, 0);
+        return true;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/HeadToHeadTemplateCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/HeadToHeadTemplateCard.java
new file mode 100644
index 000000000000..1d183e8fd44e
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/HeadToHeadTemplateCard.java
@@ -0,0 +1,164 @@
+package com.google.android.systemui.smartspace.uitemplate;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.uitemplatedata.HeadToHeadTemplateData;
+import android.app.smartspace.uitemplatedata.Icon;
+import android.app.smartspace.uitemplatedata.Text;
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.BcSmartSpaceUtil;
+import com.google.android.systemui.smartspace.BcSmartspaceCardSecondary;
+import com.google.android.systemui.smartspace.BcSmartspaceTemplateDataUtils;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public class HeadToHeadTemplateCard extends BcSmartspaceCardSecondary {
+    public ImageView mFirstCompetitorIcon;
+    public TextView mFirstCompetitorText;
+    public TextView mHeadToHeadTitle;
+    public ImageView mSecondCompetitorIcon;
+    public TextView mSecondCompetitorText;
+
+    public HeadToHeadTemplateCard(Context context) {
+        super(context);
+    }
+
+    public HeadToHeadTemplateCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        this.mFirstCompetitorText.setTextColor(i);
+        this.mSecondCompetitorText.setTextColor(i);
+    }
+
+    public final void onFinishInflate() {
+        super/*android.view.ViewGroup*/.onFinishInflate();
+        this.mHeadToHeadTitle = (TextView) findViewById(R.id.head_to_head_title);
+        this.mFirstCompetitorText = (TextView) findViewById(R.id.first_competitor_text);
+        this.mSecondCompetitorText = (TextView) findViewById(R.id.second_competitor_text);
+        this.mFirstCompetitorIcon = (ImageView) findViewById(R.id.first_competitor_icon);
+        this.mSecondCompetitorIcon = (ImageView) findViewById(R.id.second_competitor_icon);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mHeadToHeadTitle, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorText, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorText, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorIcon, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorIcon, 8);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        boolean z;
+        boolean z2;
+        boolean z3;
+        boolean z4;
+        boolean z5;
+        boolean z6;
+        boolean z7;
+        HeadToHeadTemplateData templateData = (HeadToHeadTemplateData) smartspaceTarget.getTemplateData();
+        if (templateData == null) {
+            Log.w("HeadToHeadTemplateCard", "HeadToHeadTemplateData is null");
+            return false;
+        }
+        if (templateData.getHeadToHeadTitle() != null) {
+            Text headToHeadTitle = templateData.getHeadToHeadTitle();
+            TextView textView = this.mHeadToHeadTitle;
+            if (textView == null) {
+                Log.w("HeadToHeadTemplateCard", "No head-to-head title view to update");
+                z7 = false;
+            } else {
+                BcSmartspaceTemplateDataUtils.setText(textView, headToHeadTitle);
+                BcSmartspaceTemplateDataUtils.updateVisibility(this.mHeadToHeadTitle, 0);
+                z7 = true;
+            }
+            if (z7) {
+                z = true;
+                boolean z8 = z;
+                if (templateData.getHeadToHeadFirstCompetitorText() != null) {
+                    Text headToHeadFirstCompetitorText = templateData.getHeadToHeadFirstCompetitorText();
+                    TextView textView2 = this.mFirstCompetitorText;
+                    if (textView2 == null) {
+                        Log.w("HeadToHeadTemplateCard", "No first competitor text view to update");
+                        z6 = false;
+                    } else {
+                        BcSmartspaceTemplateDataUtils.setText(textView2, headToHeadFirstCompetitorText);
+                        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorText, 0);
+                        z6 = true;
+                    }
+                    if (!z6 && !z) {
+                        z8 = false;
+                    } else {
+                        z8 = true;
+                    }
+                }
+                boolean z9 = z8;
+                if (templateData.getHeadToHeadSecondCompetitorText() != null) {
+                    Text headToHeadSecondCompetitorText = templateData.getHeadToHeadSecondCompetitorText();
+                    TextView textView3 = this.mSecondCompetitorText;
+                    if (textView3 == null) {
+                        Log.w("HeadToHeadTemplateCard", "No second competitor text view to update");
+                        z5 = false;
+                    } else {
+                        BcSmartspaceTemplateDataUtils.setText(textView3, headToHeadSecondCompetitorText);
+                        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorText, 0);
+                        z5 = true;
+                    }
+                    if (!z5 && !z8) {
+                        z9 = false;
+                    } else {
+                        z9 = true;
+                    }
+                }
+                boolean z10 = z9;
+                if (templateData.getHeadToHeadFirstCompetitorIcon() != null) {
+                    Icon headToHeadFirstCompetitorIcon = templateData.getHeadToHeadFirstCompetitorIcon();
+                    ImageView imageView = this.mFirstCompetitorIcon;
+                    if (imageView == null) {
+                        Log.w("HeadToHeadTemplateCard", "No first competitor icon view to update");
+                        z4 = false;
+                    } else {
+                        BcSmartspaceTemplateDataUtils.setIcon(imageView, headToHeadFirstCompetitorIcon);
+                        BcSmartspaceTemplateDataUtils.updateVisibility(this.mFirstCompetitorIcon, 0);
+                        z4 = true;
+                    }
+                    if (!z4 && !z9) {
+                        z10 = false;
+                    } else {
+                        z10 = true;
+                    }
+                }
+                z2 = z10;
+                if (templateData.getHeadToHeadSecondCompetitorIcon() != null) {
+                    Icon headToHeadSecondCompetitorIcon = templateData.getHeadToHeadSecondCompetitorIcon();
+                    ImageView imageView2 = this.mSecondCompetitorIcon;
+                    if (imageView2 == null) {
+                        Log.w("HeadToHeadTemplateCard", "No second competitor icon view to update");
+                        z3 = false;
+                    } else {
+                        BcSmartspaceTemplateDataUtils.setIcon(imageView2, headToHeadSecondCompetitorIcon);
+                        BcSmartspaceTemplateDataUtils.updateVisibility(this.mSecondCompetitorIcon, 0);
+                        z3 = true;
+                    }
+                    if (!z3) {
+                        z2 = false;
+                    }
+                    z2 = true;
+                }
+                if (z2 && templateData.getHeadToHeadAction() != null) {
+                    BcSmartSpaceUtil.setOnClickListener(this, smartspaceTarget, templateData.getHeadToHeadAction(), smartspaceEventNotifier, "HeadToHeadTemplateCard", bcSmartspaceCardLoggingInfo);
+                }
+                return z2;
+            }
+        }
+        return false;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubCardTemplateCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubCardTemplateCard.java
new file mode 100644
index 000000000000..1d0e42eddcea
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubCardTemplateCard.java
@@ -0,0 +1,72 @@
+package com.google.android.systemui.smartspace.uitemplate;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.SmartspaceUtils;
+import android.app.smartspace.uitemplatedata.SubCardTemplateData;
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.BcSmartSpaceUtil;
+import com.google.android.systemui.smartspace.BcSmartspaceCardSecondary;
+import com.google.android.systemui.smartspace.BcSmartspaceTemplateDataUtils;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+
+public class SubCardTemplateCard extends BcSmartspaceCardSecondary {
+    public ImageView mImageView;
+    public TextView mTextView;
+
+    public SubCardTemplateCard(Context context) {
+        super(context);
+    }
+
+    public SubCardTemplateCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        this.mTextView.setTextColor(i);
+    }
+
+    public final void onFinishInflate() {
+        super/*android.view.ViewGroup*/.onFinishInflate();
+        this.mImageView = (ImageView) findViewById(R.id.image_view);
+        this.mTextView = (TextView) findViewById(R.id.card_prompt);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 8);
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mTextView, 8);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        boolean z;
+        SubCardTemplateData templateData = (SubCardTemplateData) smartspaceTarget.getTemplateData();
+        if (templateData == null) {
+            Log.w("SubCardTemplateCard", "SubCardTemplateData is null");
+            return false;
+        }
+        if (templateData.getSubCardIcon() != null) {
+            BcSmartspaceTemplateDataUtils.setIcon(this.mImageView, templateData.getSubCardIcon());
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mImageView, 0);
+            z = true;
+        } else {
+            z = false;
+        }
+        if (!SmartspaceUtils.isEmpty(templateData.getSubCardText())) {
+            BcSmartspaceTemplateDataUtils.setText(this.mTextView, templateData.getSubCardText());
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mTextView, 0);
+            z = true;
+        }
+        if (z && templateData.getSubCardAction() != null) {
+            BcSmartSpaceUtil.setOnClickListener(this, smartspaceTarget, templateData.getSubCardAction(), smartspaceEventNotifier, "SubCardTemplateCard", bcSmartspaceCardLoggingInfo);
+        }
+        return z;
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubImageTemplateCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubImageTemplateCard.java
new file mode 100644
index 000000000000..d936e2cb8213
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubImageTemplateCard.java
@@ -0,0 +1,283 @@
+package com.google.android.systemui.smartspace.uitemplate;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.uitemplatedata.SubImageTemplateData;
+import android.app.smartspace.uitemplatedata.TapAction;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.content.res.Resources;
+import android.graphics.ImageDecoder;
+import android.graphics.drawable.AnimationDrawable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.Icon;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.util.Size;
+import android.widget.ImageView;
+import androidx.constraintlayout.widget.ConstraintLayout;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.BcSmartSpaceUtil;
+import com.google.android.systemui.smartspace.BcSmartspaceCardSecondary;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import com.google.android.systemui.smartspace.logging.LogBuilder;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.ref.WeakReference;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.TreeMap;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+
+public class SubImageTemplateCard extends BcSmartspaceCardSecondary {
+    public static final int clinit = 0;
+    public final Handler mHandler;
+    public final HashMap mIconDrawableCache;
+    public final int mImageHeight;
+    public ImageView mImageView;
+
+    public static final class LoadUriTask extends AsyncTask<DrawableWrapper, Void, DrawableWrapper> {
+        @Override // android.os.AsyncTask
+        public final void onPostExecute(DrawableWrapper drawableWrapper) {
+            DrawableWrapper drawableWrapper2 = drawableWrapper;
+            drawableWrapper2.mListener.onDrawableLoaded(drawableWrapper2.mDrawable);
+        }
+
+        @Override // android.os.AsyncTask
+        public final DrawableWrapper doInBackground(DrawableWrapper[] drawableWrapperArr) {
+            Drawable drawable;
+            DrawableWrapper[] drawableWrapperArr2 = drawableWrapperArr;
+            DrawableWrapper drawableWrapper = null;
+            if (drawableWrapperArr2.length > 0) {
+                DrawableWrapper drawableWrapper2 = drawableWrapperArr2[0];
+                try {
+                    InputStream openInputStream = drawableWrapper2.mContentResolver.openInputStream(drawableWrapper2.mUri);
+                    final int i = drawableWrapper2.mHeightInPx;
+                    try {
+                        drawable = ImageDecoder.decodeDrawable(ImageDecoder.createSource((Resources) null, openInputStream), new ImageDecoder.OnHeaderDecodedListener() { // from class: com.google.android.systemui.smartspace.uitemplate.SubImageTemplateCard$$ExternalSyntheticLambda2
+                            @Override // android.graphics.ImageDecoder.OnHeaderDecodedListener
+                            public final void onHeaderDecoded(ImageDecoder imageDecoder, ImageDecoder.ImageInfo imageInfo, ImageDecoder.Source source) {
+                                float f;
+                                imageDecoder.setAllocator(3);
+                                Size size = imageInfo.getSize();
+                                if (size.getHeight() != 0) {
+                                    f = size.getWidth() / size.getHeight();
+                                } else {
+                                    f = 0.0f;
+                                }
+                                imageDecoder.setTargetSize((int) (i * f), i);
+                            }
+                        });
+                    } catch (IOException e) {
+                        StringBuilder sb = new StringBuilder();
+                        sb.append("Unable to decode stream: ");
+                        sb.append(e);
+                        Log.e("SubImageTemplateCard", sb.toString());
+                        drawable = null;
+                    }
+                    drawableWrapper2.mDrawable = drawable;
+                } catch (Exception e2) {
+                    StringBuilder m = LogBuilder.m("open uri:");
+                    m.append(drawableWrapper2.mUri);
+                    m.append(" got exception:");
+                    m.append(e2);
+                    Log.w("SubImageTemplateCard", m.toString());
+                }
+                drawableWrapper = drawableWrapper2;
+            }
+            return drawableWrapper;
+        }
+    }
+
+    public SubImageTemplateCard(Context context) {
+        this(context, null);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+    }
+
+    public static final class DrawableWrapper {
+        public final ContentResolver mContentResolver;
+        public Drawable mDrawable;
+        public final int mHeightInPx;
+        public final Icon.OnDrawableLoadedListener mListener;
+        public final Uri mUri;
+
+        public DrawableWrapper(Uri uri, ContentResolver contentResolver, int i, Icon.OnDrawableLoadedListener listener) {
+            this.mUri = uri;
+            this.mHeightInPx = i;
+            this.mContentResolver = contentResolver;
+            this.mListener = listener;
+        }
+    }
+
+    public SubImageTemplateCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mIconDrawableCache = new HashMap();
+        this.mHandler = new Handler();
+        this.mImageHeight = getResources().getDimensionPixelOffset(R.dimen.enhanced_smartspace_card_height);
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        HashMap hashMap = this.mIconDrawableCache;
+        if (hashMap != null) {
+            hashMap.clear();
+        }
+        ImageView imageView = this.mImageView;
+        if (imageView != null) {
+            imageView.getLayoutParams().width = -2;
+            this.mImageView.setImageDrawable(null);
+            this.mImageView.setBackgroundTintList(null);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        String sb;
+        SubImageTemplateData templateData = (SubImageTemplateData) smartspaceTarget.getTemplateData();
+        if (templateData != null && templateData.getSubImages() != null && !templateData.getSubImages().isEmpty()) {
+            final List subImages = templateData.getSubImages();
+            TapAction subImageAction = templateData.getSubImageAction();
+            if (this.mImageView == null) {
+                Log.w("SubImageTemplateCard", "No image view can be updated. Skipping background update...");
+            } else if (subImageAction != null && subImageAction.getExtras() != null) {
+                Bundle extras = subImageAction.getExtras();
+                String string = extras.getString("imageDimensionRatio", "");
+                if (!TextUtils.isEmpty(string)) {
+                    this.mImageView.getLayoutParams().width = 0;
+                    ((ConstraintLayout.LayoutParams) this.mImageView.getLayoutParams()).dimensionRatio = string;
+                }
+                if (extras.getBoolean("shouldShowBackground", false)) {
+                    this.mImageView.setBackgroundTintList(ColorStateList.valueOf(getContext().getColor(R.color.smartspace_button_background)));
+                }
+            }
+            int i = 200;
+            if (subImageAction != null) {
+                if (subImageAction.getExtras() == null) {
+                    i = 200;
+                } else {
+                    i = subImageAction.getExtras().getInt("GifFrameDurationMillis", 200);
+                }
+            }
+            ContentResolver contentResolver = getContext().getApplicationContext().getContentResolver();
+            final TreeMap treeMap = new TreeMap();
+            final WeakReference weakReference = new WeakReference(this.mImageView);
+            final String str = this.mPrevSmartspaceTargetId;
+            for (int i2 = 0; i2 < subImages.size(); i2++) {
+                android.app.smartspace.uitemplatedata.Icon icon = (android.app.smartspace.uitemplatedata.Icon) subImages.get(i2);
+                if (icon != null && icon.getIcon() != null) {
+                    Icon icon2 = icon.getIcon();
+                    StringBuilder sb2 = new StringBuilder(icon2.getType());
+                    switch (icon2.getType()) {
+                        case 1:
+                        case 5:
+                            sb2.append(icon2.getBitmap().hashCode());
+                            sb = sb2.toString();
+                            break;
+                        case 2:
+                            sb2.append(icon2.getResPackage());
+                            sb2.append(String.format("0x%08x", Integer.valueOf(icon2.getResId())));
+                            sb = sb2.toString();
+                            break;
+                        case 3:
+                            sb2.append(Arrays.hashCode(icon2.getDataBytes()));
+                            sb = sb2.toString();
+                            break;
+                        case 4:
+                        case 6:
+                            sb2.append(icon2.getUriString());
+                            sb = sb2.toString();
+                            break;
+                        default:
+                            sb = sb2.toString();
+                            break;
+                    }
+                    final String str2 = sb;
+                    final int i3 = i2;
+                    final int i4 = i;
+                    Icon.OnDrawableLoadedListener listener = new Icon.OnDrawableLoadedListener() { // from class: com.google.android.systemui.smartspace.uitemplate.SubImageTemplateCard$$ExternalSyntheticLambda0
+                        @Override // android.graphics.drawable.Icon.OnDrawableLoadedListener
+                        public final void onDrawableLoaded(Drawable drawable) {
+                            SubImageTemplateCard subImageTemplateCard = SubImageTemplateCard.this;
+                            String str3 = str;
+                            String str4 = str2;
+                            Map map = treeMap;
+                            int i5 = i3;
+                            List list = subImages;
+                            final int i6 = i4;
+                            WeakReference weakReference2 = weakReference;
+                            if (!str3.equals(subImageTemplateCard.mPrevSmartspaceTargetId)) {
+                                Log.d("SubImageTemplateCard", "SmartspaceTarget has changed. Skip the loaded result...");
+                                return;
+                            }
+                            subImageTemplateCard.mIconDrawableCache.put(str4, drawable);
+                            map.put(Integer.valueOf(i5), drawable);
+                            if (map.size() == list.size()) {
+                                final AnimationDrawable animationDrawable = new AnimationDrawable();
+                                List list2 = (List) map.values().stream().filter(new Predicate() { // from class: com.google.android.systemui.smartspace.uitemplate.SubImageTemplateCard$$ExternalSyntheticLambda3
+                                    @Override // java.util.function.Predicate
+                                    public final boolean test(Object obj) {
+                                        return Objects.nonNull((Drawable) obj);
+                                    }
+                                }).collect(Collectors.toList());
+                                if (list2.isEmpty()) {
+                                    Log.w("SubImageTemplateCard", "All images are failed to load. Reset imageView");
+                                    ImageView imageView = subImageTemplateCard.mImageView;
+                                    if (imageView != null) {
+                                        imageView.getLayoutParams().width = -2;
+                                        subImageTemplateCard.mImageView.setImageDrawable(null);
+                                        subImageTemplateCard.mImageView.setBackgroundTintList(null);
+                                        return;
+                                    }
+                                    return;
+                                }
+                                list2.forEach(obj -> animationDrawable.addFrame((Drawable) obj, i6));
+                                ImageView imageView2 = (ImageView) weakReference2.get();
+                                imageView2.setImageDrawable(animationDrawable);
+                                int intrinsicWidth = animationDrawable.getIntrinsicWidth();
+                                if (imageView2.getLayoutParams().width != intrinsicWidth) {
+                                    Log.d("SubImageTemplateCard", "imageView requestLayout");
+                                    imageView2.getLayoutParams().width = intrinsicWidth;
+                                    imageView2.requestLayout();
+                                }
+                                animationDrawable.start();
+                            }
+                        }
+                    };
+                    if (this.mIconDrawableCache.containsKey(sb) && this.mIconDrawableCache.get(sb) != null) {
+                        listener.onDrawableLoaded((Drawable) this.mIconDrawableCache.get(sb));
+                    } else if (icon2.getType() == 4) {
+                        new LoadUriTask().execute(new DrawableWrapper(icon2.getUri(), contentResolver, this.mImageHeight, listener));
+                    } else {
+                        icon2.loadDrawableAsync(getContext(), listener, this.mHandler);
+                    }
+                }
+            }
+            if (subImageAction != null) {
+                BcSmartSpaceUtil.setOnClickListener(this, smartspaceTarget, subImageAction, smartspaceEventNotifier, "SubImageTemplateCard", bcSmartspaceCardLoggingInfo);
+                return true;
+            }
+            return true;
+        }
+        Log.w("SubImageTemplateCard", "SubImageTemplateData is null or has no SubImage");
+        return false;
+    }
+
+    public final void onFinishInflate() {
+        super/*android.view.ViewGroup*/.onFinishInflate();
+        this.mImageView = (ImageView) findViewById(R.id.image_view);
+    }
+}
diff --git a/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubListTemplateCard.java b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubListTemplateCard.java
new file mode 100644
index 000000000000..786aadb869f4
--- /dev/null
+++ b/packages/SystemUI/bcsmartspace/src/com/google/android/systemui/smartspace/uitemplate/SubListTemplateCard.java
@@ -0,0 +1,107 @@
+package com.google.android.systemui.smartspace.uitemplate;
+
+import android.app.smartspace.SmartspaceTarget;
+import android.app.smartspace.uitemplatedata.SubListTemplateData;
+import android.app.smartspace.uitemplatedata.Text;
+import android.content.Context;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.android.systemui.bcsmartspace.R;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.google.android.systemui.smartspace.BcSmartSpaceUtil;
+import com.google.android.systemui.smartspace.BcSmartspaceCardSecondary;
+import com.google.android.systemui.smartspace.BcSmartspaceTemplateDataUtils;
+import com.google.android.systemui.smartspace.logging.BcSmartspaceCardLoggingInfo;
+import java.util.List;
+import java.util.Locale;
+
+public class SubListTemplateCard extends BcSmartspaceCardSecondary {
+    public static final int[] LIST_ITEM_TEXT_VIEW_IDS = {2131362736, 2131362737, 2131362738};
+    public ImageView mListIconView;
+    public TextView[] mListItems;
+
+    public SubListTemplateCard(Context context) {
+        super(context);
+        this.mListItems = new TextView[3];
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void setTextColor(int i) {
+        for (int i2 = 0; i2 < 3; i2++) {
+            TextView textView = this.mListItems[i2];
+            if (textView == null) {
+                Log.w("SubListTemplateCard", String.format(Locale.US, "Missing list item view to update at row: %d", Integer.valueOf(i2 + 1)));
+                return;
+            }
+            textView.setTextColor(i);
+        }
+    }
+
+    public SubListTemplateCard(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        this.mListItems = new TextView[3];
+    }
+
+    public final void onFinishInflate() {
+        super/*android.view.ViewGroup*/.onFinishInflate();
+        this.mListIconView = (ImageView) findViewById(R.id.list_icon);
+        for (int i = 0; i < 3; i++) {
+            this.mListItems[i] = (TextView) findViewById(LIST_ITEM_TEXT_VIEW_IDS[i]);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final void resetUi() {
+        BcSmartspaceTemplateDataUtils.updateVisibility(this.mListIconView, 8);
+        for (int i = 0; i < 3; i++) {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mListItems[i], 8);
+        }
+    }
+
+    @Override // com.google.android.systemui.smartspace.BcSmartspaceCardSecondary
+    public final boolean setSmartspaceActions(SmartspaceTarget smartspaceTarget, BcSmartspaceDataPlugin.SmartspaceEventNotifier smartspaceEventNotifier, BcSmartspaceCardLoggingInfo bcSmartspaceCardLoggingInfo) {
+        SubListTemplateData templateData = (SubListTemplateData) smartspaceTarget.getTemplateData();
+        if (templateData == null) {
+            Log.w("SubListTemplateCard", "SubListTemplateData is null");
+            return false;
+        }
+        if (templateData.getSubListIcon() != null) {
+            BcSmartspaceTemplateDataUtils.setIcon(this.mListIconView, templateData.getSubListIcon());
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mListIconView, 0);
+        } else {
+            BcSmartspaceTemplateDataUtils.updateVisibility(this.mListIconView, 8);
+        }
+        if (templateData.getSubListTexts() != null) {
+            List subListTexts = templateData.getSubListTexts();
+            if (subListTexts.isEmpty()) {
+                return false;
+            }
+            int i = 0;
+            while (true) {
+                if (i >= 3) {
+                    break;
+                }
+                TextView textView = this.mListItems[i];
+                if (textView == null) {
+                    Log.w("SubListTemplateCard", String.format(Locale.US, "Missing list item view to update at row: %d", Integer.valueOf(i + 1)));
+                    break;
+                }
+                if (i < subListTexts.size()) {
+                    BcSmartspaceTemplateDataUtils.setText(textView, (Text) subListTexts.get(i));
+                    BcSmartspaceTemplateDataUtils.updateVisibility(textView, 0);
+                } else {
+                    textView.setText("");
+                    BcSmartspaceTemplateDataUtils.updateVisibility(textView, 8);
+                }
+                i++;
+            }
+        }
+        if (templateData.getSubListAction() != null) {
+            BcSmartSpaceUtil.setOnClickListener(this, smartspaceTarget, templateData.getSubListAction(), smartspaceEventNotifier, "SubListTemplateCard", bcSmartspaceCardLoggingInfo);
+            return true;
+        }
+        return true;
+    }
+}
diff --git a/packages/SystemUI/proto/Android.bp b/packages/SystemUI/proto/Android.bp
new file mode 100644
index 000000000000..2c2be70a9034
--- /dev/null
+++ b/packages/SystemUI/proto/Android.bp
@@ -0,0 +1,10 @@
+java_library {
+    name: "smartspace-proto-java",
+    proto: {
+        type: "nano",
+    },
+    srcs: [
+        "smartspace.proto",
+    ],
+    sdk_version: "current",
+}
diff --git a/packages/SystemUI/proto/smartspace.proto b/packages/SystemUI/proto/smartspace.proto
new file mode 100644
index 000000000000..a7a5e7539a28
--- /dev/null
+++ b/packages/SystemUI/proto/smartspace.proto
@@ -0,0 +1,104 @@
+syntax = "proto2";
+
+package SmartspaceProto;
+
+option java_package = "com.android.systemui.smartspace";
+option java_outer_classname = "SmartspaceProto";
+
+message CardWrapper {
+    required bytes icon = 1;
+    required SmartspaceUpdate.SmartspaceCard card = 2;
+    required int64 publishTime = 3;
+    required int32 gsaVersionCode = 4;
+    required int64 gsaUpdateTime = 5;
+    required bool isIconGrayscale = 6;
+}
+
+message SmartSpaceCardMetadata {
+        required int32 instanceId = 1;
+        required int32 cardTypeId = 2;
+}
+
+message SmartSpaceSubcards {
+    required int32 clickedSubcardIndex = 1;
+    repeated SmartSpaceCardMetadata subcards = 2;
+}
+
+message SmartspaceUpdate {
+    message SmartspaceCard {
+        message ExpiryCriteria {
+            required int64 expirationTimeMillis = 1;
+            required int32 maxImpressions = 2;
+        }
+
+        message Image {
+            required string key = 1;
+            required string gsaResourceName = 2;
+            required string uri = 3;
+        }
+
+        message Message {
+            message FormattedText {
+                message FormatParam {
+                    enum FormatParamArgs {
+                        SOMETHING0 = 0;
+                        SOMETHING1 = 1;
+                        SOMETHING2 = 2;
+                        SOMETHING3 = 3;
+                    }
+
+                    required string text = 1;
+                    required int32 truncateLocation = 2;
+                    required FormatParamArgs formatParamArgs = 3;
+                    required bool updateTimeLocally = 4;
+                }
+
+                required string text = 1;
+                required int32 truncateLocation = 2;
+                repeated FormatParam formatParam = 3;
+            }
+
+            required FormattedText title = 1;
+            required FormattedText subtitle = 2;
+        }
+
+        message TapAction {
+            enum ActionType {
+                ACTION0 = 0;
+                ACTION1 = 1;
+                ACTION2 = 2;
+            }
+
+            required ActionType actionType = 1;
+            required string intent = 2;
+        }
+
+        enum CardType {
+            CARD0 = 0;
+            CARD1 = 1;
+            CARD2 = 2;
+            CARD3 = 3;
+            CARD4 = 4;
+            CARD5 = 5;
+            CARD6 = 6;
+        }
+
+        required bool shouldDiscard = 1;
+        required int32 cardId = 2;
+        required Message preEvent = 3;
+        required Message duringEvent = 4;
+        required Message postEvent = 5;
+        required Image icon = 6;
+        required CardType cardType = 7;
+        required TapAction tapAction = 8;
+        required int64 updateTimeMillis = 9;
+        required int64 eventTimeMillis = 10;
+        required int64 eventDurationMillis = 11;
+        required ExpiryCriteria expiryCriteria = 12;
+        required int32 cardPriority = 13;
+        required bool isSensitive = 14;
+        required bool isWorkProfile = 15;
+    }
+
+    repeated SmartspaceCard card = 1;
+}
diff --git a/packages/SystemUI/res/values/flags.xml b/packages/SystemUI/res/values/flags.xml
index 07a40c86d03a..5d80b46f65a4 100644
--- a/packages/SystemUI/res/values/flags.xml
+++ b/packages/SystemUI/res/values/flags.xml
@@ -30,6 +30,8 @@
 
     <bool name="flag_charging_ripple">false</bool>
 
+    <bool name="flag_smartspace">true</bool>
+
     <!--  Whether the user switcher chip shows in the status bar. When true, the multi user
       avatar will no longer show on the lockscreen -->
     <bool name="flag_user_switcher_chip">false</bool>
diff --git a/packages/SystemUI/src/com/android/systemui/SystemUIInitializer.java b/packages/SystemUI/src/com/android/systemui/SystemUIInitializer.java
index 5c75a49818a6..09c6223f1dab 100644
--- a/packages/SystemUI/src/com/android/systemui/SystemUIInitializer.java
+++ b/packages/SystemUI/src/com/android/systemui/SystemUIInitializer.java
@@ -129,6 +129,10 @@ public abstract class SystemUIInitializer {
         // really need to ensure the Dependency gets initialized early on.
         Dependency dependency = mSysUIComponent.createDependency();
         dependency.start();
+
+        if (initializeComponents) {
+            mSysUIComponent.createKeyguardSmartspaceController();
+        }
     }
 
     /**
diff --git a/packages/SystemUI/src/com/android/systemui/dagger/SysUIComponent.java b/packages/SystemUI/src/com/android/systemui/dagger/SysUIComponent.java
index 3fe6669de556..e51ada42ee6a 100644
--- a/packages/SystemUI/src/com/android/systemui/dagger/SysUIComponent.java
+++ b/packages/SystemUI/src/com/android/systemui/dagger/SysUIComponent.java
@@ -44,6 +44,8 @@ import com.android.wm.shell.startingsurface.StartingSurface;
 import com.android.wm.shell.sysui.ShellInterface;
 import com.android.wm.shell.taskview.TaskViewFactory;
 
+import com.google.android.systemui.smartspace.KeyguardSmartspaceController;
+
 import dagger.BindsInstance;
 import dagger.Subcomponent;
 
@@ -182,4 +184,10 @@ public interface SysUIComponent {
      * Member injection into the supplied argument.
      */
     void inject(PeopleProvider peopleProvider);
+
+    /**
+     * Creates a KeyguardSmartspaceController.
+     */
+    @SysUISingleton
+    KeyguardSmartspaceController createKeyguardSmartspaceController();
 }
diff --git a/packages/SystemUI/src/com/android/systemui/dagger/SystemUIModule.java b/packages/SystemUI/src/com/android/systemui/dagger/SystemUIModule.java
index a491b2943d3e..b18b30db1b44 100644
--- a/packages/SystemUI/src/com/android/systemui/dagger/SystemUIModule.java
+++ b/packages/SystemUI/src/com/android/systemui/dagger/SystemUIModule.java
@@ -16,11 +16,13 @@
 
 package com.android.systemui.dagger;
 
+import android.app.AlarmManager;
 import android.app.INotificationManager;
 import android.app.Service;
 import android.app.backup.BackupManager;
 import android.content.Context;
 import android.service.dreams.IDreamManager;
+import android.os.Handler;
 
 import androidx.annotation.Nullable;
 
@@ -45,6 +47,7 @@ import com.android.systemui.bouncer.data.repository.BouncerRepositoryModule;
 import com.android.systemui.bouncer.domain.interactor.BouncerInteractorModule;
 import com.android.systemui.bouncer.ui.BouncerViewModule;
 import com.android.systemui.brightness.dagger.ScreenBrightnessModule;
+import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.classifier.FalsingModule;
 import com.android.systemui.clipboardoverlay.dagger.ClipboardOverlayModule;
 import com.android.systemui.common.data.CommonDataLayerModule;
@@ -123,6 +126,7 @@ import com.android.systemui.statusbar.dagger.StatusBarModule;
 import com.android.systemui.statusbar.disableflags.dagger.DisableFlagsModule;
 import com.android.systemui.statusbar.events.StatusBarEventsModule;
 import com.android.systemui.statusbar.events.SystemStatusAnimationScheduler;
+import com.android.systemui.statusbar.NotificationMediaManager;
 import com.android.systemui.statusbar.notification.NotifPipelineFlags;
 import com.android.systemui.statusbar.notification.collection.NotifPipeline;
 import com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinder;
@@ -139,6 +143,7 @@ import com.android.systemui.statusbar.phone.LetterboxModule;
 import com.android.systemui.statusbar.pipeline.dagger.StatusBarPipelineModule;
 import com.android.systemui.statusbar.policy.HeadsUpManager;
 import com.android.systemui.statusbar.policy.KeyguardStateController;
+import com.android.systemui.statusbar.policy.NextAlarmController;
 import com.android.systemui.statusbar.policy.PolicyModule;
 import com.android.systemui.statusbar.policy.SensitiveNotificationProtectionController;
 import com.android.systemui.statusbar.policy.ZenModeController;
@@ -153,6 +158,7 @@ import com.android.systemui.tuner.dagger.TunerModule;
 import com.android.systemui.user.UserModule;
 import com.android.systemui.user.domain.UserDomainLayerModule;
 import com.android.systemui.util.EventLogModule;
+import com.android.systemui.util.concurrency.DelayableExecutor;
 import com.android.systemui.util.concurrency.SysUIConcurrencyModule;
 import com.android.systemui.util.dagger.UtilModule;
 import com.android.systemui.util.kotlin.SysUICoroutinesModule;
@@ -166,6 +172,11 @@ import com.android.systemui.wallet.dagger.WalletModule;
 import com.android.systemui.wmshell.BubblesManager;
 import com.android.wm.shell.bubbles.Bubbles;
 
+import com.google.android.systemui.smartspace.BcSmartspaceDataProvider;
+import com.google.android.systemui.smartspace.KeyguardMediaViewController;
+import com.google.android.systemui.smartspace.KeyguardSmartspaceController;
+import com.google.android.systemui.smartspace.KeyguardZenAlarmViewController;
+
 import dagger.Binds;
 import dagger.BindsOptionalOf;
 import dagger.Module;
@@ -456,4 +467,28 @@ public abstract class SystemUIModule {
     static SettingsProxy.CurrentUserIdProvider provideCurrentUserId(UserTracker userTracker) {
         return userTracker::getUserId;
     }
+
+    @Provides
+    @SysUISingleton
+    static KeyguardSmartspaceController provideKeyguardSmartspaceController(FeatureFlags featureFlags,
+            KeyguardZenAlarmViewController keyguardZenAlarmViewController, KeyguardMediaViewController keyguardMediaViewController) {
+        return new KeyguardSmartspaceController(featureFlags, keyguardZenAlarmViewController, keyguardMediaViewController);
+    }
+    @Provides
+    @SysUISingleton
+    static KeyguardZenAlarmViewController provideKeyguardZenAlarmViewController(Context context, BcSmartspaceDataPlugin bcSmartspaceDataPlugin, ZenModeController zenModeController,
+            AlarmManager alarmManager, NextAlarmController nextAlarmController, Handler handler) {
+        return new KeyguardZenAlarmViewController(context, bcSmartspaceDataPlugin, zenModeController, alarmManager, nextAlarmController, handler);
+    }
+    @Provides
+    @SysUISingleton
+    static KeyguardMediaViewController provideKeyguardMediaViewController(Context context, BcSmartspaceDataPlugin bcSmartspaceDataPlugin,
+            @Main DelayableExecutor delayableExecutor, NotificationMediaManager notificationMediaManager, BroadcastDispatcher broadcastDispatcher, UserTracker userTracker) {
+        return new KeyguardMediaViewController(context, bcSmartspaceDataPlugin, delayableExecutor, notificationMediaManager, broadcastDispatcher, userTracker);
+    }
+    @Provides
+    @SysUISingleton
+    static BcSmartspaceDataPlugin provideBcSmartspaceDataPlugin() {
+        return new BcSmartspaceDataProvider();
+    }
 }
diff --git a/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardMediaViewController.java b/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardMediaViewController.java
new file mode 100644
index 000000000000..e39381e470a6
--- /dev/null
+++ b/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardMediaViewController.java
@@ -0,0 +1,180 @@
+package com.google.android.systemui.smartspace;
+
+import android.app.smartspace.SmartspaceAction;
+import android.app.smartspace.SmartspaceTarget;
+import android.content.ComponentName;
+import android.content.Context;
+import android.media.MediaMetadata;
+import android.os.UserHandle;
+import android.text.TextUtils;
+import android.view.View;
+
+import com.android.systemui.R;
+import com.android.systemui.broadcast.BroadcastDispatcher;
+import com.android.systemui.dagger.SysUISingleton;
+import com.android.systemui.plugins.BcSmartspaceDataPlugin;
+import com.android.systemui.settings.UserTracker;
+import com.android.systemui.statusbar.NotificationMediaManager;
+import com.android.systemui.util.concurrency.DelayableExecutor;
+
+import javax.inject.Inject;
+
+import kotlin.Unit;
+import kotlin.jvm.internal.Intrinsics;
+
+/* compiled from: KeyguardMediaViewController.kt */
+@SysUISingleton
+public final class KeyguardMediaViewController {
+    private CharSequence artist;
+    private final BroadcastDispatcher broadcastDispatcher;
+    private final Context context;
+    private final ComponentName mediaComponent;
+    private final NotificationMediaManager.MediaListener mediaListener =
+            new NotificationMediaManager.MediaListener() {
+                @Override
+                public void onPrimaryMetadataOrStateChanged(
+                        final MediaMetadata mediaMetadata, final int i) {
+                    DelayableExecutor uiExecutor = getUiExecutor();
+                    final KeyguardMediaViewController keyguardMediaViewController =
+                            KeyguardMediaViewController.this;
+                    uiExecutor.execute(
+                            new Runnable() {
+                                @Override
+                                public final void run() {
+                                    updateMediaInfo(mediaMetadata, i);
+                                }
+                            });
+                }
+            };
+    private final NotificationMediaManager mediaManager;
+    private final BcSmartspaceDataPlugin plugin;
+    private BcSmartspaceDataPlugin.SmartspaceView smartspaceView;
+    private CharSequence title;
+    private final DelayableExecutor uiExecutor;
+    private UserTracker userTracker;
+
+    @Inject
+    public KeyguardMediaViewController(
+            Context context,
+            BcSmartspaceDataPlugin plugin,
+            DelayableExecutor uiExecutor,
+            NotificationMediaManager mediaManager,
+            BroadcastDispatcher broadcastDispatcher,
+            UserTracker userTracker) {
+        Intrinsics.checkNotNullParameter(context, "context");
+        Intrinsics.checkNotNullParameter(plugin, "plugin");
+        Intrinsics.checkNotNullParameter(uiExecutor, "uiExecutor");
+        Intrinsics.checkNotNullParameter(mediaManager, "mediaManager");
+        Intrinsics.checkNotNullParameter(broadcastDispatcher, "broadcastDispatcher");
+        this.context = context;
+        this.plugin = plugin;
+        this.uiExecutor = uiExecutor;
+        this.mediaManager = mediaManager;
+        this.broadcastDispatcher = broadcastDispatcher;
+        this.userTracker = userTracker;
+        mediaComponent = new ComponentName(context, KeyguardMediaViewController.class);
+    }
+
+    public final DelayableExecutor getUiExecutor() {
+        return uiExecutor;
+    }
+
+    public final BcSmartspaceDataPlugin.SmartspaceView getSmartspaceView() {
+        return smartspaceView;
+    }
+
+    public final void setSmartspaceView(BcSmartspaceDataPlugin.SmartspaceView smartspaceView) {
+        this.smartspaceView = smartspaceView;
+    }
+
+    public final void init() {
+        plugin.addOnAttachStateChangeListener(
+                new View.OnAttachStateChangeListener() {
+                    @Override
+                    public void onViewAttachedToWindow(View v) {
+                        NotificationMediaManager notificationMediaManager;
+                        NotificationMediaManager.MediaListener keyguardMediaViewController;
+                        Intrinsics.checkNotNullParameter(v, "v");
+                        setSmartspaceView((BcSmartspaceDataPlugin.SmartspaceView) v);
+                        notificationMediaManager = mediaManager;
+                        keyguardMediaViewController = mediaListener;
+                        notificationMediaManager.addCallback(keyguardMediaViewController);
+                    }
+
+                    @Override
+                    public void onViewDetachedFromWindow(View v) {
+                        NotificationMediaManager notificationMediaManager;
+                        NotificationMediaManager.MediaListener keyguardMediaViewController;
+                        Intrinsics.checkNotNullParameter(v, "v");
+                        setSmartspaceView(null);
+                        notificationMediaManager = mediaManager;
+                        keyguardMediaViewController = mediaListener;
+                        notificationMediaManager.removeCallback(keyguardMediaViewController);
+                    }
+                });
+    }
+
+    public final void updateMediaInfo(MediaMetadata mediaMetadata, int i) {
+        CharSequence charSequence;
+        if (!NotificationMediaManager.isPlayingState(i)) {
+            reset();
+            return;
+        }
+        Unit unit = null;
+        if (mediaMetadata == null) {
+            charSequence = null;
+        } else {
+            charSequence = mediaMetadata.getText("android.media.metadata.TITLE");
+            if (TextUtils.isEmpty(charSequence)) {
+                charSequence = context.getResources().getString(R.string.music_controls_no_title);
+            }
+        }
+        CharSequence text =
+                mediaMetadata == null
+                        ? null
+                        : mediaMetadata.getText("android.media.metadata.ARTIST");
+        if (TextUtils.equals(title, charSequence) && TextUtils.equals(artist, text)) {
+            return;
+        }
+        title = charSequence;
+        artist = text;
+        if (charSequence != null) {
+            SmartspaceAction build =
+                    new SmartspaceAction.Builder("deviceMediaTitle", charSequence.toString())
+                            .setSubtitle(artist)
+                            .setIcon(mediaManager.getMediaIcon())
+                            .build();
+            if (userTracker == null) {
+                Intrinsics.throwUninitializedPropertyAccessException("userTracker");
+                throw null;
+            }
+            SmartspaceTarget build2 =
+                    new SmartspaceTarget.Builder(
+                                    "deviceMedia",
+                                    mediaComponent,
+                                    UserHandle.of(userTracker.getUserId()))
+                            .setFeatureType(15)
+                            .setHeaderAction(build)
+                            .build();
+            BcSmartspaceDataPlugin.SmartspaceView smartspaceView = getSmartspaceView();
+            if (smartspaceView != null) {
+                smartspaceView.setMediaTarget(build2);
+                unit = Unit.INSTANCE;
+            }
+        }
+        if (unit != null) {
+            return;
+        }
+        reset();
+    }
+
+    public final void reset() {
+        title = null;
+        artist = null;
+        BcSmartspaceDataPlugin.SmartspaceView smartspaceView = getSmartspaceView();
+        if (smartspaceView == null) {
+            return;
+        }
+        smartspaceView.setMediaTarget(null);
+    }
+}
diff --git a/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardSmartspaceController.kt b/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardSmartspaceController.kt
new file mode 100644
index 000000000000..26dc41239aef
--- /dev/null
+++ b/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardSmartspaceController.kt
@@ -0,0 +1,22 @@
+package com.google.android.systemui.smartspace
+
+import com.android.systemui.dagger.SysUISingleton
+import com.android.systemui.flags.FeatureFlags
+import com.android.systemui.flags.Flags
+
+import com.google.android.systemui.smartspace.KeyguardMediaViewController
+import com.google.android.systemui.smartspace.KeyguardZenAlarmViewController
+
+import javax.inject.Inject
+
+@SysUISingleton
+class KeyguardSmartspaceController @Inject constructor(
+    private val featureFlags: FeatureFlags,
+    private val zenController: KeyguardZenAlarmViewController,
+    private val mediaController: KeyguardMediaViewController,
+) {
+    init {
+        mediaController.init()
+        zenController.init()
+    }
+}
diff --git a/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardZenAlarmViewController.kt b/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardZenAlarmViewController.kt
new file mode 100644
index 000000000000..f18ace7264ca
--- /dev/null
+++ b/packages/SystemUI/src/com/google/android/systemui/smartspace/KeyguardZenAlarmViewController.kt
@@ -0,0 +1,142 @@
+package com.google.android.systemui.smartspace
+
+import android.app.ActivityManager
+import android.app.AlarmManager
+import android.content.Context
+import android.graphics.drawable.Drawable
+import android.graphics.drawable.InsetDrawable
+import android.os.Handler
+import android.text.format.DateFormat
+import android.view.View
+import com.android.internal.annotations.VisibleForTesting
+import com.android.systemui.R
+import com.android.systemui.dagger.SysUISingleton
+import com.android.systemui.plugins.BcSmartspaceDataPlugin
+import com.android.systemui.statusbar.policy.NextAlarmController
+import com.android.systemui.statusbar.policy.ZenModeController
+import java.util.LinkedHashSet
+import java.util.concurrent.TimeUnit
+import javax.inject.Inject
+
+@SysUISingleton
+class KeyguardZenAlarmViewController @Inject constructor(
+    val context: Context,
+    val plugin: BcSmartspaceDataPlugin,
+    val zenModeController: ZenModeController,
+    val alarmManager: AlarmManager,
+    val nextAlarmController: NextAlarmController,
+    val handler: Handler
+) {
+    val alarmImage = context.getResources().getDrawable(R.drawable.ic_access_alarms_big, null)
+    val smartspaceViews = LinkedHashSet<BcSmartspaceDataPlugin.SmartspaceView>()
+	val zenModeCallback = object : ZenModeController.Callback {
+        override fun onZenChanged(i: Int) {
+            updateDnd()
+        }
+    }
+    
+    val nextAlarmCallback = object : NextAlarmController.NextAlarmChangeCallback {
+            override fun onNextAlarmChanged(alarmClockInfo: AlarmManager.AlarmClockInfo?) {
+                updateNextAlarm()
+            }
+        }
+    
+    val dndImage: Drawable = loadDndImage()
+    
+    fun init() {
+        plugin.addOnAttachStateChangeListener(object : View.OnAttachStateChangeListener {
+            override fun onViewAttachedToWindow(v: View?) {
+                smartspaceViews.add(v as BcSmartspaceDataPlugin.SmartspaceView)
+                if (smartspaceViews.size === 1) {
+                    zenModeController.addCallback(zenModeCallback)
+                    nextAlarmController.addCallback(nextAlarmCallback)
+                }
+                refresh()
+            }
+
+            override fun onViewDetachedFromWindow(v: View?) {
+                smartspaceViews.remove(v as BcSmartspaceDataPlugin.SmartspaceView)
+                if (smartspaceViews.isEmpty()) {
+                    zenModeController.removeCallback(zenModeCallback)
+                    nextAlarmController.removeCallback(nextAlarmCallback)
+                }
+            }
+        })
+        updateNextAlarm()
+    }
+
+    fun refresh() {
+        updateDnd()
+        updateNextAlarm()
+    }
+
+    private fun loadDndImage(): Drawable {
+        val drawable: Drawable = context.getResources().getDrawable(R.drawable.stat_sys_dnd, null)
+        val drawable2: Drawable = (drawable as InsetDrawable).getDrawable()
+        return drawable2
+    }
+
+    fun updateDnd() {
+        if (zenModeController.getZen() !== 0) {
+            val string: String =
+                context.getResources().getString(R.string.accessibility_quick_settings_dnd)
+            for (smartspaceView in smartspaceViews) {
+                smartspaceView.setDnd(dndImage, string)
+            }
+            return
+        }
+        for (smartspaceView in smartspaceViews) {
+            smartspaceView.setDnd(null, null)
+        }
+    }
+
+    fun updateNextAlarm() {
+        alarmManager.cancel(object : AlarmManager.OnAlarmListener {
+            override fun onAlarm() {
+                showAlarm()
+            }
+        })
+        val nextAlarm: Long = zenModeController.getNextAlarm()
+        if (nextAlarm > 0) {
+            val millis: Long = nextAlarm - TimeUnit.HOURS.toMillis(12L)
+            if (millis > 0) {
+                alarmManager.setExact(
+                    1,
+                    millis,
+                    "lock_screen_next_alarm",
+                    object : AlarmManager.OnAlarmListener {
+                        override fun onAlarm() {
+                            showAlarm()
+                        }
+                    },
+                    handler
+                )
+            }
+        }
+        showAlarm()
+    }
+
+    fun showAlarm() {
+        val nextAlarm: Long = zenModeController.getNextAlarm()
+        if (nextAlarm > 0 && withinNHours(nextAlarm, 12L)) {
+            val obj: String = DateFormat.format(
+                if (DateFormat.is24HourFormat(
+                        context,
+                        ActivityManager.getCurrentUser()
+                    )
+                ) "HH:mm" else "h:mm", nextAlarm
+            ).toString()
+            for (smartspaceView in smartspaceViews) {
+                smartspaceView.setNextAlarm(alarmImage, obj)
+            }
+            return
+        }
+        for (smartspaceView in smartspaceViews) {
+            smartspaceView.setNextAlarm(null, null)
+        }
+    }
+
+    private fun withinNHours(j: Long, j2: Long): Boolean {
+        return j <= System.currentTimeMillis() + TimeUnit.HOURS.toMillis(j2)
+    }
+}
-- 
2.48.1

